{"ast":null,"code":"/**\n * Partial implementation of PKCS#1 v2.2: RSA-OEAP\n *\n * Modified but based on the following MIT and BSD licensed code:\n *\n * https://github.com/kjur/jsjws/blob/master/rsa.js:\n *\n * The 'jsjws'(JSON Web Signature JavaScript Library) License\n *\n * Copyright (c) 2012 Kenji Urushima\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:\n *\n * RSAES-OAEP.js\n * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $\n * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)\n * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.\n * Contact: ellis@nukinetics.com\n * Distributed under the BSD License.\n *\n * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125\n *\n * @author Evan Jones (http://evanjones.ca/)\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nrequire('./util');\n\nrequire('./random');\n\nrequire('./sha1'); // shortcut for PKCS#1 API\n\n\nvar pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};\n/**\n * Encode the given RSAES-OAEP message (M) using key, with optional label (L)\n * and seed.\n *\n * This method does not perform RSA encryption, it only encodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param message the message to encode.\n * @param options the options to use:\n *          label an optional label to use.\n *          seed the seed to use.\n *          md the message digest object to use, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the encoded message bytes.\n */\n\npkcs1.encode_rsa_oaep = function (key, message, options) {\n  // parse arguments\n  var label;\n  var seed;\n  var md;\n  var mgf1Md; // legacy args (label, seed, md)\n\n  if (typeof options === 'string') {\n    label = options;\n    seed = arguments[3] || undefined;\n    md = arguments[4] || undefined;\n  } else if (options) {\n    label = options.label || undefined;\n    seed = options.seed || undefined;\n    md = options.md || undefined;\n\n    if (options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  } // default OAEP to SHA-1 message digest\n\n\n  if (!md) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  } // default MGF-1 to same as OAEP\n\n\n  if (!mgf1Md) {\n    mgf1Md = md;\n  } // compute length in bytes and check output\n\n\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n  var maxLength = keyLength - 2 * md.digestLength - 2;\n\n  if (message.length > maxLength) {\n    var error = new Error('RSAES-OAEP input message length is too long.');\n    error.length = message.length;\n    error.maxLength = maxLength;\n    throw error;\n  }\n\n  if (!label) {\n    label = '';\n  }\n\n  md.update(label, 'raw');\n  var lHash = md.digest();\n  var PS = '';\n  var PS_length = maxLength - message.length;\n\n  for (var i = 0; i < PS_length; i++) {\n    PS += '\\x00';\n  }\n\n  var DB = lHash.getBytes() + PS + '\\x01' + message;\n\n  if (!seed) {\n    seed = forge.random.getBytes(md.digestLength);\n  } else if (seed.length !== md.digestLength) {\n    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' + 'match the digest length.');\n    error.seedLength = seed.length;\n    error.digestLength = md.digestLength;\n    throw error;\n  }\n\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length); // return encoded message\n\n  return '\\x00' + maskedSeed + maskedDB;\n};\n/**\n * Decode the given RSAES-OAEP encoded message (EM) using key, with optional\n * label (L).\n *\n * This method does not perform RSA decryption, it only decodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param em the encoded message to decode.\n * @param options the options to use:\n *          label an optional label to use.\n *          md the message digest object to use for OAEP, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the decoded message bytes.\n */\n\n\npkcs1.decode_rsa_oaep = function (key, em, options) {\n  // parse args\n  var label;\n  var md;\n  var mgf1Md; // legacy args\n\n  if (typeof options === 'string') {\n    label = options;\n    md = arguments[3] || undefined;\n  } else if (options) {\n    label = options.label || undefined;\n    md = options.md || undefined;\n\n    if (options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  } // compute length in bytes\n\n\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n\n  if (em.length !== keyLength) {\n    var error = new Error('RSAES-OAEP encoded message length is invalid.');\n    error.length = em.length;\n    error.expectedLength = keyLength;\n    throw error;\n  } // default OAEP to SHA-1 message digest\n\n\n  if (md === undefined) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  } // default MGF-1 to same as OAEP\n\n\n  if (!mgf1Md) {\n    mgf1Md = md;\n  }\n\n  if (keyLength < 2 * md.digestLength + 2) {\n    throw new Error('RSAES-OAEP key is too short for the hash function.');\n  }\n\n  if (!label) {\n    label = '';\n  }\n\n  md.update(label, 'raw');\n  var lHash = md.digest().getBytes(); // split the message into its parts\n\n  var y = em.charAt(0);\n  var maskedSeed = em.substring(1, md.digestLength + 1);\n  var maskedDB = em.substring(1 + md.digestLength);\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);\n  var lHashPrime = db.substring(0, md.digestLength); // constant time check that all values match what is expected\n\n  var error = y !== '\\x00'; // constant time check lHash vs lHashPrime\n\n  for (var i = 0; i < md.digestLength; ++i) {\n    error |= lHash.charAt(i) !== lHashPrime.charAt(i);\n  } // \"constant time\" find the 0x1 byte separating the padding (zeros) from the\n  // message\n  // TODO: It must be possible to do this in a better/smarter way?\n\n\n  var in_ps = 1;\n  var index = md.digestLength;\n\n  for (var j = md.digestLength; j < db.length; j++) {\n    var code = db.charCodeAt(j);\n    var is_0 = code & 0x1 ^ 0x1; // non-zero if not 0 or 1 in the ps section\n\n    var error_mask = in_ps ? 0xfffe : 0x0000;\n    error |= code & error_mask; // latch in_ps to zero after we find 0x1\n\n    in_ps = in_ps & is_0;\n    index += in_ps;\n  }\n\n  if (error || db.charCodeAt(index) !== 0x1) {\n    throw new Error('Invalid RSAES-OAEP padding.');\n  }\n\n  return db.substring(index + 1);\n};\n\nfunction rsa_mgf1(seed, maskLength, hash) {\n  // default to SHA-1 message digest\n  if (!hash) {\n    hash = forge.md.sha1.create();\n  }\n\n  var t = '';\n  var count = Math.ceil(maskLength / hash.digestLength);\n\n  for (var i = 0; i < count; ++i) {\n    var c = String.fromCharCode(i >> 24 & 0xFF, i >> 16 & 0xFF, i >> 8 & 0xFF, i & 0xFF);\n    hash.start();\n    hash.update(seed + c);\n    t += hash.digest().getBytes();\n  }\n\n  return t.substring(0, maskLength);\n}","map":{"version":3,"names":["forge","require","pkcs1","module","exports","encode_rsa_oaep","key","message","options","label","seed","md","mgf1Md","arguments","undefined","mgf1","sha1","create","start","keyLength","Math","ceil","n","bitLength","maxLength","digestLength","length","error","Error","update","lHash","digest","PS","PS_length","i","DB","getBytes","random","seedLength","dbMask","rsa_mgf1","maskedDB","util","xorBytes","seedMask","maskedSeed","decode_rsa_oaep","em","expectedLength","y","charAt","substring","db","lHashPrime","in_ps","index","j","code","charCodeAt","is_0","error_mask","maskLength","hash","t","count","c","String","fromCharCode"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/node-forge/lib/pkcs1.js"],"sourcesContent":["/**\n * Partial implementation of PKCS#1 v2.2: RSA-OEAP\n *\n * Modified but based on the following MIT and BSD licensed code:\n *\n * https://github.com/kjur/jsjws/blob/master/rsa.js:\n *\n * The 'jsjws'(JSON Web Signature JavaScript Library) License\n *\n * Copyright (c) 2012 Kenji Urushima\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:\n *\n * RSAES-OAEP.js\n * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $\n * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)\n * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.\n * Contact: ellis@nukinetics.com\n * Distributed under the BSD License.\n *\n * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125\n *\n * @author Evan Jones (http://evanjones.ca/)\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./random');\nrequire('./sha1');\n\n// shortcut for PKCS#1 API\nvar pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};\n\n/**\n * Encode the given RSAES-OAEP message (M) using key, with optional label (L)\n * and seed.\n *\n * This method does not perform RSA encryption, it only encodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param message the message to encode.\n * @param options the options to use:\n *          label an optional label to use.\n *          seed the seed to use.\n *          md the message digest object to use, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the encoded message bytes.\n */\npkcs1.encode_rsa_oaep = function(key, message, options) {\n  // parse arguments\n  var label;\n  var seed;\n  var md;\n  var mgf1Md;\n  // legacy args (label, seed, md)\n  if(typeof options === 'string') {\n    label = options;\n    seed = arguments[3] || undefined;\n    md = arguments[4] || undefined;\n  } else if(options) {\n    label = options.label || undefined;\n    seed = options.seed || undefined;\n    md = options.md || undefined;\n    if(options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  }\n\n  // default OAEP to SHA-1 message digest\n  if(!md) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  }\n\n  // default MGF-1 to same as OAEP\n  if(!mgf1Md) {\n    mgf1Md = md;\n  }\n\n  // compute length in bytes and check output\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n  var maxLength = keyLength - 2 * md.digestLength - 2;\n  if(message.length > maxLength) {\n    var error = new Error('RSAES-OAEP input message length is too long.');\n    error.length = message.length;\n    error.maxLength = maxLength;\n    throw error;\n  }\n\n  if(!label) {\n    label = '';\n  }\n  md.update(label, 'raw');\n  var lHash = md.digest();\n\n  var PS = '';\n  var PS_length = maxLength - message.length;\n  for(var i = 0; i < PS_length; i++) {\n    PS += '\\x00';\n  }\n\n  var DB = lHash.getBytes() + PS + '\\x01' + message;\n\n  if(!seed) {\n    seed = forge.random.getBytes(md.digestLength);\n  } else if(seed.length !== md.digestLength) {\n    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' +\n      'match the digest length.');\n    error.seedLength = seed.length;\n    error.digestLength = md.digestLength;\n    throw error;\n  }\n\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);\n\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);\n\n  // return encoded message\n  return '\\x00' + maskedSeed + maskedDB;\n};\n\n/**\n * Decode the given RSAES-OAEP encoded message (EM) using key, with optional\n * label (L).\n *\n * This method does not perform RSA decryption, it only decodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param em the encoded message to decode.\n * @param options the options to use:\n *          label an optional label to use.\n *          md the message digest object to use for OAEP, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the decoded message bytes.\n */\npkcs1.decode_rsa_oaep = function(key, em, options) {\n  // parse args\n  var label;\n  var md;\n  var mgf1Md;\n  // legacy args\n  if(typeof options === 'string') {\n    label = options;\n    md = arguments[3] || undefined;\n  } else if(options) {\n    label = options.label || undefined;\n    md = options.md || undefined;\n    if(options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  }\n\n  // compute length in bytes\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n\n  if(em.length !== keyLength) {\n    var error = new Error('RSAES-OAEP encoded message length is invalid.');\n    error.length = em.length;\n    error.expectedLength = keyLength;\n    throw error;\n  }\n\n  // default OAEP to SHA-1 message digest\n  if(md === undefined) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  }\n\n  // default MGF-1 to same as OAEP\n  if(!mgf1Md) {\n    mgf1Md = md;\n  }\n\n  if(keyLength < 2 * md.digestLength + 2) {\n    throw new Error('RSAES-OAEP key is too short for the hash function.');\n  }\n\n  if(!label) {\n    label = '';\n  }\n  md.update(label, 'raw');\n  var lHash = md.digest().getBytes();\n\n  // split the message into its parts\n  var y = em.charAt(0);\n  var maskedSeed = em.substring(1, md.digestLength + 1);\n  var maskedDB = em.substring(1 + md.digestLength);\n\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);\n\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);\n\n  var lHashPrime = db.substring(0, md.digestLength);\n\n  // constant time check that all values match what is expected\n  var error = (y !== '\\x00');\n\n  // constant time check lHash vs lHashPrime\n  for(var i = 0; i < md.digestLength; ++i) {\n    error |= (lHash.charAt(i) !== lHashPrime.charAt(i));\n  }\n\n  // \"constant time\" find the 0x1 byte separating the padding (zeros) from the\n  // message\n  // TODO: It must be possible to do this in a better/smarter way?\n  var in_ps = 1;\n  var index = md.digestLength;\n  for(var j = md.digestLength; j < db.length; j++) {\n    var code = db.charCodeAt(j);\n\n    var is_0 = (code & 0x1) ^ 0x1;\n\n    // non-zero if not 0 or 1 in the ps section\n    var error_mask = in_ps ? 0xfffe : 0x0000;\n    error |= (code & error_mask);\n\n    // latch in_ps to zero after we find 0x1\n    in_ps = in_ps & is_0;\n    index += in_ps;\n  }\n\n  if(error || db.charCodeAt(index) !== 0x1) {\n    throw new Error('Invalid RSAES-OAEP padding.');\n  }\n\n  return db.substring(index + 1);\n};\n\nfunction rsa_mgf1(seed, maskLength, hash) {\n  // default to SHA-1 message digest\n  if(!hash) {\n    hash = forge.md.sha1.create();\n  }\n  var t = '';\n  var count = Math.ceil(maskLength / hash.digestLength);\n  for(var i = 0; i < count; ++i) {\n    var c = String.fromCharCode(\n      (i >> 24) & 0xFF, (i >> 16) & 0xFF, (i >> 8) & 0xFF, i & 0xFF);\n    hash.start();\n    hash.update(seed + c);\n    t += hash.digest().getBytes();\n  }\n  return t.substring(0, maskLength);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}