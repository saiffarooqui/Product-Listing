{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloudsearch_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar cloudsearch_v1;\n\n(function (cloudsearch_v1) {\n  /**\n   * Cloud Search API\n   *\n   * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const cloudsearch = google.cloudsearch('v1');\n   * ```\n   */\n  class Cloudsearch {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.debug = new Resource$Debug(this.context);\n      this.indexing = new Resource$Indexing(this.context);\n      this.media = new Resource$Media(this.context);\n      this.operations = new Resource$Operations(this.context);\n      this.query = new Resource$Query(this.context);\n      this.settings = new Resource$Settings(this.context);\n      this.stats = new Resource$Stats(this.context);\n      this.v1 = new Resource$V1(this.context);\n    }\n\n  }\n\n  cloudsearch_v1.Cloudsearch = Cloudsearch;\n\n  class Resource$Debug {\n    constructor(context) {\n      this.context = context;\n      this.datasources = new Resource$Debug$Datasources(this.context);\n      this.identitysources = new Resource$Debug$Identitysources(this.context);\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Debug = Resource$Debug;\n\n  class Resource$Debug$Datasources {\n    constructor(context) {\n      this.context = context;\n      this.items = new Resource$Debug$Datasources$Items(this.context);\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Debug$Datasources = Resource$Debug$Datasources;\n\n  class Resource$Debug$Datasources$Items {\n    constructor(context) {\n      this.context = context;\n      this.unmappedids = new Resource$Debug$Datasources$Items$Unmappedids(this.context);\n    }\n\n    checkAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/debug/{+name}:checkAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    searchByViewUrl(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/debug/{+name}/items:searchByViewUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Debug$Datasources$Items = Resource$Debug$Datasources$Items;\n\n  class Resource$Debug$Datasources$Items$Unmappedids {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Debug$Datasources$Items$Unmappedids = Resource$Debug$Datasources$Items$Unmappedids;\n\n  class Resource$Debug$Identitysources {\n    constructor(context) {\n      this.context = context;\n      this.items = new Resource$Debug$Identitysources$Items(this.context);\n      this.unmappedids = new Resource$Debug$Identitysources$Unmappedids(this.context);\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Debug$Identitysources = Resource$Debug$Identitysources;\n\n  class Resource$Debug$Identitysources$Items {\n    constructor(context) {\n      this.context = context;\n    }\n\n    listForunmappedidentity(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/debug/{+parent}/items:forunmappedidentity').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Debug$Identitysources$Items = Resource$Debug$Identitysources$Items;\n\n  class Resource$Debug$Identitysources$Unmappedids {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Debug$Identitysources$Unmappedids = Resource$Debug$Identitysources$Unmappedids;\n\n  class Resource$Indexing {\n    constructor(context) {\n      this.context = context;\n      this.datasources = new Resource$Indexing$Datasources(this.context);\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Indexing = Resource$Indexing;\n\n  class Resource$Indexing$Datasources {\n    constructor(context) {\n      this.context = context;\n      this.items = new Resource$Indexing$Datasources$Items(this.context);\n    }\n\n    deleteSchema(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSchema(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateSchema(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Indexing$Datasources = Resource$Indexing$Datasources;\n\n  class Resource$Indexing$Datasources$Items {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deleteQueueItems(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/items:deleteQueueItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    index(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}:index').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/items').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    poll(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/items:poll').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    push(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}:push').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    unreserve(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/items:unreserve').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Indexing$Datasources$Items = Resource$Indexing$Datasources$Items;\n\n  class Resource$Media {\n    constructor(context) {\n      this.context = context;\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['resourceName'],\n        pathParams: ['resourceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Media = Resource$Media;\n\n  class Resource$Operations {\n    constructor(context) {\n      this.context = context;\n      this.lro = new Resource$Operations$Lro(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Operations = Resource$Operations;\n\n  class Resource$Operations$Lro {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/lro').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Operations$Lro = Resource$Operations$Lro;\n\n  class Resource$Query {\n    constructor(context) {\n      this.context = context;\n      this.sources = new Resource$Query$Sources(this.context);\n    }\n\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/query/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    suggest(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/query/suggest').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Query = Resource$Query;\n\n  class Resource$Query$Sources {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/query/sources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Query$Sources = Resource$Query$Sources;\n\n  class Resource$Settings {\n    constructor(context) {\n      this.context = context;\n      this.datasources = new Resource$Settings$Datasources(this.context);\n      this.searchapplications = new Resource$Settings$Searchapplications(this.context);\n    }\n\n    getCustomer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/customer').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateCustomer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/customer').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Settings = Resource$Settings;\n\n  class Resource$Settings$Datasources {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Settings$Datasources = Resource$Settings$Datasources;\n\n  class Resource$Settings$Searchapplications {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    reset(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}:reset').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Settings$Searchapplications = Resource$Settings$Searchapplications;\n\n  class Resource$Stats {\n    constructor(context) {\n      this.context = context;\n      this.index = new Resource$Stats$Index(this.context);\n      this.query = new Resource$Stats$Query(this.context);\n      this.session = new Resource$Stats$Session(this.context);\n      this.user = new Resource$Stats$User(this.context);\n    }\n\n    getIndex(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/index').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getQuery(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/query').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSearchapplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/searchapplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSession(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/session').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getUser(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/user').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Stats = Resource$Stats;\n\n  class Resource$Stats$Index {\n    constructor(context) {\n      this.context = context;\n      this.datasources = new Resource$Stats$Index$Datasources(this.context);\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Stats$Index = Resource$Stats$Index;\n\n  class Resource$Stats$Index$Datasources {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/index/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Stats$Index$Datasources = Resource$Stats$Index$Datasources;\n\n  class Resource$Stats$Query {\n    constructor(context) {\n      this.context = context;\n      this.searchapplications = new Resource$Stats$Query$Searchapplications(this.context);\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Stats$Query = Resource$Stats$Query;\n\n  class Resource$Stats$Query$Searchapplications {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/query/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Stats$Query$Searchapplications = Resource$Stats$Query$Searchapplications;\n\n  class Resource$Stats$Session {\n    constructor(context) {\n      this.context = context;\n      this.searchapplications = new Resource$Stats$Session$Searchapplications(this.context);\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Stats$Session = Resource$Stats$Session;\n\n  class Resource$Stats$Session$Searchapplications {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/session/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Stats$Session$Searchapplications = Resource$Stats$Session$Searchapplications;\n\n  class Resource$Stats$User {\n    constructor(context) {\n      this.context = context;\n      this.searchapplications = new Resource$Stats$User$Searchapplications(this.context);\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Stats$User = Resource$Stats$User;\n\n  class Resource$Stats$User$Searchapplications {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/user/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$Stats$User$Searchapplications = Resource$Stats$User$Searchapplications;\n\n  class Resource$V1 {\n    constructor(context) {\n      this.context = context;\n    }\n\n    initializeCustomer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1:initializeCustomer').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  cloudsearch_v1.Resource$V1 = Resource$V1;\n})(cloudsearch_v1 = exports.cloudsearch_v1 || (exports.cloudsearch_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","cloudsearch_v1","googleapis_common_1","require","Cloudsearch","constructor","options","google","context","_options","debug","Resource$Debug","indexing","Resource$Indexing","media","Resource$Media","operations","Resource$Operations","query","Resource$Query","settings","Resource$Settings","stats","Resource$Stats","v1","Resource$V1","datasources","Resource$Debug$Datasources","identitysources","Resource$Debug$Identitysources","items","Resource$Debug$Datasources$Items","unmappedids","Resource$Debug$Datasources$Items$Unmappedids","checkAccess","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","searchByViewUrl","list","Resource$Debug$Identitysources$Items","Resource$Debug$Identitysources$Unmappedids","listForunmappedidentity","Resource$Indexing$Datasources","Resource$Indexing$Datasources$Items","deleteSchema","getSchema","updateSchema","delete","deleteQueueItems","get","index","poll","push","unreserve","upload","mediaUrl","lro","Resource$Operations$Lro","sources","Resource$Query$Sources","search","suggest","Resource$Settings$Datasources","searchapplications","Resource$Settings$Searchapplications","getCustomer","updateCustomer","create","patch","update","reset","Resource$Stats$Index","Resource$Stats$Query","session","Resource$Stats$Session","user","Resource$Stats$User","getIndex","getQuery","getSearchapplication","getSession","getUser","Resource$Stats$Index$Datasources","Resource$Stats$Query$Searchapplications","Resource$Stats$Session$Searchapplications","Resource$Stats$User$Searchapplications","initializeCustomer"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/cloudsearch/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloudsearch_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar cloudsearch_v1;\n(function (cloudsearch_v1) {\n    /**\n     * Cloud Search API\n     *\n     * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const cloudsearch = google.cloudsearch('v1');\n     * ```\n     */\n    class Cloudsearch {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.debug = new Resource$Debug(this.context);\n            this.indexing = new Resource$Indexing(this.context);\n            this.media = new Resource$Media(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.query = new Resource$Query(this.context);\n            this.settings = new Resource$Settings(this.context);\n            this.stats = new Resource$Stats(this.context);\n            this.v1 = new Resource$V1(this.context);\n        }\n    }\n    cloudsearch_v1.Cloudsearch = Cloudsearch;\n    class Resource$Debug {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Debug$Datasources(this.context);\n            this.identitysources = new Resource$Debug$Identitysources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug = Resource$Debug;\n    class Resource$Debug$Datasources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Debug$Datasources$Items(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources = Resource$Debug$Datasources;\n    class Resource$Debug$Datasources$Items {\n        constructor(context) {\n            this.context = context;\n            this.unmappedids = new Resource$Debug$Datasources$Items$Unmappedids(this.context);\n        }\n        checkAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+name}:checkAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        searchByViewUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+name}/items:searchByViewUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources$Items = Resource$Debug$Datasources$Items;\n    class Resource$Debug$Datasources$Items$Unmappedids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources$Items$Unmappedids = Resource$Debug$Datasources$Items$Unmappedids;\n    class Resource$Debug$Identitysources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Debug$Identitysources$Items(this.context);\n            this.unmappedids = new Resource$Debug$Identitysources$Unmappedids(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources = Resource$Debug$Identitysources;\n    class Resource$Debug$Identitysources$Items {\n        constructor(context) {\n            this.context = context;\n        }\n        listForunmappedidentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/items:forunmappedidentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources$Items = Resource$Debug$Identitysources$Items;\n    class Resource$Debug$Identitysources$Unmappedids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources$Unmappedids = Resource$Debug$Identitysources$Unmappedids;\n    class Resource$Indexing {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Indexing$Datasources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Indexing = Resource$Indexing;\n    class Resource$Indexing$Datasources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Indexing$Datasources$Items(this.context);\n        }\n        deleteSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Indexing$Datasources = Resource$Indexing$Datasources;\n    class Resource$Indexing$Datasources$Items {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteQueueItems(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:deleteQueueItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        index(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:index').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        poll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:poll').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        push(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:push').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unreserve(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:unreserve').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Indexing$Datasources$Items = Resource$Indexing$Datasources$Items;\n    class Resource$Media {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Media = Resource$Media;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n            this.lro = new Resource$Operations$Lro(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Operations = Resource$Operations;\n    class Resource$Operations$Lro {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/lro').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Operations$Lro = Resource$Operations$Lro;\n    class Resource$Query {\n        constructor(context) {\n            this.context = context;\n            this.sources = new Resource$Query$Sources(this.context);\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        suggest(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/suggest').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Query = Resource$Query;\n    class Resource$Query$Sources {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/sources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Query$Sources = Resource$Query$Sources;\n    class Resource$Settings {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Settings$Datasources(this.context);\n            this.searchapplications = new Resource$Settings$Searchapplications(this.context);\n        }\n        getCustomer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/customer').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateCustomer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/customer').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Settings = Resource$Settings;\n    class Resource$Settings$Datasources {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Settings$Datasources = Resource$Settings$Datasources;\n    class Resource$Settings$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}:reset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Settings$Searchapplications = Resource$Settings$Searchapplications;\n    class Resource$Stats {\n        constructor(context) {\n            this.context = context;\n            this.index = new Resource$Stats$Index(this.context);\n            this.query = new Resource$Stats$Query(this.context);\n            this.session = new Resource$Stats$Session(this.context);\n            this.user = new Resource$Stats$User(this.context);\n        }\n        getIndex(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/index').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getQuery(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/query').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSearchapplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/searchapplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSession(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/session').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getUser(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/user').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats = Resource$Stats;\n    class Resource$Stats$Index {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Stats$Index$Datasources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Index = Resource$Stats$Index;\n    class Resource$Stats$Index$Datasources {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/index/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Index$Datasources = Resource$Stats$Index$Datasources;\n    class Resource$Stats$Query {\n        constructor(context) {\n            this.context = context;\n            this.searchapplications = new Resource$Stats$Query$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Query = Resource$Stats$Query;\n    class Resource$Stats$Query$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/query/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Query$Searchapplications = Resource$Stats$Query$Searchapplications;\n    class Resource$Stats$Session {\n        constructor(context) {\n            this.context = context;\n            this.searchapplications = new Resource$Stats$Session$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Session = Resource$Stats$Session;\n    class Resource$Stats$Session$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/session/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Session$Searchapplications = Resource$Stats$Session$Searchapplications;\n    class Resource$Stats$User {\n        constructor(context) {\n            this.context = context;\n            this.searchapplications = new Resource$Stats$User$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$User = Resource$Stats$User;\n    class Resource$Stats$User$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/user/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$User$Searchapplications = Resource$Stats$User$Searchapplications;\n    class Resource$V1 {\n        constructor(context) {\n            this.context = context;\n        }\n        initializeCustomer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1:initializeCustomer').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$V1 = Resource$V1;\n})(cloudsearch_v1 = exports.cloudsearch_v1 || (exports.cloudsearch_v1 = {}));\n"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;AACA;;AACA;;AACA;;AACA;;AACA;;AACA,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC;;AACA,IAAIF,cAAJ;;AACA,CAAC,UAAUA,cAAV,EAA0B;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMG,WAAN,CAAkB;IACdC,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkB;MACzB,KAAKC,OAAL,GAAe;QACXC,QAAQ,EAAEH,OAAO,IAAI,EADV;QAEXC;MAFW,CAAf;MAIA,KAAKG,KAAL,GAAa,IAAIC,cAAJ,CAAmB,KAAKH,OAAxB,CAAb;MACA,KAAKI,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAKL,OAA3B,CAAhB;MACA,KAAKM,KAAL,GAAa,IAAIC,cAAJ,CAAmB,KAAKP,OAAxB,CAAb;MACA,KAAKQ,UAAL,GAAkB,IAAIC,mBAAJ,CAAwB,KAAKT,OAA7B,CAAlB;MACA,KAAKU,KAAL,GAAa,IAAIC,cAAJ,CAAmB,KAAKX,OAAxB,CAAb;MACA,KAAKY,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAKb,OAA3B,CAAhB;MACA,KAAKc,KAAL,GAAa,IAAIC,cAAJ,CAAmB,KAAKf,OAAxB,CAAb;MACA,KAAKgB,EAAL,GAAU,IAAIC,WAAJ,CAAgB,KAAKjB,OAArB,CAAV;IACH;;EAda;;EAgBlBP,cAAc,CAACG,WAAf,GAA6BA,WAA7B;;EACA,MAAMO,cAAN,CAAqB;IACjBN,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKkB,WAAL,GAAmB,IAAIC,0BAAJ,CAA+B,KAAKnB,OAApC,CAAnB;MACA,KAAKoB,eAAL,GAAuB,IAAIC,8BAAJ,CAAmC,KAAKrB,OAAxC,CAAvB;IACH;;EALgB;;EAOrBP,cAAc,CAACU,cAAf,GAAgCA,cAAhC;;EACA,MAAMgB,0BAAN,CAAiC;IAC7BtB,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKsB,KAAL,GAAa,IAAIC,gCAAJ,CAAqC,KAAKvB,OAA1C,CAAb;IACH;;EAJ4B;;EAMjCP,cAAc,CAAC0B,0BAAf,GAA4CA,0BAA5C;;EACA,MAAMI,gCAAN,CAAuC;IACnC1B,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKwB,WAAL,GAAmB,IAAIC,4CAAJ,CAAiD,KAAKzB,OAAtD,CAAnB;IACH;;IACD0B,WAAW,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACvD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+BAAX,EAA4CI,OAA5C,CAAoD,cAApD,EAAoE,IAApE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDQ,eAAe,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC3D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,yCAAX,EAAsDI,OAAtD,CAA8D,cAA9D,EAA8E,IAA9E,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlEkC;;EAoEvCvC,cAAc,CAAC8B,gCAAf,GAAkDA,gCAAlD;;EACA,MAAME,4CAAN,CAAmD;IAC/C5B,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDyC,IAAI,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,QAAD,CAND;QAOfC,UAAU,EAAE,CAAC,QAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlC8C;;EAoCnDvC,cAAc,CAACgC,4CAAf,GAA8DA,4CAA9D;;EACA,MAAMJ,8BAAN,CAAqC;IACjCxB,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKsB,KAAL,GAAa,IAAIoB,oCAAJ,CAAyC,KAAK1C,OAA9C,CAAb;MACA,KAAKwB,WAAL,GAAmB,IAAImB,0CAAJ,CAA+C,KAAK3C,OAApD,CAAnB;IACH;;EALgC;;EAOrCP,cAAc,CAAC4B,8BAAf,GAAgDA,8BAAhD;;EACA,MAAMqB,oCAAN,CAA2C;IACvC7C,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACD4C,uBAAuB,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACnE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+CAAX,EAA4DI,OAA5D,CAAoE,cAApE,EAAoF,IAApF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,QAAD,CAND;QAOfC,UAAU,EAAE,CAAC,QAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnCsC;;EAqC3CvC,cAAc,CAACiD,oCAAf,GAAsDA,oCAAtD;;EACA,MAAMC,0CAAN,CAAiD;IAC7C9C,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDyC,IAAI,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,QAAD,CAND;QAOfC,UAAU,EAAE,CAAC,QAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlC4C;;EAoCjDvC,cAAc,CAACkD,0CAAf,GAA4DA,0CAA5D;;EACA,MAAMtC,iBAAN,CAAwB;IACpBR,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKkB,WAAL,GAAmB,IAAI2B,6BAAJ,CAAkC,KAAK7C,OAAvC,CAAnB;IACH;;EAJmB;;EAMxBP,cAAc,CAACY,iBAAf,GAAmCA,iBAAnC;;EACA,MAAMwC,6BAAN,CAAoC;IAChChD,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKsB,KAAL,GAAa,IAAIwB,mCAAJ,CAAwC,KAAK9C,OAA7C,CAAb;IACH;;IACD+C,YAAY,CAACpB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACxD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,6BAAX,EAA0CI,OAA1C,CAAkD,cAAlD,EAAkE,IAAlE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDgB,SAAS,CAACrB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACrD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,6BAAX,EAA0CI,OAA1C,CAAkD,cAAlD,EAAkE,IAAlE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDiB,YAAY,CAACtB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACxD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,6BAAX,EAA0CI,OAA1C,CAAkD,cAAlD,EAAkE,IAAlE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAjG+B;;EAmGpCvC,cAAc,CAACoD,6BAAf,GAA+CA,6BAA/C;;EACA,MAAMC,mCAAN,CAA0C;IACtCjD,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDkD,MAAM,CAACvB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDmB,gBAAgB,CAACxB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC5D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GACF,EADJ;QAEAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,6CAAX,EAA0DI,OAA1D,CAAkE,cAAlE,EAAkF,IAAlF,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDoB,GAAG,CAACzB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDqB,KAAK,CAAC1B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,4BAAX,EAAyCI,OAAzC,CAAiD,cAAjD,EAAiE,IAAjE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,IAAI,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,4BAAX,EAAyCI,OAAzC,CAAiD,cAAjD,EAAiE,IAAjE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDsB,IAAI,CAAC3B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDuB,IAAI,CAAC5B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2BAAX,EAAwCI,OAAxC,CAAgD,cAAhD,EAAgE,IAAhE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDwB,SAAS,CAAC7B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACrD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sCAAX,EAAmDI,OAAnD,CAA2D,cAA3D,EAA2E,IAA3E,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDyB,MAAM,CAAC9B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,6BAAX,EAA0CI,OAA1C,CAAkD,cAAlD,EAAkE,IAAlE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA3RqC;;EA6R1CvC,cAAc,CAACqD,mCAAf,GAAqDA,mCAArD;;EACA,MAAMvC,cAAN,CAAqB;IACjBV,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDyD,MAAM,CAAC9B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2BAAX,EAAwCI,OAAxC,CAAgD,cAAhD,EAAgE,IAAhE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMf4B,QAAQ,EAAE,CAAC3B,OAAO,GAAG,kCAAX,EAA+CI,OAA/C,CAAuD,cAAvD,EAAuE,IAAvE,CANK;QAOfE,cAAc,EAAE,CAAC,cAAD,CAPD;QAQfC,UAAU,EAAE,CAAC,cAAD,CARG;QASftC,OAAO,EAAE,KAAKA;MATC,CAAnB;;MAWA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlCgB;;EAoCrBvC,cAAc,CAACc,cAAf,GAAgCA,cAAhC;;EACA,MAAME,mBAAN,CAA0B;IACtBZ,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK2D,GAAL,GAAW,IAAIC,uBAAJ,CAA4B,KAAK5D,OAAjC,CAAX;IACH;;IACDoD,GAAG,CAACzB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,aAAX,EAA0BI,OAA1B,CAAkC,cAAlC,EAAkD,IAAlD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlCqB;;EAoC1BvC,cAAc,CAACgB,mBAAf,GAAqCA,mBAArC;;EACA,MAAMmD,uBAAN,CAA8B;IAC1B/D,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDyC,IAAI,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iBAAX,EAA8BI,OAA9B,CAAsC,cAAtC,EAAsD,IAAtD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlCyB;;EAoC9BvC,cAAc,CAACmE,uBAAf,GAAyCA,uBAAzC;;EACA,MAAMjD,cAAN,CAAqB;IACjBd,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAK6D,OAAL,GAAe,IAAIC,sBAAJ,CAA2B,KAAK9D,OAAhC,CAAf;IACH;;IACD+D,MAAM,CAACpC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kBAAX,EAA+BI,OAA/B,CAAuC,cAAvC,EAAuD,IAAvD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDgC,OAAO,CAACrC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACnD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,mBAAX,EAAgCI,OAAhC,CAAwC,cAAxC,EAAwD,IAAxD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAhEgB;;EAkErBvC,cAAc,CAACkB,cAAf,GAAgCA,cAAhC;;EACA,MAAMmD,sBAAN,CAA6B;IACzBjE,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDyC,IAAI,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,mBAAX,EAAgCI,OAAhC,CAAwC,cAAxC,EAAwD,IAAxD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlCwB;;EAoC7BvC,cAAc,CAACqE,sBAAf,GAAwCA,sBAAxC;;EACA,MAAMjD,iBAAN,CAAwB;IACpBhB,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKkB,WAAL,GAAmB,IAAI+C,6BAAJ,CAAkC,KAAKjE,OAAvC,CAAnB;MACA,KAAKkE,kBAAL,GAA0B,IAAIC,oCAAJ,CAAyC,KAAKnE,OAA9C,CAA1B;IACH;;IACDoE,WAAW,CAACzC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACvD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,uBAAX,EAAoCI,OAApC,CAA4C,cAA5C,EAA4D,IAA5D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDqC,cAAc,CAAC1C,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC1D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,uBAAX,EAAoCI,OAApC,CAA4C,cAA5C,EAA4D,IAA5D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAnEmB;;EAqExBvC,cAAc,CAACoB,iBAAf,GAAmCA,iBAAnC;;EACA,MAAMoD,6BAAN,CAAoC;IAChCpE,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDsE,MAAM,CAAC3C,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0BAAX,EAAuCI,OAAvC,CAA+C,cAA/C,EAA+D,IAA/D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDkB,MAAM,CAACvB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDoB,GAAG,CAACzB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,IAAI,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0BAAX,EAAuCI,OAAvC,CAA+C,cAA/C,EAA+D,IAA/D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDuC,KAAK,CAAC5C,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDwC,MAAM,CAAC7C,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA7L+B;;EA+LpCvC,cAAc,CAACwE,6BAAf,GAA+CA,6BAA/C;;EACA,MAAME,oCAAN,CAA2C;IACvCtE,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDsE,MAAM,CAAC3C,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDkB,MAAM,CAACvB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDoB,GAAG,CAACzB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDS,IAAI,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EAA8CI,OAA9C,CAAsD,cAAtD,EAAsE,IAAtE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDuC,KAAK,CAAC5C,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDyC,KAAK,CAAC9C,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,4BAAX,EAAyCI,OAAzC,CAAiD,cAAjD,EAAiE,IAAjE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDwC,MAAM,CAAC7C,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAX,EAAmCI,OAAnC,CAA2C,cAA3C,EAA2D,IAA3D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA5NsC;;EA8N3CvC,cAAc,CAAC0E,oCAAf,GAAsDA,oCAAtD;;EACA,MAAMpD,cAAN,CAAqB;IACjBlB,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKqD,KAAL,GAAa,IAAIqB,oBAAJ,CAAyB,KAAK1E,OAA9B,CAAb;MACA,KAAKU,KAAL,GAAa,IAAIiE,oBAAJ,CAAyB,KAAK3E,OAA9B,CAAb;MACA,KAAK4E,OAAL,GAAe,IAAIC,sBAAJ,CAA2B,KAAK7E,OAAhC,CAAf;MACA,KAAK8E,IAAL,GAAY,IAAIC,mBAAJ,CAAwB,KAAK/E,OAA7B,CAAZ;IACH;;IACDgF,QAAQ,CAACrD,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACpD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iBAAX,EAA8BI,OAA9B,CAAsC,cAAtC,EAAsD,IAAtD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDiD,QAAQ,CAACtD,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACpD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iBAAX,EAA8BI,OAA9B,CAAsC,cAAtC,EAAsD,IAAtD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDkD,oBAAoB,CAACvD,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAChE,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,6BAAX,EAA0CI,OAA1C,CAAkD,cAAlD,EAAkE,IAAlE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDmD,UAAU,CAACxD,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACtD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,mBAAX,EAAgCI,OAAhC,CAAwC,cAAxC,EAAwD,IAAxD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;IACDoD,OAAO,CAACzD,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MACnD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;MACA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,gBAAX,EAA6BI,OAA7B,CAAqC,cAArC,EAAqD,IAArD,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EA9JgB;;EAgKrBvC,cAAc,CAACsB,cAAf,GAAgCA,cAAhC;;EACA,MAAM2D,oBAAN,CAA2B;IACvB7E,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKkB,WAAL,GAAmB,IAAImE,gCAAJ,CAAqC,KAAKrF,OAA1C,CAAnB;IACH;;EAJsB;;EAM3BP,cAAc,CAACiF,oBAAf,GAAsCA,oBAAtC;;EACA,MAAMW,gCAAN,CAAuC;IACnCxF,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDoD,GAAG,CAACzB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,yBAAX,EAAsCI,OAAtC,CAA8C,cAA9C,EAA8D,IAA9D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlCkC;;EAoCvCvC,cAAc,CAAC4F,gCAAf,GAAkDA,gCAAlD;;EACA,MAAMV,oBAAN,CAA2B;IACvB9E,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKkE,kBAAL,GAA0B,IAAIoB,uCAAJ,CAA4C,KAAKtF,OAAjD,CAA1B;IACH;;EAJsB;;EAM3BP,cAAc,CAACkF,oBAAf,GAAsCA,oBAAtC;;EACA,MAAMW,uCAAN,CAA8C;IAC1CzF,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDoD,GAAG,CAACzB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,yBAAX,EAAsCI,OAAtC,CAA8C,cAA9C,EAA8D,IAA9D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlCyC;;EAoC9CvC,cAAc,CAAC6F,uCAAf,GAAyDA,uCAAzD;;EACA,MAAMT,sBAAN,CAA6B;IACzBhF,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKkE,kBAAL,GAA0B,IAAIqB,yCAAJ,CAA8C,KAAKvF,OAAnD,CAA1B;IACH;;EAJwB;;EAM7BP,cAAc,CAACoF,sBAAf,GAAwCA,sBAAxC;;EACA,MAAMU,yCAAN,CAAgD;IAC5C1F,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDoD,GAAG,CAACzB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2BAAX,EAAwCI,OAAxC,CAAgD,cAAhD,EAAgE,IAAhE,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlC2C;;EAoChDvC,cAAc,CAAC8F,yCAAf,GAA2DA,yCAA3D;;EACA,MAAMR,mBAAN,CAA0B;IACtBlF,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;MACA,KAAKkE,kBAAL,GAA0B,IAAIsB,sCAAJ,CAA2C,KAAKxF,OAAhD,CAA1B;IACH;;EAJqB;;EAM1BP,cAAc,CAACsF,mBAAf,GAAqCA,mBAArC;;EACA,MAAMS,sCAAN,CAA6C;IACzC3F,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDoD,GAAG,CAACzB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wBAAX,EAAqCI,OAArC,CAA6C,cAA7C,EAA6D,IAA7D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,CAAC,MAAD,CAND;QAOfC,UAAU,EAAE,CAAC,MAAD,CAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlCwC;;EAoC7CvC,cAAc,CAAC+F,sCAAf,GAAwDA,sCAAxD;;EACA,MAAMvE,WAAN,CAAkB;IACdpB,WAAW,CAACG,OAAD,EAAU;MACjB,KAAKA,OAAL,GAAeA,OAAf;IACH;;IACDyF,kBAAkB,CAAC9D,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;MAC9D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;MAEA,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,EAApC;;MACA,IAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;QACxCE,QAAQ,GAAGF,gBAAX;QACAG,MAAM,GAAG,EAAT;QACAhC,OAAO,GAAG,EAAV;MACH;;MACD,IAAI,OAAO8B,iBAAP,KAA6B,UAAjC,EAA6C;QACzCC,QAAQ,GAAGD,iBAAX;QACA9B,OAAO,GAAG,EAAV;MACH;;MACD,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAR,IAAmB,qCAAnC;MACA,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAP,CAAc;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wBAAX,EAAqCI,OAArC,CAA6C,cAA7C,EAA6D,IAA7D,CADc;UAEnBC,MAAM,EAAE;QAFW,CAAd,EAGNtC,OAHM,CADM;QAKfgC,MALe;QAMfO,cAAc,EAAE,EAND;QAOfC,UAAU,EAAE,EAPG;QAQftC,OAAO,EAAE,KAAKA;MARC,CAAnB;;MAUA,IAAI6B,QAAJ,EAAc;QACV,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,EAAsDH,QAAtD;MACH,CAFD,MAGK;QACD,OAAO,CAAC,GAAGnC,mBAAmB,CAAC6C,gBAAxB,EAA0CP,UAA1C,CAAP;MACH;IACJ;;EAlCa;;EAoClBvC,cAAc,CAACwB,WAAf,GAA6BA,WAA7B;AACH,CApqDD,EAoqDGxB,cAAc,GAAGF,OAAO,CAACE,cAAR,KAA2BF,OAAO,CAACE,cAAR,GAAyB,EAApD,CApqDpB"},"metadata":{},"sourceType":"script"}