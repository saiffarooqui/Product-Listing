{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRetryConfig = void 0;\n\nasync function getRetryConfig(err) {\n  var _a;\n\n  let config = getConfig(err);\n\n  if (!err || !err.config || !config && !err.config.retry) {\n    return {\n      shouldRetry: false\n    };\n  }\n\n  config = config || {};\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  config.retry = config.retry === undefined || config.retry === null ? 3 : config.retry;\n  config.httpMethodsToRetry = config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n  config.noResponseRetries = config.noResponseRetries === undefined || config.noResponseRetries === null ? 2 : config.noResponseRetries; // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n  const retryRanges = [// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n  // 1xx - Retry (Informational, request still processing)\n  // 2xx - Do not retry (Success)\n  // 3xx - Do not retry (Redirect)\n  // 4xx - Do not retry (Client errors)\n  // 429 - Retry (\"Too Many Requests\")\n  // 5xx - Retry (Server errors)\n  [100, 199], [429, 429], [500, 599]];\n  config.statusCodesToRetry = config.statusCodesToRetry || retryRanges; // Put the config back into the err\n\n  err.config.retryConfig = config; // Determine if we should retry the request\n\n  const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n\n  if (!(await shouldRetryFn(err))) {\n    return {\n      shouldRetry: false,\n      config: err.config\n    };\n  } // Calculate time to wait with exponential backoff.\n  // If this is the first retry, look for a configured retryDelay.\n\n\n  const retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100; // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n\n  const delay = retryDelay + (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000; // We're going to retry!  Incremenent the counter.\n\n  err.config.retryConfig.currentRetryAttempt += 1; // Create a promise that invokes the retry after the backOffDelay\n\n  const backoff = new Promise(resolve => {\n    setTimeout(resolve, delay);\n  }); // Notify the user if they added an `onRetryAttempt` handler\n\n  if (config.onRetryAttempt) {\n    config.onRetryAttempt(err);\n  } // Return the promise in which recalls Gaxios to retry the request\n\n\n  await backoff;\n  return {\n    shouldRetry: true,\n    config: err.config\n  };\n}\n\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\n\nfunction shouldRetryRequest(err) {\n  const config = getConfig(err); // node-fetch raises an AbortError if signaled:\n  // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n\n  if (err.name === 'AbortError') {\n    return false;\n  } // If there's no config, or retries are disabled, return.\n\n\n  if (!config || config.retry === 0) {\n    return false;\n  } // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n\n\n  if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n    return false;\n  } // Only retry with configured HttpMethods.\n\n\n  if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n    return false;\n  } // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n\n  if (err.response && err.response.status) {\n    let isInRange = false;\n\n    for (const [min, max] of config.statusCodesToRetry) {\n      const status = err.response.status;\n\n      if (status >= min && status <= max) {\n        isInRange = true;\n        break;\n      }\n    }\n\n    if (!isInRange) {\n      return false;\n    }\n  } // If we are out of retry attempts, return\n\n\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n\n  if (config.currentRetryAttempt >= config.retry) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\n\n\nfunction getConfig(err) {\n  if (err && err.config && err.config.retryConfig) {\n    return err.config.retryConfig;\n  }\n\n  return;\n}","map":{"version":3,"mappings":"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","names":["getRetryConfig","err","config","getConfig","retry","shouldRetry","currentRetryAttempt","undefined","httpMethodsToRetry","noResponseRetries","retryRanges","statusCodesToRetry","retryConfig","shouldRetryFn","shouldRetryRequest","retryDelay","_a","delay","Math","pow","backoff","Promise","resolve","setTimeout","onRetryAttempt","exports","name","response","method","indexOf","toUpperCase","status","isInRange","min","max"],"sources":["../../src/retry.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}