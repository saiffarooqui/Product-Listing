{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.plus_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar plus_v1;\n\n(function (plus_v1) {\n  /**\n   * Google+ API\n   *\n   * Builds on top of the Google+ platform.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const plus = google.plus('v1');\n   *\n   * @namespace plus\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Plus\n   */\n  class Plus {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.activities = new Resource$Activities(this.context);\n      this.comments = new Resource$Comments(this.context);\n      this.people = new Resource$People(this.context);\n    }\n\n  }\n\n  plus_v1.Plus = Plus;\n\n  class Resource$Activities {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/plus/v1/activities/{activityId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['activityId'],\n        pathParams: ['activityId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/plus/v1/people/{userId}/activities/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'collection'],\n        pathParams: ['collection', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/plus/v1/activities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['query'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  plus_v1.Resource$Activities = Resource$Activities;\n\n  class Resource$Comments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/plus/v1/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['commentId'],\n        pathParams: ['commentId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/plus/v1/activities/{activityId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['activityId'],\n        pathParams: ['activityId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  plus_v1.Resource$Comments = Resource$Comments;\n\n  class Resource$People {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/plus/v1/people/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/plus/v1/people/{userId}/people/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'collection'],\n        pathParams: ['collection', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listByActivity(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/plus/v1/activities/{activityId}/people/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['activityId', 'collection'],\n        pathParams: ['activityId', 'collection'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/plus/v1/people').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['query'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  plus_v1.Resource$People = Resource$People;\n})(plus_v1 = exports.plus_v1 || (exports.plus_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","plus_v1","googleapis_common_1","require","Plus","constructor","options","google","context","_options","activities","Resource$Activities","comments","Resource$Comments","people","Resource$People","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","search","listByActivity"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/plus/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.plus_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar plus_v1;\n(function (plus_v1) {\n    /**\n     * Google+ API\n     *\n     * Builds on top of the Google+ platform.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const plus = google.plus('v1');\n     *\n     * @namespace plus\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Plus\n     */\n    class Plus {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.activities = new Resource$Activities(this.context);\n            this.comments = new Resource$Comments(this.context);\n            this.people = new Resource$People(this.context);\n        }\n    }\n    plus_v1.Plus = Plus;\n    class Resource$Activities {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/plus/v1/activities/{activityId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['activityId'],\n                pathParams: ['activityId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/plus/v1/people/{userId}/activities/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'collection'],\n                pathParams: ['collection', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/plus/v1/activities').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['query'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    plus_v1.Resource$Activities = Resource$Activities;\n    class Resource$Comments {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/plus/v1/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['commentId'],\n                pathParams: ['commentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/plus/v1/activities/{activityId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['activityId'],\n                pathParams: ['activityId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    plus_v1.Resource$Comments = Resource$Comments;\n    class Resource$People {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/plus/v1/people/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/plus/v1/people/{userId}/people/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'collection'],\n                pathParams: ['collection', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listByActivity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/plus/v1/activities/{activityId}/people/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['activityId', 'collection'],\n                pathParams: ['activityId', 'collection'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/plus/v1/people').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['query'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    plus_v1.Resource$People = Resource$People;\n})(plus_v1 = exports.plus_v1 || (exports.plus_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}