{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.adexchangebuyer2_v2beta1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar adexchangebuyer2_v2beta1;\n\n(function (adexchangebuyer2_v2beta1) {\n  /**\n   * Ad Exchange Buyer API II\n   *\n   * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const adexchangebuyer2 = google.adexchangebuyer2('v2beta1');\n   * ```\n   */\n  class Adexchangebuyer2 {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.accounts = new Resource$Accounts(this.context);\n      this.bidders = new Resource$Bidders(this.context);\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Adexchangebuyer2 = Adexchangebuyer2;\n\n  class Resource$Accounts {\n    constructor(context) {\n      this.context = context;\n      this.clients = new Resource$Accounts$Clients(this.context);\n      this.creatives = new Resource$Accounts$Creatives(this.context);\n      this.finalizedProposals = new Resource$Accounts$Finalizedproposals(this.context);\n      this.products = new Resource$Accounts$Products(this.context);\n      this.proposals = new Resource$Accounts$Proposals(this.context);\n      this.publisherProfiles = new Resource$Accounts$Publisherprofiles(this.context);\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Accounts = Resource$Accounts;\n\n  class Resource$Accounts$Clients {\n    constructor(context) {\n      this.context = context;\n      this.invitations = new Resource$Accounts$Clients$Invitations(this.context);\n      this.users = new Resource$Accounts$Clients$Users(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/clients').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'clientAccountId'],\n        pathParams: ['accountId', 'clientAccountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/clients').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'clientAccountId'],\n        pathParams: ['accountId', 'clientAccountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Accounts$Clients = Resource$Accounts$Clients;\n\n  class Resource$Accounts$Clients$Invitations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'clientAccountId'],\n        pathParams: ['accountId', 'clientAccountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'clientAccountId', 'invitationId'],\n        pathParams: ['accountId', 'clientAccountId', 'invitationId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'clientAccountId'],\n        pathParams: ['accountId', 'clientAccountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Accounts$Clients$Invitations = Resource$Accounts$Clients$Invitations;\n\n  class Resource$Accounts$Clients$Users {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'clientAccountId', 'userId'],\n        pathParams: ['accountId', 'clientAccountId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'clientAccountId'],\n        pathParams: ['accountId', 'clientAccountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'clientAccountId', 'userId'],\n        pathParams: ['accountId', 'clientAccountId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Accounts$Clients$Users = Resource$Accounts$Clients$Users;\n\n  class Resource$Accounts$Creatives {\n    constructor(context) {\n      this.context = context;\n      this.dealAssociations = new Resource$Accounts$Creatives$Dealassociations(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'creativeId'],\n        pathParams: ['accountId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    stopWatching(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'creativeId'],\n        pathParams: ['accountId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'creativeId'],\n        pathParams: ['accountId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    watch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}:watch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'creativeId'],\n        pathParams: ['accountId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Accounts$Creatives = Resource$Accounts$Creatives;\n\n  class Resource$Accounts$Creatives$Dealassociations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    add(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'creativeId'],\n        pathParams: ['accountId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'creativeId'],\n        pathParams: ['accountId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    remove(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'creativeId'],\n        pathParams: ['accountId', 'creativeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Accounts$Creatives$Dealassociations = Resource$Accounts$Creatives$Dealassociations;\n\n  class Resource$Accounts$Finalizedproposals {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/finalizedProposals').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    pause(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'proposalId'],\n        pathParams: ['accountId', 'proposalId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'proposalId'],\n        pathParams: ['accountId', 'proposalId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Accounts$Finalizedproposals = Resource$Accounts$Finalizedproposals;\n\n  class Resource$Accounts$Products {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'productId'],\n        pathParams: ['accountId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Accounts$Products = Resource$Accounts$Products;\n\n  class Resource$Accounts$Proposals {\n    constructor(context) {\n      this.context = context;\n    }\n\n    accept(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:accept').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'proposalId'],\n        pathParams: ['accountId', 'proposalId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    addNote(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'proposalId'],\n        pathParams: ['accountId', 'proposalId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    cancelNegotiation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'proposalId'],\n        pathParams: ['accountId', 'proposalId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    completeSetup(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'proposalId'],\n        pathParams: ['accountId', 'proposalId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'proposalId'],\n        pathParams: ['accountId', 'proposalId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    pause(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'proposalId'],\n        pathParams: ['accountId', 'proposalId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'proposalId'],\n        pathParams: ['accountId', 'proposalId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'proposalId'],\n        pathParams: ['accountId', 'proposalId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Accounts$Proposals = Resource$Accounts$Proposals;\n\n  class Resource$Accounts$Publisherprofiles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'publisherProfileId'],\n        pathParams: ['accountId', 'publisherProfileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/accounts/{accountId}/publisherProfiles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Accounts$Publisherprofiles = Resource$Accounts$Publisherprofiles;\n\n  class Resource$Bidders {\n    constructor(context) {\n      this.context = context;\n      this.accounts = new Resource$Bidders$Accounts(this.context);\n      this.filterSets = new Resource$Bidders$Filtersets(this.context);\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders = Resource$Bidders;\n\n  class Resource$Bidders$Accounts {\n    constructor(context) {\n      this.context = context;\n      this.filterSets = new Resource$Bidders$Accounts$Filtersets(this.context);\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts = Resource$Bidders$Accounts;\n\n  class Resource$Bidders$Accounts$Filtersets {\n    constructor(context) {\n      this.context = context;\n      this.bidMetrics = new Resource$Bidders$Accounts$Filtersets$Bidmetrics(this.context);\n      this.bidResponseErrors = new Resource$Bidders$Accounts$Filtersets$Bidresponseerrors(this.context);\n      this.bidResponsesWithoutBids = new Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids(this.context);\n      this.filteredBidRequests = new Resource$Bidders$Accounts$Filtersets$Filteredbidrequests(this.context);\n      this.filteredBids = new Resource$Bidders$Accounts$Filtersets$Filteredbids(this.context);\n      this.impressionMetrics = new Resource$Bidders$Accounts$Filtersets$Impressionmetrics(this.context);\n      this.losingBids = new Resource$Bidders$Accounts$Filtersets$Losingbids(this.context);\n      this.nonBillableWinningBids = new Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['ownerName'],\n        pathParams: ['ownerName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['ownerName'],\n        pathParams: ['ownerName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets = Resource$Bidders$Accounts$Filtersets;\n\n  class Resource$Bidders$Accounts$Filtersets$Bidmetrics {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/bidMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Bidmetrics = Resource$Bidders$Accounts$Filtersets$Bidmetrics;\n\n  class Resource$Bidders$Accounts$Filtersets$Bidresponseerrors {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponseErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Bidresponseerrors = Resource$Bidders$Accounts$Filtersets$Bidresponseerrors;\n\n  class Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponsesWithoutBids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids = Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids;\n\n  class Resource$Bidders$Accounts$Filtersets$Filteredbidrequests {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBidRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbidrequests = Resource$Bidders$Accounts$Filtersets$Filteredbidrequests;\n\n  class Resource$Bidders$Accounts$Filtersets$Filteredbids {\n    constructor(context) {\n      this.context = context;\n      this.creatives = new Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives(this.context);\n      this.details = new Resource$Bidders$Accounts$Filtersets$Filteredbids$Details(this.context);\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbids = Resource$Bidders$Accounts$Filtersets$Filteredbids;\n\n  class Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName', 'creativeStatusId'],\n        pathParams: ['creativeStatusId', 'filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives = Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives;\n\n  class Resource$Bidders$Accounts$Filtersets$Filteredbids$Details {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName', 'creativeStatusId'],\n        pathParams: ['creativeStatusId', 'filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbids$Details = Resource$Bidders$Accounts$Filtersets$Filteredbids$Details;\n\n  class Resource$Bidders$Accounts$Filtersets$Impressionmetrics {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/impressionMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Impressionmetrics = Resource$Bidders$Accounts$Filtersets$Impressionmetrics;\n\n  class Resource$Bidders$Accounts$Filtersets$Losingbids {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/losingBids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Losingbids = Resource$Bidders$Accounts$Filtersets$Losingbids;\n\n  class Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/nonBillableWinningBids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids = Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids;\n\n  class Resource$Bidders$Filtersets {\n    constructor(context) {\n      this.context = context;\n      this.bidMetrics = new Resource$Bidders$Filtersets$Bidmetrics(this.context);\n      this.bidResponseErrors = new Resource$Bidders$Filtersets$Bidresponseerrors(this.context);\n      this.bidResponsesWithoutBids = new Resource$Bidders$Filtersets$Bidresponseswithoutbids(this.context);\n      this.filteredBidRequests = new Resource$Bidders$Filtersets$Filteredbidrequests(this.context);\n      this.filteredBids = new Resource$Bidders$Filtersets$Filteredbids(this.context);\n      this.impressionMetrics = new Resource$Bidders$Filtersets$Impressionmetrics(this.context);\n      this.losingBids = new Resource$Bidders$Filtersets$Losingbids(this.context);\n      this.nonBillableWinningBids = new Resource$Bidders$Filtersets$Nonbillablewinningbids(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['ownerName'],\n        pathParams: ['ownerName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['ownerName'],\n        pathParams: ['ownerName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets = Resource$Bidders$Filtersets;\n\n  class Resource$Bidders$Filtersets$Bidmetrics {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/bidMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Bidmetrics = Resource$Bidders$Filtersets$Bidmetrics;\n\n  class Resource$Bidders$Filtersets$Bidresponseerrors {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponseErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Bidresponseerrors = Resource$Bidders$Filtersets$Bidresponseerrors;\n\n  class Resource$Bidders$Filtersets$Bidresponseswithoutbids {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponsesWithoutBids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Bidresponseswithoutbids = Resource$Bidders$Filtersets$Bidresponseswithoutbids;\n\n  class Resource$Bidders$Filtersets$Filteredbidrequests {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBidRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbidrequests = Resource$Bidders$Filtersets$Filteredbidrequests;\n\n  class Resource$Bidders$Filtersets$Filteredbids {\n    constructor(context) {\n      this.context = context;\n      this.creatives = new Resource$Bidders$Filtersets$Filteredbids$Creatives(this.context);\n      this.details = new Resource$Bidders$Filtersets$Filteredbids$Details(this.context);\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbids = Resource$Bidders$Filtersets$Filteredbids;\n\n  class Resource$Bidders$Filtersets$Filteredbids$Creatives {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName', 'creativeStatusId'],\n        pathParams: ['creativeStatusId', 'filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbids$Creatives = Resource$Bidders$Filtersets$Filteredbids$Creatives;\n\n  class Resource$Bidders$Filtersets$Filteredbids$Details {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName', 'creativeStatusId'],\n        pathParams: ['creativeStatusId', 'filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbids$Details = Resource$Bidders$Filtersets$Filteredbids$Details;\n\n  class Resource$Bidders$Filtersets$Impressionmetrics {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/impressionMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Impressionmetrics = Resource$Bidders$Filtersets$Impressionmetrics;\n\n  class Resource$Bidders$Filtersets$Losingbids {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/losingBids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Losingbids = Resource$Bidders$Filtersets$Losingbids;\n\n  class Resource$Bidders$Filtersets$Nonbillablewinningbids {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2beta1/{+filterSetName}/nonBillableWinningBids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['filterSetName'],\n        pathParams: ['filterSetName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Nonbillablewinningbids = Resource$Bidders$Filtersets$Nonbillablewinningbids;\n})(adexchangebuyer2_v2beta1 = exports.adexchangebuyer2_v2beta1 || (exports.adexchangebuyer2_v2beta1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","adexchangebuyer2_v2beta1","googleapis_common_1","require","Adexchangebuyer2","constructor","options","google","context","_options","accounts","Resource$Accounts","bidders","Resource$Bidders","clients","Resource$Accounts$Clients","creatives","Resource$Accounts$Creatives","finalizedProposals","Resource$Accounts$Finalizedproposals","products","Resource$Accounts$Products","proposals","Resource$Accounts$Proposals","publisherProfiles","Resource$Accounts$Publisherprofiles","invitations","Resource$Accounts$Clients$Invitations","users","Resource$Accounts$Clients$Users","create","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","list","update","dealAssociations","Resource$Accounts$Creatives$Dealassociations","stopWatching","watch","add","remove","pause","resume","accept","addNote","cancelNegotiation","completeSetup","Resource$Bidders$Accounts","filterSets","Resource$Bidders$Filtersets","Resource$Bidders$Accounts$Filtersets","bidMetrics","Resource$Bidders$Accounts$Filtersets$Bidmetrics","bidResponseErrors","Resource$Bidders$Accounts$Filtersets$Bidresponseerrors","bidResponsesWithoutBids","Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids","filteredBidRequests","Resource$Bidders$Accounts$Filtersets$Filteredbidrequests","filteredBids","Resource$Bidders$Accounts$Filtersets$Filteredbids","impressionMetrics","Resource$Bidders$Accounts$Filtersets$Impressionmetrics","losingBids","Resource$Bidders$Accounts$Filtersets$Losingbids","nonBillableWinningBids","Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids","delete","Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives","details","Resource$Bidders$Accounts$Filtersets$Filteredbids$Details","Resource$Bidders$Filtersets$Bidmetrics","Resource$Bidders$Filtersets$Bidresponseerrors","Resource$Bidders$Filtersets$Bidresponseswithoutbids","Resource$Bidders$Filtersets$Filteredbidrequests","Resource$Bidders$Filtersets$Filteredbids","Resource$Bidders$Filtersets$Impressionmetrics","Resource$Bidders$Filtersets$Losingbids","Resource$Bidders$Filtersets$Nonbillablewinningbids","Resource$Bidders$Filtersets$Filteredbids$Creatives","Resource$Bidders$Filtersets$Filteredbids$Details"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/adexchangebuyer2/v2beta1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.adexchangebuyer2_v2beta1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar adexchangebuyer2_v2beta1;\n(function (adexchangebuyer2_v2beta1) {\n    /**\n     * Ad Exchange Buyer API II\n     *\n     * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const adexchangebuyer2 = google.adexchangebuyer2('v2beta1');\n     * ```\n     */\n    class Adexchangebuyer2 {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.accounts = new Resource$Accounts(this.context);\n            this.bidders = new Resource$Bidders(this.context);\n        }\n    }\n    adexchangebuyer2_v2beta1.Adexchangebuyer2 = Adexchangebuyer2;\n    class Resource$Accounts {\n        constructor(context) {\n            this.context = context;\n            this.clients = new Resource$Accounts$Clients(this.context);\n            this.creatives = new Resource$Accounts$Creatives(this.context);\n            this.finalizedProposals = new Resource$Accounts$Finalizedproposals(this.context);\n            this.products = new Resource$Accounts$Products(this.context);\n            this.proposals = new Resource$Accounts$Proposals(this.context);\n            this.publisherProfiles = new Resource$Accounts$Publisherprofiles(this.context);\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Accounts = Resource$Accounts;\n    class Resource$Accounts$Clients {\n        constructor(context) {\n            this.context = context;\n            this.invitations = new Resource$Accounts$Clients$Invitations(this.context);\n            this.users = new Resource$Accounts$Clients$Users(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/clients').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'clientAccountId'],\n                pathParams: ['accountId', 'clientAccountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/clients').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'clientAccountId'],\n                pathParams: ['accountId', 'clientAccountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Accounts$Clients = Resource$Accounts$Clients;\n    class Resource$Accounts$Clients$Invitations {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'clientAccountId'],\n                pathParams: ['accountId', 'clientAccountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'clientAccountId', 'invitationId'],\n                pathParams: ['accountId', 'clientAccountId', 'invitationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'clientAccountId'],\n                pathParams: ['accountId', 'clientAccountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Accounts$Clients$Invitations = Resource$Accounts$Clients$Invitations;\n    class Resource$Accounts$Clients$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'clientAccountId', 'userId'],\n                pathParams: ['accountId', 'clientAccountId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'clientAccountId'],\n                pathParams: ['accountId', 'clientAccountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'clientAccountId', 'userId'],\n                pathParams: ['accountId', 'clientAccountId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Accounts$Clients$Users = Resource$Accounts$Clients$Users;\n    class Resource$Accounts$Creatives {\n        constructor(context) {\n            this.context = context;\n            this.dealAssociations = new Resource$Accounts$Creatives$Dealassociations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'creativeId'],\n                pathParams: ['accountId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopWatching(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'creativeId'],\n                pathParams: ['accountId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/creatives/{creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'creativeId'],\n                pathParams: ['accountId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/creatives/{creativeId}:watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'creativeId'],\n                pathParams: ['accountId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Accounts$Creatives = Resource$Accounts$Creatives;\n    class Resource$Accounts$Creatives$Dealassociations {\n        constructor(context) {\n            this.context = context;\n        }\n        add(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'creativeId'],\n                pathParams: ['accountId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'creativeId'],\n                pathParams: ['accountId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        remove(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'creativeId'],\n                pathParams: ['accountId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Accounts$Creatives$Dealassociations = Resource$Accounts$Creatives$Dealassociations;\n    class Resource$Accounts$Finalizedproposals {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/finalizedProposals').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        pause(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'proposalId'],\n                pathParams: ['accountId', 'proposalId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'proposalId'],\n                pathParams: ['accountId', 'proposalId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Accounts$Finalizedproposals = Resource$Accounts$Finalizedproposals;\n    class Resource$Accounts$Products {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'productId'],\n                pathParams: ['accountId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Accounts$Products = Resource$Accounts$Products;\n    class Resource$Accounts$Proposals {\n        constructor(context) {\n            this.context = context;\n        }\n        accept(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:accept').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'proposalId'],\n                pathParams: ['accountId', 'proposalId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addNote(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'proposalId'],\n                pathParams: ['accountId', 'proposalId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cancelNegotiation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'proposalId'],\n                pathParams: ['accountId', 'proposalId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        completeSetup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'proposalId'],\n                pathParams: ['accountId', 'proposalId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'proposalId'],\n                pathParams: ['accountId', 'proposalId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        pause(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'proposalId'],\n                pathParams: ['accountId', 'proposalId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'proposalId'],\n                pathParams: ['accountId', 'proposalId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/proposals/{proposalId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'proposalId'],\n                pathParams: ['accountId', 'proposalId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Accounts$Proposals = Resource$Accounts$Proposals;\n    class Resource$Accounts$Publisherprofiles {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'publisherProfileId'],\n                pathParams: ['accountId', 'publisherProfileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/accounts/{accountId}/publisherProfiles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Accounts$Publisherprofiles = Resource$Accounts$Publisherprofiles;\n    class Resource$Bidders {\n        constructor(context) {\n            this.context = context;\n            this.accounts = new Resource$Bidders$Accounts(this.context);\n            this.filterSets = new Resource$Bidders$Filtersets(this.context);\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders = Resource$Bidders;\n    class Resource$Bidders$Accounts {\n        constructor(context) {\n            this.context = context;\n            this.filterSets = new Resource$Bidders$Accounts$Filtersets(this.context);\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts = Resource$Bidders$Accounts;\n    class Resource$Bidders$Accounts$Filtersets {\n        constructor(context) {\n            this.context = context;\n            this.bidMetrics = new Resource$Bidders$Accounts$Filtersets$Bidmetrics(this.context);\n            this.bidResponseErrors =\n                new Resource$Bidders$Accounts$Filtersets$Bidresponseerrors(this.context);\n            this.bidResponsesWithoutBids =\n                new Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids(this.context);\n            this.filteredBidRequests =\n                new Resource$Bidders$Accounts$Filtersets$Filteredbidrequests(this.context);\n            this.filteredBids = new Resource$Bidders$Accounts$Filtersets$Filteredbids(this.context);\n            this.impressionMetrics =\n                new Resource$Bidders$Accounts$Filtersets$Impressionmetrics(this.context);\n            this.losingBids = new Resource$Bidders$Accounts$Filtersets$Losingbids(this.context);\n            this.nonBillableWinningBids =\n                new Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['ownerName'],\n                pathParams: ['ownerName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['ownerName'],\n                pathParams: ['ownerName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets = Resource$Bidders$Accounts$Filtersets;\n    class Resource$Bidders$Accounts$Filtersets$Bidmetrics {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/bidMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Bidmetrics = Resource$Bidders$Accounts$Filtersets$Bidmetrics;\n    class Resource$Bidders$Accounts$Filtersets$Bidresponseerrors {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponseErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Bidresponseerrors = Resource$Bidders$Accounts$Filtersets$Bidresponseerrors;\n    class Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponsesWithoutBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids = Resource$Bidders$Accounts$Filtersets$Bidresponseswithoutbids;\n    class Resource$Bidders$Accounts$Filtersets$Filteredbidrequests {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBidRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbidrequests = Resource$Bidders$Accounts$Filtersets$Filteredbidrequests;\n    class Resource$Bidders$Accounts$Filtersets$Filteredbids {\n        constructor(context) {\n            this.context = context;\n            this.creatives =\n                new Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives(this.context);\n            this.details =\n                new Resource$Bidders$Accounts$Filtersets$Filteredbids$Details(this.context);\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbids = Resource$Bidders$Accounts$Filtersets$Filteredbids;\n    class Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName', 'creativeStatusId'],\n                pathParams: ['creativeStatusId', 'filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives = Resource$Bidders$Accounts$Filtersets$Filteredbids$Creatives;\n    class Resource$Bidders$Accounts$Filtersets$Filteredbids$Details {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName', 'creativeStatusId'],\n                pathParams: ['creativeStatusId', 'filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Filteredbids$Details = Resource$Bidders$Accounts$Filtersets$Filteredbids$Details;\n    class Resource$Bidders$Accounts$Filtersets$Impressionmetrics {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/impressionMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Impressionmetrics = Resource$Bidders$Accounts$Filtersets$Impressionmetrics;\n    class Resource$Bidders$Accounts$Filtersets$Losingbids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/losingBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Losingbids = Resource$Bidders$Accounts$Filtersets$Losingbids;\n    class Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/nonBillableWinningBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids = Resource$Bidders$Accounts$Filtersets$Nonbillablewinningbids;\n    class Resource$Bidders$Filtersets {\n        constructor(context) {\n            this.context = context;\n            this.bidMetrics = new Resource$Bidders$Filtersets$Bidmetrics(this.context);\n            this.bidResponseErrors =\n                new Resource$Bidders$Filtersets$Bidresponseerrors(this.context);\n            this.bidResponsesWithoutBids =\n                new Resource$Bidders$Filtersets$Bidresponseswithoutbids(this.context);\n            this.filteredBidRequests =\n                new Resource$Bidders$Filtersets$Filteredbidrequests(this.context);\n            this.filteredBids = new Resource$Bidders$Filtersets$Filteredbids(this.context);\n            this.impressionMetrics =\n                new Resource$Bidders$Filtersets$Impressionmetrics(this.context);\n            this.losingBids = new Resource$Bidders$Filtersets$Losingbids(this.context);\n            this.nonBillableWinningBids =\n                new Resource$Bidders$Filtersets$Nonbillablewinningbids(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['ownerName'],\n                pathParams: ['ownerName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+ownerName}/filterSets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['ownerName'],\n                pathParams: ['ownerName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets = Resource$Bidders$Filtersets;\n    class Resource$Bidders$Filtersets$Bidmetrics {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/bidMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Bidmetrics = Resource$Bidders$Filtersets$Bidmetrics;\n    class Resource$Bidders$Filtersets$Bidresponseerrors {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponseErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Bidresponseerrors = Resource$Bidders$Filtersets$Bidresponseerrors;\n    class Resource$Bidders$Filtersets$Bidresponseswithoutbids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/bidResponsesWithoutBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Bidresponseswithoutbids = Resource$Bidders$Filtersets$Bidresponseswithoutbids;\n    class Resource$Bidders$Filtersets$Filteredbidrequests {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBidRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbidrequests = Resource$Bidders$Filtersets$Filteredbidrequests;\n    class Resource$Bidders$Filtersets$Filteredbids {\n        constructor(context) {\n            this.context = context;\n            this.creatives = new Resource$Bidders$Filtersets$Filteredbids$Creatives(this.context);\n            this.details = new Resource$Bidders$Filtersets$Filteredbids$Details(this.context);\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/filteredBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbids = Resource$Bidders$Filtersets$Filteredbids;\n    class Resource$Bidders$Filtersets$Filteredbids$Creatives {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName', 'creativeStatusId'],\n                pathParams: ['creativeStatusId', 'filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbids$Creatives = Resource$Bidders$Filtersets$Filteredbids$Creatives;\n    class Resource$Bidders$Filtersets$Filteredbids$Details {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2beta1/{+filterSetName}/filteredBids/{creativeStatusId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName', 'creativeStatusId'],\n                pathParams: ['creativeStatusId', 'filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Filteredbids$Details = Resource$Bidders$Filtersets$Filteredbids$Details;\n    class Resource$Bidders$Filtersets$Impressionmetrics {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/impressionMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Impressionmetrics = Resource$Bidders$Filtersets$Impressionmetrics;\n    class Resource$Bidders$Filtersets$Losingbids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/losingBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Losingbids = Resource$Bidders$Filtersets$Losingbids;\n    class Resource$Bidders$Filtersets$Nonbillablewinningbids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://adexchangebuyer.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2beta1/{+filterSetName}/nonBillableWinningBids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['filterSetName'],\n                pathParams: ['filterSetName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    adexchangebuyer2_v2beta1.Resource$Bidders$Filtersets$Nonbillablewinningbids = Resource$Bidders$Filtersets$Nonbillablewinningbids;\n})(adexchangebuyer2_v2beta1 = exports.adexchangebuyer2_v2beta1 || (exports.adexchangebuyer2_v2beta1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}