{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resourcesettings_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar resourcesettings_v1;\n\n(function (resourcesettings_v1) {\n  /**\n   * Resource Settings API\n   *\n   * The Resource Settings API allows users to control and modify the behavior of their GCP resources (e.g., VM, firewall, Project, etc.) across the Cloud Resource Hierarchy.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const resourcesettings = google.resourcesettings('v1');\n   * ```\n   */\n  class Resourcesettings {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.folders = new Resource$Folders(this.context);\n      this.organizations = new Resource$Organizations(this.context);\n      this.projects = new Resource$Projects(this.context);\n    }\n\n  }\n\n  resourcesettings_v1.Resourcesettings = Resourcesettings;\n\n  class Resource$Folders {\n    constructor(context) {\n      this.context = context;\n      this.settings = new Resource$Folders$Settings(this.context);\n    }\n\n  }\n\n  resourcesettings_v1.Resource$Folders = Resource$Folders;\n\n  class Resource$Folders$Settings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/settings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  resourcesettings_v1.Resource$Folders$Settings = Resource$Folders$Settings;\n\n  class Resource$Organizations {\n    constructor(context) {\n      this.context = context;\n      this.settings = new Resource$Organizations$Settings(this.context);\n    }\n\n  }\n\n  resourcesettings_v1.Resource$Organizations = Resource$Organizations;\n\n  class Resource$Organizations$Settings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/settings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  resourcesettings_v1.Resource$Organizations$Settings = Resource$Organizations$Settings;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.settings = new Resource$Projects$Settings(this.context);\n    }\n\n  }\n\n  resourcesettings_v1.Resource$Projects = Resource$Projects;\n\n  class Resource$Projects$Settings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/settings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  resourcesettings_v1.Resource$Projects$Settings = Resource$Projects$Settings;\n})(resourcesettings_v1 = exports.resourcesettings_v1 || (exports.resourcesettings_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","resourcesettings_v1","googleapis_common_1","require","Resourcesettings","constructor","options","google","context","_options","folders","Resource$Folders","organizations","Resource$Organizations","projects","Resource$Projects","settings","Resource$Folders$Settings","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","patch","Resource$Organizations$Settings","Resource$Projects$Settings"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/resourcesettings/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resourcesettings_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar resourcesettings_v1;\n(function (resourcesettings_v1) {\n    /**\n     * Resource Settings API\n     *\n     * The Resource Settings API allows users to control and modify the behavior of their GCP resources (e.g., VM, firewall, Project, etc.) across the Cloud Resource Hierarchy.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const resourcesettings = google.resourcesettings('v1');\n     * ```\n     */\n    class Resourcesettings {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.folders = new Resource$Folders(this.context);\n            this.organizations = new Resource$Organizations(this.context);\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    resourcesettings_v1.Resourcesettings = Resourcesettings;\n    class Resource$Folders {\n        constructor(context) {\n            this.context = context;\n            this.settings = new Resource$Folders$Settings(this.context);\n        }\n    }\n    resourcesettings_v1.Resource$Folders = Resource$Folders;\n    class Resource$Folders$Settings {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/settings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    resourcesettings_v1.Resource$Folders$Settings = Resource$Folders$Settings;\n    class Resource$Organizations {\n        constructor(context) {\n            this.context = context;\n            this.settings = new Resource$Organizations$Settings(this.context);\n        }\n    }\n    resourcesettings_v1.Resource$Organizations = Resource$Organizations;\n    class Resource$Organizations$Settings {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/settings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    resourcesettings_v1.Resource$Organizations$Settings = Resource$Organizations$Settings;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.settings = new Resource$Projects$Settings(this.context);\n        }\n    }\n    resourcesettings_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Settings {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/settings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://resourcesettings.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    resourcesettings_v1.Resource$Projects$Settings = Resource$Projects$Settings;\n})(resourcesettings_v1 = exports.resourcesettings_v1 || (exports.resourcesettings_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}