{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsRequestSigner = void 0;\n\nconst crypto_1 = require(\"../crypto/crypto\");\n/** AWS Signature Version 4 signing algorithm identifier.  */\n\n\nconst AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\n/**\n * The termination string for the AWS credential scope value as defined in\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n */\n\nconst AWS_REQUEST_TYPE = 'aws4_request';\n/**\n * Implements an AWS API request signer based on the AWS Signature Version 4\n * signing process.\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\n\nclass AwsRequestSigner {\n  /**\n   * Instantiates an AWS API request signer used to send authenticated signed\n   * requests to AWS APIs based on the AWS Signature Version 4 signing process.\n   * This also provides a mechanism to generate the signed request without\n   * sending it.\n   * @param getCredentials A mechanism to retrieve AWS security credentials\n   *   when needed.\n   * @param region The AWS region to use.\n   */\n  constructor(getCredentials, region) {\n    this.getCredentials = getCredentials;\n    this.region = region;\n    this.crypto = (0, crypto_1.createCrypto)();\n  }\n  /**\n   * Generates the signed request for the provided HTTP request for calling\n   * an AWS API. This follows the steps described at:\n   * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n   * @param amzOptions The AWS request options that need to be signed.\n   * @return A promise that resolves with the GaxiosOptions containing the\n   *   signed HTTP request parameters.\n   */\n\n\n  async getRequestOptions(amzOptions) {\n    if (!amzOptions.url) {\n      throw new Error('\"url\" is required in \"amzOptions\"');\n    } // Stringify JSON requests. This will be set in the request body of the\n    // generated signed request.\n\n\n    const requestPayloadData = typeof amzOptions.data === 'object' ? JSON.stringify(amzOptions.data) : amzOptions.data;\n    const url = amzOptions.url;\n    const method = amzOptions.method || 'GET';\n    const requestPayload = amzOptions.body || requestPayloadData;\n    const additionalAmzHeaders = amzOptions.headers;\n    const awsSecurityCredentials = await this.getCredentials();\n    const uri = new URL(url);\n    const headerMap = await generateAuthenticationHeaderMap({\n      crypto: this.crypto,\n      host: uri.host,\n      canonicalUri: uri.pathname,\n      canonicalQuerystring: uri.search.substr(1),\n      method,\n      region: this.region,\n      securityCredentials: awsSecurityCredentials,\n      requestPayload,\n      additionalAmzHeaders\n    }); // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n\n    const headers = Object.assign( // Add x-amz-date if available.\n    headerMap.amzDate ? {\n      'x-amz-date': headerMap.amzDate\n    } : {}, {\n      Authorization: headerMap.authorizationHeader,\n      host: uri.host\n    }, additionalAmzHeaders || {});\n\n    if (awsSecurityCredentials.token) {\n      Object.assign(headers, {\n        'x-amz-security-token': awsSecurityCredentials.token\n      });\n    }\n\n    const awsSignedReq = {\n      url,\n      method: method,\n      headers\n    };\n\n    if (typeof requestPayload !== 'undefined') {\n      awsSignedReq.body = requestPayload;\n    }\n\n    return awsSignedReq;\n  }\n\n}\n\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\n * Creates the HMAC-SHA256 hash of the provided message using the\n * provided key.\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The HMAC-SHA256 key to use.\n * @param msg The message to hash.\n * @return The computed hash bytes.\n */\n\nasync function sign(crypto, key, msg) {\n  return await crypto.signWithHmacSha256(key, msg);\n}\n/**\n * Calculates the signing key used to calculate the signature for\n * AWS Signature Version 4 based on:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The AWS secret access key.\n * @param dateStamp The '%Y%m%d' date format.\n * @param region The AWS region.\n * @param serviceName The AWS service name, eg. sts.\n * @return The signing key bytes.\n */\n\n\nasync function getSigningKey(crypto, key, dateStamp, region, serviceName) {\n  const kDate = await sign(crypto, `AWS4${key}`, dateStamp);\n  const kRegion = await sign(crypto, kDate, region);\n  const kService = await sign(crypto, kRegion, serviceName);\n  const kSigning = await sign(crypto, kService, 'aws4_request');\n  return kSigning;\n}\n/**\n * Generates the authentication header map needed for generating the AWS\n * Signature Version 4 signed request.\n *\n * @param option The options needed to compute the authentication header map.\n * @return The AWS authentication header map which constitutes of the following\n *   components: amz-date, authorization header and canonical query string.\n */\n\n\nasync function generateAuthenticationHeaderMap(options) {\n  const additionalAmzHeaders = options.additionalAmzHeaders || {};\n  const requestPayload = options.requestPayload || ''; // iam.amazonaws.com host => iam service.\n  // sts.us-east-2.amazonaws.com => sts service.\n\n  const serviceName = options.host.split('.')[0];\n  const now = new Date(); // Format: '%Y%m%dT%H%M%SZ'.\n\n  const amzDate = now.toISOString().replace(/[-:]/g, '').replace(/\\.[0-9]+/, ''); // Format: '%Y%m%d'.\n\n  const dateStamp = now.toISOString().replace(/[-]/g, '').replace(/T.*/, ''); // Change all additional headers to be lower case.\n\n  const reformattedAdditionalAmzHeaders = {};\n  Object.keys(additionalAmzHeaders).forEach(key => {\n    reformattedAdditionalAmzHeaders[key.toLowerCase()] = additionalAmzHeaders[key];\n  }); // Add AWS token if available.\n\n  if (options.securityCredentials.token) {\n    reformattedAdditionalAmzHeaders['x-amz-security-token'] = options.securityCredentials.token;\n  } // Header keys need to be sorted alphabetically.\n\n\n  const amzHeaders = Object.assign({\n    host: options.host\n  }, // Previously the date was not fixed with x-amz- and could be provided manually.\n  // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n  reformattedAdditionalAmzHeaders.date ? {} : {\n    'x-amz-date': amzDate\n  }, reformattedAdditionalAmzHeaders);\n  let canonicalHeaders = '';\n  const signedHeadersList = Object.keys(amzHeaders).sort();\n  signedHeadersList.forEach(key => {\n    canonicalHeaders += `${key}:${amzHeaders[key]}\\n`;\n  });\n  const signedHeaders = signedHeadersList.join(';');\n  const payloadHash = await options.crypto.sha256DigestHex(requestPayload); // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n\n  const canonicalRequest = `${options.method}\\n` + `${options.canonicalUri}\\n` + `${options.canonicalQuerystring}\\n` + `${canonicalHeaders}\\n` + `${signedHeaders}\\n` + `${payloadHash}`;\n  const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`; // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n\n  const stringToSign = `${AWS_ALGORITHM}\\n` + `${amzDate}\\n` + `${credentialScope}\\n` + (await options.crypto.sha256DigestHex(canonicalRequest)); // https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n\n  const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n  const signature = await sign(options.crypto, signingKey, stringToSign); // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n\n  const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/` + `${credentialScope}, SignedHeaders=${signedHeaders}, ` + `Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;\n  return {\n    // Do not return x-amz-date if date is available.\n    amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n    authorizationHeader,\n    canonicalQuerystring: options.canonicalQuerystring\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","AwsRequestSigner","crypto_1","require","AWS_ALGORITHM","AWS_REQUEST_TYPE","constructor","getCredentials","region","crypto","createCrypto","getRequestOptions","amzOptions","url","Error","requestPayloadData","data","JSON","stringify","method","requestPayload","body","additionalAmzHeaders","headers","awsSecurityCredentials","uri","URL","headerMap","generateAuthenticationHeaderMap","host","canonicalUri","pathname","canonicalQuerystring","search","substr","securityCredentials","assign","amzDate","Authorization","authorizationHeader","token","awsSignedReq","sign","key","msg","signWithHmacSha256","getSigningKey","dateStamp","serviceName","kDate","kRegion","kService","kSigning","options","split","now","Date","toISOString","replace","reformattedAdditionalAmzHeaders","keys","forEach","toLowerCase","amzHeaders","date","canonicalHeaders","signedHeadersList","sort","signedHeaders","join","payloadHash","sha256DigestHex","canonicalRequest","credentialScope","stringToSign","signingKey","secretAccessKey","signature","accessKeyId","fromArrayBufferToHex","undefined"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsRequestSigner = void 0;\nconst crypto_1 = require(\"../crypto/crypto\");\n/** AWS Signature Version 4 signing algorithm identifier.  */\nconst AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\n/**\n * The termination string for the AWS credential scope value as defined in\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n */\nconst AWS_REQUEST_TYPE = 'aws4_request';\n/**\n * Implements an AWS API request signer based on the AWS Signature Version 4\n * signing process.\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nclass AwsRequestSigner {\n    /**\n     * Instantiates an AWS API request signer used to send authenticated signed\n     * requests to AWS APIs based on the AWS Signature Version 4 signing process.\n     * This also provides a mechanism to generate the signed request without\n     * sending it.\n     * @param getCredentials A mechanism to retrieve AWS security credentials\n     *   when needed.\n     * @param region The AWS region to use.\n     */\n    constructor(getCredentials, region) {\n        this.getCredentials = getCredentials;\n        this.region = region;\n        this.crypto = (0, crypto_1.createCrypto)();\n    }\n    /**\n     * Generates the signed request for the provided HTTP request for calling\n     * an AWS API. This follows the steps described at:\n     * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n     * @param amzOptions The AWS request options that need to be signed.\n     * @return A promise that resolves with the GaxiosOptions containing the\n     *   signed HTTP request parameters.\n     */\n    async getRequestOptions(amzOptions) {\n        if (!amzOptions.url) {\n            throw new Error('\"url\" is required in \"amzOptions\"');\n        }\n        // Stringify JSON requests. This will be set in the request body of the\n        // generated signed request.\n        const requestPayloadData = typeof amzOptions.data === 'object'\n            ? JSON.stringify(amzOptions.data)\n            : amzOptions.data;\n        const url = amzOptions.url;\n        const method = amzOptions.method || 'GET';\n        const requestPayload = amzOptions.body || requestPayloadData;\n        const additionalAmzHeaders = amzOptions.headers;\n        const awsSecurityCredentials = await this.getCredentials();\n        const uri = new URL(url);\n        const headerMap = await generateAuthenticationHeaderMap({\n            crypto: this.crypto,\n            host: uri.host,\n            canonicalUri: uri.pathname,\n            canonicalQuerystring: uri.search.substr(1),\n            method,\n            region: this.region,\n            securityCredentials: awsSecurityCredentials,\n            requestPayload,\n            additionalAmzHeaders,\n        });\n        // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n        const headers = Object.assign(\n        // Add x-amz-date if available.\n        headerMap.amzDate ? { 'x-amz-date': headerMap.amzDate } : {}, {\n            Authorization: headerMap.authorizationHeader,\n            host: uri.host,\n        }, additionalAmzHeaders || {});\n        if (awsSecurityCredentials.token) {\n            Object.assign(headers, {\n                'x-amz-security-token': awsSecurityCredentials.token,\n            });\n        }\n        const awsSignedReq = {\n            url,\n            method: method,\n            headers,\n        };\n        if (typeof requestPayload !== 'undefined') {\n            awsSignedReq.body = requestPayload;\n        }\n        return awsSignedReq;\n    }\n}\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\n * Creates the HMAC-SHA256 hash of the provided message using the\n * provided key.\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The HMAC-SHA256 key to use.\n * @param msg The message to hash.\n * @return The computed hash bytes.\n */\nasync function sign(crypto, key, msg) {\n    return await crypto.signWithHmacSha256(key, msg);\n}\n/**\n * Calculates the signing key used to calculate the signature for\n * AWS Signature Version 4 based on:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The AWS secret access key.\n * @param dateStamp The '%Y%m%d' date format.\n * @param region The AWS region.\n * @param serviceName The AWS service name, eg. sts.\n * @return The signing key bytes.\n */\nasync function getSigningKey(crypto, key, dateStamp, region, serviceName) {\n    const kDate = await sign(crypto, `AWS4${key}`, dateStamp);\n    const kRegion = await sign(crypto, kDate, region);\n    const kService = await sign(crypto, kRegion, serviceName);\n    const kSigning = await sign(crypto, kService, 'aws4_request');\n    return kSigning;\n}\n/**\n * Generates the authentication header map needed for generating the AWS\n * Signature Version 4 signed request.\n *\n * @param option The options needed to compute the authentication header map.\n * @return The AWS authentication header map which constitutes of the following\n *   components: amz-date, authorization header and canonical query string.\n */\nasync function generateAuthenticationHeaderMap(options) {\n    const additionalAmzHeaders = options.additionalAmzHeaders || {};\n    const requestPayload = options.requestPayload || '';\n    // iam.amazonaws.com host => iam service.\n    // sts.us-east-2.amazonaws.com => sts service.\n    const serviceName = options.host.split('.')[0];\n    const now = new Date();\n    // Format: '%Y%m%dT%H%M%SZ'.\n    const amzDate = now\n        .toISOString()\n        .replace(/[-:]/g, '')\n        .replace(/\\.[0-9]+/, '');\n    // Format: '%Y%m%d'.\n    const dateStamp = now.toISOString().replace(/[-]/g, '').replace(/T.*/, '');\n    // Change all additional headers to be lower case.\n    const reformattedAdditionalAmzHeaders = {};\n    Object.keys(additionalAmzHeaders).forEach(key => {\n        reformattedAdditionalAmzHeaders[key.toLowerCase()] =\n            additionalAmzHeaders[key];\n    });\n    // Add AWS token if available.\n    if (options.securityCredentials.token) {\n        reformattedAdditionalAmzHeaders['x-amz-security-token'] =\n            options.securityCredentials.token;\n    }\n    // Header keys need to be sorted alphabetically.\n    const amzHeaders = Object.assign({\n        host: options.host,\n    }, \n    // Previously the date was not fixed with x-amz- and could be provided manually.\n    // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n    reformattedAdditionalAmzHeaders.date ? {} : { 'x-amz-date': amzDate }, reformattedAdditionalAmzHeaders);\n    let canonicalHeaders = '';\n    const signedHeadersList = Object.keys(amzHeaders).sort();\n    signedHeadersList.forEach(key => {\n        canonicalHeaders += `${key}:${amzHeaders[key]}\\n`;\n    });\n    const signedHeaders = signedHeadersList.join(';');\n    const payloadHash = await options.crypto.sha256DigestHex(requestPayload);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n    const canonicalRequest = `${options.method}\\n` +\n        `${options.canonicalUri}\\n` +\n        `${options.canonicalQuerystring}\\n` +\n        `${canonicalHeaders}\\n` +\n        `${signedHeaders}\\n` +\n        `${payloadHash}`;\n    const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n    const stringToSign = `${AWS_ALGORITHM}\\n` +\n        `${amzDate}\\n` +\n        `${credentialScope}\\n` +\n        (await options.crypto.sha256DigestHex(canonicalRequest));\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n    const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n    const signature = await sign(options.crypto, signingKey, stringToSign);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/` +\n        `${credentialScope}, SignedHeaders=${signedHeaders}, ` +\n        `Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;\n    return {\n        // Do not return x-amz-date if date is available.\n        amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n        authorizationHeader,\n        canonicalQuerystring: options.canonicalQuerystring,\n    };\n}\n//# sourceMappingURL=awsrequestsigner.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}