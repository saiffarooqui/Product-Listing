{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.games_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar games_v1;\n\n(function (games_v1) {\n  /**\n   * Google Play Game Services\n   *\n   * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const games = google.games('v1');\n   * ```\n   */\n  class Games {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.achievementDefinitions = new Resource$Achievementdefinitions(this.context);\n      this.achievements = new Resource$Achievements(this.context);\n      this.applications = new Resource$Applications(this.context);\n      this.events = new Resource$Events(this.context);\n      this.leaderboards = new Resource$Leaderboards(this.context);\n      this.metagame = new Resource$Metagame(this.context);\n      this.players = new Resource$Players(this.context);\n      this.revisions = new Resource$Revisions(this.context);\n      this.scores = new Resource$Scores(this.context);\n      this.snapshots = new Resource$Snapshots(this.context);\n      this.stats = new Resource$Stats(this.context);\n    }\n\n  }\n\n  games_v1.Games = Games;\n\n  class Resource$Achievementdefinitions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Achievementdefinitions = Resource$Achievementdefinitions;\n\n  class Resource$Achievements {\n    constructor(context) {\n      this.context = context;\n    }\n\n    increment(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements/{achievementId}/increment').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['achievementId', 'stepsToIncrement'],\n        pathParams: ['achievementId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/{playerId}/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['playerId'],\n        pathParams: ['playerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    reveal(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements/{achievementId}/reveal').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['achievementId'],\n        pathParams: ['achievementId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setStepsAtLeast(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements/{achievementId}/setStepsAtLeast').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['achievementId', 'steps'],\n        pathParams: ['achievementId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    unlock(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements/{achievementId}/unlock').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['achievementId'],\n        pathParams: ['achievementId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateMultiple(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/achievements/updateMultiple').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Achievements = Resource$Achievements;\n\n  class Resource$Applications {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/applications/{applicationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['applicationId'],\n        pathParams: ['applicationId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getEndPoint(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/applications/getEndPoint').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    played(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/applications/played').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    verify(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/applications/{applicationId}/verify').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['applicationId'],\n        pathParams: ['applicationId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Applications = Resource$Applications;\n\n  class Resource$Events {\n    constructor(context) {\n      this.context = context;\n    }\n\n    listByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listDefinitions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/eventDefinitions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    record(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Events = Resource$Events;\n\n  class Resource$Leaderboards {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['leaderboardId'],\n        pathParams: ['leaderboardId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Leaderboards = Resource$Leaderboards;\n\n  class Resource$Metagame {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getMetagameConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/metagameConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listCategoriesByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/{playerId}/categories/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['playerId', 'collection'],\n        pathParams: ['collection', 'playerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Metagame = Resource$Metagame;\n\n  class Resource$Players {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/{playerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['playerId'],\n        pathParams: ['playerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getScopedPlayerIds(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/me/scopedIds').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/me/players/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['collection'],\n        pathParams: ['collection'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Players = Resource$Players;\n\n  class Resource$Revisions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    check(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/revisions/check').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['clientRevision'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Revisions = Resource$Revisions;\n\n  class Resource$Scores {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['playerId', 'leaderboardId', 'timeSpan'],\n        pathParams: ['leaderboardId', 'playerId', 'timeSpan'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/scores/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n        pathParams: ['collection', 'leaderboardId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listWindow(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/window/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n        pathParams: ['collection', 'leaderboardId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    submit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['leaderboardId', 'score'],\n        pathParams: ['leaderboardId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    submitMultiple(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/leaderboards/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Scores = Resource$Scores;\n\n  class Resource$Snapshots {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['snapshotId'],\n        pathParams: ['snapshotId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/players/{playerId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['playerId'],\n        pathParams: ['playerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Snapshots = Resource$Snapshots;\n\n  class Resource$Stats {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/games/v1/stats').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  games_v1.Resource$Stats = Resource$Stats;\n})(games_v1 = exports.games_v1 || (exports.games_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","games_v1","googleapis_common_1","require","Games","constructor","options","google","context","_options","achievementDefinitions","Resource$Achievementdefinitions","achievements","Resource$Achievements","applications","Resource$Applications","events","Resource$Events","leaderboards","Resource$Leaderboards","metagame","Resource$Metagame","players","Resource$Players","revisions","Resource$Revisions","scores","Resource$Scores","snapshots","Resource$Snapshots","stats","Resource$Stats","list","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","increment","reveal","setStepsAtLeast","unlock","updateMultiple","get","getEndPoint","played","verify","listByPlayer","listDefinitions","record","getMetagameConfig","listCategoriesByPlayer","getScopedPlayerIds","check","listWindow","submit","submitMultiple"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/games/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.games_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar games_v1;\n(function (games_v1) {\n    /**\n     * Google Play Game Services\n     *\n     * The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const games = google.games('v1');\n     * ```\n     */\n    class Games {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.achievementDefinitions = new Resource$Achievementdefinitions(this.context);\n            this.achievements = new Resource$Achievements(this.context);\n            this.applications = new Resource$Applications(this.context);\n            this.events = new Resource$Events(this.context);\n            this.leaderboards = new Resource$Leaderboards(this.context);\n            this.metagame = new Resource$Metagame(this.context);\n            this.players = new Resource$Players(this.context);\n            this.revisions = new Resource$Revisions(this.context);\n            this.scores = new Resource$Scores(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.stats = new Resource$Stats(this.context);\n        }\n    }\n    games_v1.Games = Games;\n    class Resource$Achievementdefinitions {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Achievementdefinitions = Resource$Achievementdefinitions;\n    class Resource$Achievements {\n        constructor(context) {\n            this.context = context;\n        }\n        increment(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/increment').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId', 'stepsToIncrement'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}/achievements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId'],\n                pathParams: ['playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reveal(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/reveal').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setStepsAtLeast(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/setStepsAtLeast').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId', 'steps'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unlock(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/{achievementId}/unlock').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['achievementId'],\n                pathParams: ['achievementId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateMultiple(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/achievements/updateMultiple').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Achievements = Resource$Achievements;\n    class Resource$Applications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/{applicationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['applicationId'],\n                pathParams: ['applicationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEndPoint(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/getEndPoint').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        played(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/played').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        verify(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/applications/{applicationId}/verify').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['applicationId'],\n                pathParams: ['applicationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Applications = Resource$Applications;\n    class Resource$Events {\n        constructor(context) {\n            this.context = context;\n        }\n        listByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listDefinitions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/eventDefinitions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        record(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/events').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Events = Resource$Events;\n    class Resource$Leaderboards {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId'],\n                pathParams: ['leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Leaderboards = Resource$Leaderboards;\n    class Resource$Metagame {\n        constructor(context) {\n            this.context = context;\n        }\n        getMetagameConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/metagameConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listCategoriesByPlayer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}/categories/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId', 'collection'],\n                pathParams: ['collection', 'playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Metagame = Resource$Metagame;\n    class Resource$Players {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId'],\n                pathParams: ['playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getScopedPlayerIds(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/me/scopedIds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/me/players/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['collection'],\n                pathParams: ['collection'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Players = Resource$Players;\n    class Resource$Revisions {\n        constructor(context) {\n            this.context = context;\n        }\n        check(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/revisions/check').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['clientRevision'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Revisions = Resource$Revisions;\n    class Resource$Scores {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId', 'leaderboardId', 'timeSpan'],\n                pathParams: ['leaderboardId', 'playerId', 'timeSpan'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/games/v1/leaderboards/{leaderboardId}/scores/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n                pathParams: ['collection', 'leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listWindow(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/games/v1/leaderboards/{leaderboardId}/window/{collection}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId', 'collection', 'timeSpan'],\n                pathParams: ['collection', 'leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        submit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards/{leaderboardId}/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['leaderboardId', 'score'],\n                pathParams: ['leaderboardId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        submitMultiple(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/leaderboards/scores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Scores = Resource$Scores;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/snapshots/{snapshotId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['snapshotId'],\n                pathParams: ['snapshotId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/players/{playerId}/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['playerId'],\n                pathParams: ['playerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Stats {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://games.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/games/v1/stats').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    games_v1.Resource$Stats = Resource$Stats;\n})(games_v1 = exports.games_v1 || (exports.games_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}