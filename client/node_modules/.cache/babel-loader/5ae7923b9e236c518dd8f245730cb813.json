{"ast":null,"code":"\"use strict\"; // Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Compute = void 0;\n\nconst arrify = require(\"arrify\");\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass Compute extends oauth2client_1.OAuth2Client {\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options); // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n\n    this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    this.scopes = arrify(options.scopes);\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n\n\n  async refreshTokenNoCache( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n    let data;\n\n    try {\n      const instanceOptions = {\n        property: tokenPath\n      };\n\n      if (this.scopes.length > 0) {\n        instanceOptions.params = {\n          scopes: this.scopes.join(',')\n        };\n      }\n\n      data = await gcpMetadata.instance(instanceOptions);\n    } catch (e) {\n      if (e instanceof gaxios_1.GaxiosError) {\n        e.message = `Could not refresh access token: ${e.message}`;\n        this.wrapError(e);\n      }\n\n      throw e;\n    }\n\n    const tokens = data;\n\n    if (data && data.expires_in) {\n      tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n      delete tokens.expires_in;\n    }\n\n    this.emit('tokens', tokens);\n    return {\n      tokens,\n      res: null\n    };\n  }\n  /**\n   * Fetches an ID token.\n   * @param targetAudience the audience for the fetched ID token.\n   */\n\n\n  async fetchIdToken(targetAudience) {\n    const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity` + `?format=full&audience=${targetAudience}`;\n    let idToken;\n\n    try {\n      const instanceOptions = {\n        property: idTokenPath\n      };\n      idToken = await gcpMetadata.instance(instanceOptions);\n    } catch (e) {\n      if (e instanceof Error) {\n        e.message = `Could not fetch ID token: ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    return idToken;\n  }\n\n  wrapError(e) {\n    const res = e.response;\n\n    if (res && res.status) {\n      e.code = res.status.toString();\n\n      if (res.status === 403) {\n        e.message = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified: ' + e.message;\n      } else if (res.status === 404) {\n        e.message = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified: ' + e.message;\n      }\n    }\n  }\n\n}\n\nexports.Compute = Compute;","map":{"version":3,"names":["Object","defineProperty","exports","value","Compute","arrify","require","gaxios_1","gcpMetadata","oauth2client_1","OAuth2Client","constructor","options","credentials","expiry_date","refresh_token","serviceAccountEmail","scopes","refreshTokenNoCache","refreshToken","tokenPath","data","instanceOptions","property","length","params","join","instance","e","GaxiosError","message","wrapError","tokens","expires_in","Date","getTime","emit","res","fetchIdToken","targetAudience","idTokenPath","idToken","Error","response","status","code","toString"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/google-auth-library/build/src/auth/computeclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Compute = void 0;\nconst arrify = require(\"arrify\");\nconst gaxios_1 = require(\"gaxios\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://developers.google.com/compute/docs/authentication\n     */\n    constructor(options = {}) {\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { expiry_date: 1, refresh_token: 'compute-placeholder' };\n        this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n        this.scopes = arrify(options.scopes);\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n        let data;\n        try {\n            const instanceOptions = {\n                property: tokenPath,\n            };\n            if (this.scopes.length > 0) {\n                instanceOptions.params = {\n                    scopes: this.scopes.join(','),\n                };\n            }\n            data = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            if (e instanceof gaxios_1.GaxiosError) {\n                e.message = `Could not refresh access token: ${e.message}`;\n                this.wrapError(e);\n            }\n            throw e;\n        }\n        const tokens = data;\n        if (data && data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res: null };\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity` +\n            `?format=full&audience=${targetAudience}`;\n        let idToken;\n        try {\n            const instanceOptions = {\n                property: idTokenPath,\n            };\n            idToken = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Could not fetch ID token: ${e.message}`;\n            }\n            throw e;\n        }\n        return idToken;\n    }\n    wrapError(e) {\n        const res = e.response;\n        if (res && res.status) {\n            e.code = res.status.toString();\n            if (res.status === 403) {\n                e.message =\n                    'A Forbidden error was returned while attempting to retrieve an access ' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have the correct permission scopes specified: ' +\n                        e.message;\n            }\n            else if (res.status === 404) {\n                e.message =\n                    'A Not Found error was returned while attempting to retrieve an access' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have any permission scopes specified: ' +\n                        e.message;\n            }\n        }\n    }\n}\nexports.Compute = Compute;\n//# sourceMappingURL=computeclient.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}