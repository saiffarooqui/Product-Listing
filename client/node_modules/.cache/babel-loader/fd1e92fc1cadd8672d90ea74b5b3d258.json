{"ast":null,"code":"/**\n * Cross-browser support for logging in a web application.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nrequire('./util');\n/* LOG API */\n\n\nmodule.exports = forge.log = forge.log || {};\n/**\n * Application logging system.\n *\n * Each logger level available as it's own function of the form:\n *   forge.log.level(category, args...)\n * The category is an arbitrary string, and the args are the same as\n * Firebug's console.log API. By default the call will be output as:\n *   'LEVEL [category] <args[0]>, args[1], ...'\n * This enables proper % formatting via the first argument.\n * Each category is enabled by default but can be enabled or disabled with\n * the setCategoryEnabled() function.\n */\n// list of known levels\n\nforge.log.levels = ['none', 'error', 'warning', 'info', 'debug', 'verbose', 'max']; // info on the levels indexed by name:\n//   index: level index\n//   name: uppercased display name\n\nvar sLevelInfo = {}; // list of loggers\n\nvar sLoggers = [];\n/**\n * Standard console logger. If no console support is enabled this will\n * remain null. Check before using.\n */\n\nvar sConsoleLogger = null; // logger flags\n\n/**\n * Lock the level at the current value. Used in cases where user config may\n * set the level such that only critical messages are seen but more verbose\n * messages are needed for debugging or other purposes.\n */\n\nforge.log.LEVEL_LOCKED = 1 << 1;\n/**\n * Always call log function. By default, the logging system will check the\n * message level against logger.level before calling the log function. This\n * flag allows the function to do its own check.\n */\n\nforge.log.NO_LEVEL_CHECK = 1 << 2;\n/**\n * Perform message interpolation with the passed arguments. \"%\" style\n * fields in log messages will be replaced by arguments as needed. Some\n * loggers, such as Firebug, may do this automatically. The original log\n * message will be available as 'message' and the interpolated version will\n * be available as 'fullMessage'.\n */\n\nforge.log.INTERPOLATE = 1 << 3; // setup each log level\n\nfor (var i = 0; i < forge.log.levels.length; ++i) {\n  var level = forge.log.levels[i];\n  sLevelInfo[level] = {\n    index: i,\n    name: level.toUpperCase()\n  };\n}\n/**\n * Message logger. Will dispatch a message to registered loggers as needed.\n *\n * @param message message object\n */\n\n\nforge.log.logMessage = function (message) {\n  var messageLevelIndex = sLevelInfo[message.level].index;\n\n  for (var i = 0; i < sLoggers.length; ++i) {\n    var logger = sLoggers[i];\n\n    if (logger.flags & forge.log.NO_LEVEL_CHECK) {\n      logger.f(message);\n    } else {\n      // get logger level\n      var loggerLevelIndex = sLevelInfo[logger.level].index; // check level\n\n      if (messageLevelIndex <= loggerLevelIndex) {\n        // message critical enough, call logger\n        logger.f(logger, message);\n      }\n    }\n  }\n};\n/**\n * Sets the 'standard' key on a message object to:\n * \"LEVEL [category] \" + message\n *\n * @param message a message log object\n */\n\n\nforge.log.prepareStandard = function (message) {\n  if (!('standard' in message)) {\n    message.standard = sLevelInfo[message.level].name + //' ' + +message.timestamp +\n    ' [' + message.category + '] ' + message.message;\n  }\n};\n/**\n * Sets the 'full' key on a message object to the original message\n * interpolated via % formatting with the message arguments.\n *\n * @param message a message log object.\n */\n\n\nforge.log.prepareFull = function (message) {\n  if (!('full' in message)) {\n    // copy args and insert message at the front\n    var args = [message.message];\n    args = args.concat([] || message['arguments']); // format the message\n\n    message.full = forge.util.format.apply(this, args);\n  }\n};\n/**\n * Applies both preparseStandard() and prepareFull() to a message object and\n * store result in 'standardFull'.\n *\n * @param message a message log object.\n */\n\n\nforge.log.prepareStandardFull = function (message) {\n  if (!('standardFull' in message)) {\n    // FIXME implement 'standardFull' logging\n    forge.log.prepareStandard(message);\n    message.standardFull = message.standard;\n  }\n}; // create log level functions\n\n\nif (true) {\n  // levels for which we want functions\n  var levels = ['error', 'warning', 'info', 'debug', 'verbose'];\n\n  for (var i = 0; i < levels.length; ++i) {\n    // wrap in a function to ensure proper level var is passed\n    (function (level) {\n      // create function for this level\n      forge.log[level] = function (category, message\n      /*, args...*/\n      ) {\n        // convert arguments to real array, remove category and message\n        var args = Array.prototype.slice.call(arguments).slice(2); // create message object\n        // Note: interpolation and standard formatting is done lazily\n\n        var msg = {\n          timestamp: new Date(),\n          level: level,\n          category: category,\n          message: message,\n          'arguments': args\n          /*standard*/\n\n          /*full*/\n\n          /*fullMessage*/\n\n        }; // process this message\n\n        forge.log.logMessage(msg);\n      };\n    })(levels[i]);\n  }\n}\n/**\n * Creates a new logger with specified custom logging function.\n *\n * The logging function has a signature of:\n *   function(logger, message)\n * logger: current logger\n * message: object:\n *   level: level id\n *   category: category\n *   message: string message\n *   arguments: Array of extra arguments\n *   fullMessage: interpolated message and arguments if INTERPOLATE flag set\n *\n * @param logFunction a logging function which takes a log message object\n *          as a parameter.\n *\n * @return a logger object.\n */\n\n\nforge.log.makeLogger = function (logFunction) {\n  var logger = {\n    flags: 0,\n    f: logFunction\n  };\n  forge.log.setLevel(logger, 'none');\n  return logger;\n};\n/**\n * Sets the current log level on a logger.\n *\n * @param logger the target logger.\n * @param level the new maximum log level as a string.\n *\n * @return true if set, false if not.\n */\n\n\nforge.log.setLevel = function (logger, level) {\n  var rval = false;\n\n  if (logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {\n    for (var i = 0; i < forge.log.levels.length; ++i) {\n      var aValidLevel = forge.log.levels[i];\n\n      if (level == aValidLevel) {\n        // set level\n        logger.level = level;\n        rval = true;\n        break;\n      }\n    }\n  }\n\n  return rval;\n};\n/**\n * Locks the log level at its current value.\n *\n * @param logger the target logger.\n * @param lock boolean lock value, default to true.\n */\n\n\nforge.log.lock = function (logger, lock) {\n  if (typeof lock === 'undefined' || lock) {\n    logger.flags |= forge.log.LEVEL_LOCKED;\n  } else {\n    logger.flags &= ~forge.log.LEVEL_LOCKED;\n  }\n};\n/**\n * Adds a logger.\n *\n * @param logger the logger object.\n */\n\n\nforge.log.addLogger = function (logger) {\n  sLoggers.push(logger);\n}; // setup the console logger if possible, else create fake console.log\n\n\nif (typeof console !== 'undefined' && 'log' in console) {\n  var logger;\n\n  if (console.error && console.warn && console.info && console.debug) {\n    // looks like Firebug-style logging is available\n    // level handlers map\n    var levelHandlers = {\n      error: console.error,\n      warning: console.warn,\n      info: console.info,\n      debug: console.debug,\n      verbose: console.debug\n    };\n\n    var f = function (logger, message) {\n      forge.log.prepareStandard(message);\n      var handler = levelHandlers[message.level]; // prepend standard message and concat args\n\n      var args = [message.standard];\n      args = args.concat(message['arguments'].slice()); // apply to low-level console function\n\n      handler.apply(console, args);\n    };\n\n    logger = forge.log.makeLogger(f);\n  } else {\n    // only appear to have basic console.log\n    var f = function (logger, message) {\n      forge.log.prepareStandardFull(message);\n      console.log(message.standardFull);\n    };\n\n    logger = forge.log.makeLogger(f);\n  }\n\n  forge.log.setLevel(logger, 'debug');\n  forge.log.addLogger(logger);\n  sConsoleLogger = logger;\n} else {\n  // define fake console.log to avoid potential script errors on\n  // browsers that do not have console logging\n  console = {\n    log: function () {}\n  };\n}\n/*\n * Check for logging control query vars in current URL.\n *\n * console.level=<level-name>\n * Set's the console log level by name.  Useful to override defaults and\n * allow more verbose logging before a user config is loaded.\n *\n * console.lock=<true|false>\n * Lock the console log level at whatever level it is set at.  This is run\n * after console.level is processed.  Useful to force a level of verbosity\n * that could otherwise be limited by a user config.\n */\n\n\nif (sConsoleLogger !== null && typeof window !== 'undefined' && window.location) {\n  var query = new URL(window.location.href).searchParams;\n\n  if (query.has('console.level')) {\n    // set with last value\n    forge.log.setLevel(sConsoleLogger, query.get('console.level').slice(-1)[0]);\n  }\n\n  if (query.has('console.lock')) {\n    // set with last value\n    var lock = query.get('console.lock').slice(-1)[0];\n\n    if (lock == 'true') {\n      forge.log.lock(sConsoleLogger);\n    }\n  }\n} // provide public access to console logger\n\n\nforge.log.consoleLogger = sConsoleLogger;","map":{"version":3,"names":["forge","require","module","exports","log","levels","sLevelInfo","sLoggers","sConsoleLogger","LEVEL_LOCKED","NO_LEVEL_CHECK","INTERPOLATE","i","length","level","index","name","toUpperCase","logMessage","message","messageLevelIndex","logger","flags","f","loggerLevelIndex","prepareStandard","standard","category","prepareFull","args","concat","full","util","format","apply","prepareStandardFull","standardFull","Array","prototype","slice","call","arguments","msg","timestamp","Date","makeLogger","logFunction","setLevel","rval","aValidLevel","lock","addLogger","push","console","error","warn","info","debug","levelHandlers","warning","verbose","handler","window","location","query","URL","href","searchParams","has","get","consoleLogger"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/node-forge/lib/log.js"],"sourcesContent":["/**\n * Cross-browser support for logging in a web application.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\n/* LOG API */\nmodule.exports = forge.log = forge.log || {};\n\n/**\n * Application logging system.\n *\n * Each logger level available as it's own function of the form:\n *   forge.log.level(category, args...)\n * The category is an arbitrary string, and the args are the same as\n * Firebug's console.log API. By default the call will be output as:\n *   'LEVEL [category] <args[0]>, args[1], ...'\n * This enables proper % formatting via the first argument.\n * Each category is enabled by default but can be enabled or disabled with\n * the setCategoryEnabled() function.\n */\n// list of known levels\nforge.log.levels = [\n  'none', 'error', 'warning', 'info', 'debug', 'verbose', 'max'];\n// info on the levels indexed by name:\n//   index: level index\n//   name: uppercased display name\nvar sLevelInfo = {};\n// list of loggers\nvar sLoggers = [];\n/**\n * Standard console logger. If no console support is enabled this will\n * remain null. Check before using.\n */\nvar sConsoleLogger = null;\n\n// logger flags\n/**\n * Lock the level at the current value. Used in cases where user config may\n * set the level such that only critical messages are seen but more verbose\n * messages are needed for debugging or other purposes.\n */\nforge.log.LEVEL_LOCKED = (1 << 1);\n/**\n * Always call log function. By default, the logging system will check the\n * message level against logger.level before calling the log function. This\n * flag allows the function to do its own check.\n */\nforge.log.NO_LEVEL_CHECK = (1 << 2);\n/**\n * Perform message interpolation with the passed arguments. \"%\" style\n * fields in log messages will be replaced by arguments as needed. Some\n * loggers, such as Firebug, may do this automatically. The original log\n * message will be available as 'message' and the interpolated version will\n * be available as 'fullMessage'.\n */\nforge.log.INTERPOLATE = (1 << 3);\n\n// setup each log level\nfor(var i = 0; i < forge.log.levels.length; ++i) {\n  var level = forge.log.levels[i];\n  sLevelInfo[level] = {\n    index: i,\n    name: level.toUpperCase()\n  };\n}\n\n/**\n * Message logger. Will dispatch a message to registered loggers as needed.\n *\n * @param message message object\n */\nforge.log.logMessage = function(message) {\n  var messageLevelIndex = sLevelInfo[message.level].index;\n  for(var i = 0; i < sLoggers.length; ++i) {\n    var logger = sLoggers[i];\n    if(logger.flags & forge.log.NO_LEVEL_CHECK) {\n      logger.f(message);\n    } else {\n      // get logger level\n      var loggerLevelIndex = sLevelInfo[logger.level].index;\n      // check level\n      if(messageLevelIndex <= loggerLevelIndex) {\n        // message critical enough, call logger\n        logger.f(logger, message);\n      }\n    }\n  }\n};\n\n/**\n * Sets the 'standard' key on a message object to:\n * \"LEVEL [category] \" + message\n *\n * @param message a message log object\n */\nforge.log.prepareStandard = function(message) {\n  if(!('standard' in message)) {\n    message.standard =\n      sLevelInfo[message.level].name +\n      //' ' + +message.timestamp +\n      ' [' + message.category + '] ' +\n      message.message;\n  }\n};\n\n/**\n * Sets the 'full' key on a message object to the original message\n * interpolated via % formatting with the message arguments.\n *\n * @param message a message log object.\n */\nforge.log.prepareFull = function(message) {\n  if(!('full' in message)) {\n    // copy args and insert message at the front\n    var args = [message.message];\n    args = args.concat([] || message['arguments']);\n    // format the message\n    message.full = forge.util.format.apply(this, args);\n  }\n};\n\n/**\n * Applies both preparseStandard() and prepareFull() to a message object and\n * store result in 'standardFull'.\n *\n * @param message a message log object.\n */\nforge.log.prepareStandardFull = function(message) {\n  if(!('standardFull' in message)) {\n    // FIXME implement 'standardFull' logging\n    forge.log.prepareStandard(message);\n    message.standardFull = message.standard;\n  }\n};\n\n// create log level functions\nif(true) {\n  // levels for which we want functions\n  var levels = ['error', 'warning', 'info', 'debug', 'verbose'];\n  for(var i = 0; i < levels.length; ++i) {\n    // wrap in a function to ensure proper level var is passed\n    (function(level) {\n      // create function for this level\n      forge.log[level] = function(category, message/*, args...*/) {\n        // convert arguments to real array, remove category and message\n        var args = Array.prototype.slice.call(arguments).slice(2);\n        // create message object\n        // Note: interpolation and standard formatting is done lazily\n        var msg = {\n          timestamp: new Date(),\n          level: level,\n          category: category,\n          message: message,\n          'arguments': args\n          /*standard*/\n          /*full*/\n          /*fullMessage*/\n        };\n        // process this message\n        forge.log.logMessage(msg);\n      };\n    })(levels[i]);\n  }\n}\n\n/**\n * Creates a new logger with specified custom logging function.\n *\n * The logging function has a signature of:\n *   function(logger, message)\n * logger: current logger\n * message: object:\n *   level: level id\n *   category: category\n *   message: string message\n *   arguments: Array of extra arguments\n *   fullMessage: interpolated message and arguments if INTERPOLATE flag set\n *\n * @param logFunction a logging function which takes a log message object\n *          as a parameter.\n *\n * @return a logger object.\n */\nforge.log.makeLogger = function(logFunction) {\n  var logger = {\n    flags: 0,\n    f: logFunction\n  };\n  forge.log.setLevel(logger, 'none');\n  return logger;\n};\n\n/**\n * Sets the current log level on a logger.\n *\n * @param logger the target logger.\n * @param level the new maximum log level as a string.\n *\n * @return true if set, false if not.\n */\nforge.log.setLevel = function(logger, level) {\n  var rval = false;\n  if(logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {\n    for(var i = 0; i < forge.log.levels.length; ++i) {\n      var aValidLevel = forge.log.levels[i];\n      if(level == aValidLevel) {\n        // set level\n        logger.level = level;\n        rval = true;\n        break;\n      }\n    }\n  }\n\n  return rval;\n};\n\n/**\n * Locks the log level at its current value.\n *\n * @param logger the target logger.\n * @param lock boolean lock value, default to true.\n */\nforge.log.lock = function(logger, lock) {\n  if(typeof lock === 'undefined' || lock) {\n    logger.flags |= forge.log.LEVEL_LOCKED;\n  } else {\n    logger.flags &= ~forge.log.LEVEL_LOCKED;\n  }\n};\n\n/**\n * Adds a logger.\n *\n * @param logger the logger object.\n */\nforge.log.addLogger = function(logger) {\n  sLoggers.push(logger);\n};\n\n// setup the console logger if possible, else create fake console.log\nif(typeof(console) !== 'undefined' && 'log' in console) {\n  var logger;\n  if(console.error && console.warn && console.info && console.debug) {\n    // looks like Firebug-style logging is available\n    // level handlers map\n    var levelHandlers = {\n      error: console.error,\n      warning: console.warn,\n      info: console.info,\n      debug: console.debug,\n      verbose: console.debug\n    };\n    var f = function(logger, message) {\n      forge.log.prepareStandard(message);\n      var handler = levelHandlers[message.level];\n      // prepend standard message and concat args\n      var args = [message.standard];\n      args = args.concat(message['arguments'].slice());\n      // apply to low-level console function\n      handler.apply(console, args);\n    };\n    logger = forge.log.makeLogger(f);\n  } else {\n    // only appear to have basic console.log\n    var f = function(logger, message) {\n      forge.log.prepareStandardFull(message);\n      console.log(message.standardFull);\n    };\n    logger = forge.log.makeLogger(f);\n  }\n  forge.log.setLevel(logger, 'debug');\n  forge.log.addLogger(logger);\n  sConsoleLogger = logger;\n} else {\n  // define fake console.log to avoid potential script errors on\n  // browsers that do not have console logging\n  console = {\n    log: function() {}\n  };\n}\n\n/*\n * Check for logging control query vars in current URL.\n *\n * console.level=<level-name>\n * Set's the console log level by name.  Useful to override defaults and\n * allow more verbose logging before a user config is loaded.\n *\n * console.lock=<true|false>\n * Lock the console log level at whatever level it is set at.  This is run\n * after console.level is processed.  Useful to force a level of verbosity\n * that could otherwise be limited by a user config.\n */\nif(sConsoleLogger !== null &&\n  typeof window !== 'undefined' && window.location\n) {\n  var query = new URL(window.location.href).searchParams;\n  if(query.has('console.level')) {\n    // set with last value\n    forge.log.setLevel(\n      sConsoleLogger, query.get('console.level').slice(-1)[0]);\n  }\n  if(query.has('console.lock')) {\n    // set with last value\n    var lock = query.get('console.lock').slice(-1)[0];\n    if(lock == 'true') {\n      forge.log.lock(sConsoleLogger);\n    }\n  }\n}\n\n// provide public access to console logger\nforge.log.consoleLogger = sConsoleLogger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}