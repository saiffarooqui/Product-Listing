{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compute_alpha = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar compute_alpha;\n\n(function (compute_alpha) {\n  /**\n   * Compute Engine API\n   *\n   * Creates and runs virtual machines on Google Cloud Platform.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const compute = google.compute('alpha');\n   * ```\n   */\n  class Compute {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n      this.addresses = new Resource$Addresses(this.context);\n      this.autoscalers = new Resource$Autoscalers(this.context);\n      this.backendBuckets = new Resource$Backendbuckets(this.context);\n      this.backendServices = new Resource$Backendservices(this.context);\n      this.disks = new Resource$Disks(this.context);\n      this.diskTypes = new Resource$Disktypes(this.context);\n      this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n      this.firewallPolicies = new Resource$Firewallpolicies(this.context);\n      this.firewalls = new Resource$Firewalls(this.context);\n      this.forwardingRules = new Resource$Forwardingrules(this.context);\n      this.futureReservations = new Resource$Futurereservations(this.context);\n      this.globalAddresses = new Resource$Globaladdresses(this.context);\n      this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n      this.globalNetworkEndpointGroups = new Resource$Globalnetworkendpointgroups(this.context);\n      this.globalOperations = new Resource$Globaloperations(this.context);\n      this.globalOrganizationOperations = new Resource$Globalorganizationoperations(this.context);\n      this.globalPublicDelegatedPrefixes = new Resource$Globalpublicdelegatedprefixes(this.context);\n      this.healthChecks = new Resource$Healthchecks(this.context);\n      this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n      this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n      this.imageFamilyViews = new Resource$Imagefamilyviews(this.context);\n      this.images = new Resource$Images(this.context);\n      this.instanceGroupManagerResizeRequests = new Resource$Instancegroupmanagerresizerequests(this.context);\n      this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n      this.instanceGroups = new Resource$Instancegroups(this.context);\n      this.instances = new Resource$Instances(this.context);\n      this.instanceTemplates = new Resource$Instancetemplates(this.context);\n      this.instantSnapshots = new Resource$Instantsnapshots(this.context);\n      this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n      this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n      this.interconnectRemoteLocations = new Resource$Interconnectremotelocations(this.context);\n      this.interconnects = new Resource$Interconnects(this.context);\n      this.licenseCodes = new Resource$Licensecodes(this.context);\n      this.licenses = new Resource$Licenses(this.context);\n      this.machineImages = new Resource$Machineimages(this.context);\n      this.machineTypes = new Resource$Machinetypes(this.context);\n      this.networkEdgeSecurityServices = new Resource$Networkedgesecurityservices(this.context);\n      this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n      this.networkFirewallPolicies = new Resource$Networkfirewallpolicies(this.context);\n      this.networks = new Resource$Networks(this.context);\n      this.nodeGroups = new Resource$Nodegroups(this.context);\n      this.nodeTemplates = new Resource$Nodetemplates(this.context);\n      this.nodeTypes = new Resource$Nodetypes(this.context);\n      this.organizationSecurityPolicies = new Resource$Organizationsecuritypolicies(this.context);\n      this.packetMirrorings = new Resource$Packetmirrorings(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.publicAdvertisedPrefixes = new Resource$Publicadvertisedprefixes(this.context);\n      this.publicDelegatedPrefixes = new Resource$Publicdelegatedprefixes(this.context);\n      this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n      this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n      this.regionCommitments = new Resource$Regioncommitments(this.context);\n      this.regionDisks = new Resource$Regiondisks(this.context);\n      this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n      this.regionHealthChecks = new Resource$Regionhealthchecks(this.context);\n      this.regionHealthCheckServices = new Resource$Regionhealthcheckservices(this.context);\n      this.regionInstanceGroupManagers = new Resource$Regioninstancegroupmanagers(this.context);\n      this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n      this.regionInstances = new Resource$Regioninstances(this.context);\n      this.regionInstanceTemplates = new Resource$Regioninstancetemplates(this.context);\n      this.regionInstantSnapshots = new Resource$Regioninstantsnapshots(this.context);\n      this.regionNetworkEndpointGroups = new Resource$Regionnetworkendpointgroups(this.context);\n      this.regionNetworkFirewallPolicies = new Resource$Regionnetworkfirewallpolicies(this.context);\n      this.regionNotificationEndpoints = new Resource$Regionnotificationendpoints(this.context);\n      this.regionOperations = new Resource$Regionoperations(this.context);\n      this.regions = new Resource$Regions(this.context);\n      this.regionSecurityPolicies = new Resource$Regionsecuritypolicies(this.context);\n      this.regionSslCertificates = new Resource$Regionsslcertificates(this.context);\n      this.regionSslPolicies = new Resource$Regionsslpolicies(this.context);\n      this.regionTargetHttpProxies = new Resource$Regiontargethttpproxies(this.context);\n      this.regionTargetHttpsProxies = new Resource$Regiontargethttpsproxies(this.context);\n      this.regionTargetTcpProxies = new Resource$Regiontargettcpproxies(this.context);\n      this.regionUrlMaps = new Resource$Regionurlmaps(this.context);\n      this.reservations = new Resource$Reservations(this.context);\n      this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n      this.routers = new Resource$Routers(this.context);\n      this.routes = new Resource$Routes(this.context);\n      this.securityPolicies = new Resource$Securitypolicies(this.context);\n      this.serviceAttachments = new Resource$Serviceattachments(this.context);\n      this.snapshots = new Resource$Snapshots(this.context);\n      this.sslCertificates = new Resource$Sslcertificates(this.context);\n      this.sslPolicies = new Resource$Sslpolicies(this.context);\n      this.subnetworks = new Resource$Subnetworks(this.context);\n      this.targetGrpcProxies = new Resource$Targetgrpcproxies(this.context);\n      this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n      this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n      this.targetInstances = new Resource$Targetinstances(this.context);\n      this.targetPools = new Resource$Targetpools(this.context);\n      this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n      this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n      this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n      this.urlMaps = new Resource$Urlmaps(this.context);\n      this.vpnGateways = new Resource$Vpngateways(this.context);\n      this.vpnTunnels = new Resource$Vpntunnels(this.context);\n      this.zoneOperations = new Resource$Zoneoperations(this.context);\n      this.zoneQueuedResources = new Resource$Zonequeuedresources(this.context);\n      this.zones = new Resource$Zones(this.context);\n    }\n\n  }\n\n  compute_alpha.Compute = Compute;\n\n  class Resource$Acceleratortypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'acceleratorType'],\n        pathParams: ['acceleratorType', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Acceleratortypes = Resource$Acceleratortypes;\n\n  class Resource$Addresses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'address'],\n        pathParams: ['address', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'address'],\n        pathParams: ['address', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'address'],\n        pathParams: ['address', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Addresses = Resource$Addresses;\n\n  class Resource$Autoscalers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Autoscalers = Resource$Autoscalers;\n\n  class Resource$Backendbuckets {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket', 'keyName'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setEdgeSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/setEdgeSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Backendbuckets = Resource$Backendbuckets;\n\n  class Resource$Backendservices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService', 'keyName'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getHealth(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setEdgeSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/setEdgeSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Backendservices = Resource$Backendservices;\n\n  class Resource$Disks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    startAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/startAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    stopAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/stopAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    stopGroupAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/stopGroupAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Disks = Resource$Disks;\n\n  class Resource$Disktypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'diskType'],\n        pathParams: ['diskType', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Disktypes = Resource$Disktypes;\n\n  class Resource$Externalvpngateways {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'externalVpnGateway'],\n        pathParams: ['externalVpnGateway', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'externalVpnGateway'],\n        pathParams: ['externalVpnGateway', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Externalvpngateways = Resource$Externalvpngateways;\n\n  class Resource$Firewallpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Firewallpolicies = Resource$Firewallpolicies;\n\n  class Resource$Firewalls {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Firewalls = Resource$Firewalls;\n\n  class Resource$Forwardingrules {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setTarget(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Forwardingrules = Resource$Forwardingrules;\n\n  class Resource$Futurereservations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/futureReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/futureReservations/{futureReservation}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'futureReservation'],\n        pathParams: ['futureReservation', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/futureReservations/{futureReservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'futureReservation'],\n        pathParams: ['futureReservation', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/futureReservations/{futureReservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'futureReservation'],\n        pathParams: ['futureReservation', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/futureReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/futureReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/futureReservations/{futureReservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'futureReservation'],\n        pathParams: ['futureReservation', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Futurereservations = Resource$Futurereservations;\n\n  class Resource$Globaladdresses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'address'],\n        pathParams: ['address', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'address'],\n        pathParams: ['address', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getOwnerInstance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/getOwnerInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{address}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'address'],\n        pathParams: ['address', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globaladdresses = Resource$Globaladdresses;\n\n  class Resource$Globalforwardingrules {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setTarget(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n\n  class Resource$Globalnetworkendpointgroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globalnetworkendpointgroups = Resource$Globalnetworkendpointgroups;\n\n  class Resource$Globaloperations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globaloperations = Resource$Globaloperations;\n\n  class Resource$Globalorganizationoperations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['operation'],\n        pathParams: ['operation'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['operation'],\n        pathParams: ['operation'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globalorganizationoperations = Resource$Globalorganizationoperations;\n\n  class Resource$Globalpublicdelegatedprefixes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globalpublicdelegatedprefixes = Resource$Globalpublicdelegatedprefixes;\n\n  class Resource$Healthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Healthchecks = Resource$Healthchecks;\n\n  class Resource$Httphealthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Httphealthchecks = Resource$Httphealthchecks;\n\n  class Resource$Httpshealthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n\n  class Resource$Imagefamilyviews {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/imageFamilyViews/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'family'],\n        pathParams: ['family', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Imagefamilyviews = Resource$Imagefamilyviews;\n\n  class Resource$Images {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deprecate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'family'],\n        pathParams: ['family', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Images = Resource$Images;\n\n  class Resource$Instancegroupmanagerresizerequests {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager', 'resizeRequest'],\n        pathParams: ['instanceGroupManager', 'project', 'resizeRequest', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager', 'resizeRequest'],\n        pathParams: ['instanceGroupManager', 'project', 'resizeRequest', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Instancegroupmanagerresizerequests = Resource$Instancegroupmanagerresizerequests;\n\n  class Resource$Instancegroupmanagers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    createInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listErrors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resumeInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resumeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    startInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/startInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    stopInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/stopInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    suspendInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/suspendInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n\n  class Resource$Instancegroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Instancegroups = Resource$Instancegroups;\n\n  class Resource$Instances {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getScreenshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/screenshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    performMaintenance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/performMaintenance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    reset(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    sendDiagnosticInterrupt(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/sendDiagnosticInterrupt').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setName(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setName').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setTags(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    start(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    stop(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    suspend(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/suspend').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Instances = Resource$Instances;\n\n  class Resource$Instancetemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instanceTemplate'],\n        pathParams: ['instanceTemplate', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instanceTemplate'],\n        pathParams: ['instanceTemplate', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Instancetemplates = Resource$Instancetemplates;\n\n  class Resource$Instantsnapshots {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instantSnapshot'],\n        pathParams: ['instantSnapshot', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    export(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instantSnapshot'],\n        pathParams: ['instantSnapshot', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instantSnapshot'],\n        pathParams: ['instantSnapshot', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Instantsnapshots = Resource$Instantsnapshots;\n\n  class Resource$Interconnectattachments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'interconnectAttachment'],\n        pathParams: ['interconnectAttachment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'interconnectAttachment'],\n        pathParams: ['interconnectAttachment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'interconnectAttachment'],\n        pathParams: ['interconnectAttachment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Interconnectattachments = Resource$Interconnectattachments;\n\n  class Resource$Interconnectlocations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnectLocation'],\n        pathParams: ['interconnectLocation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectLocations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Interconnectlocations = Resource$Interconnectlocations;\n\n  class Resource$Interconnectremotelocations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectRemoteLocations/{interconnectRemoteLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnectRemoteLocation'],\n        pathParams: ['interconnectRemoteLocation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectRemoteLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectRemoteLocations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Interconnectremotelocations = Resource$Interconnectremotelocations;\n\n  class Resource$Interconnects {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getMacsecConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}/getMacsecConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Interconnects = Resource$Interconnects;\n\n  class Resource$Licensecodes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'licenseCode'],\n        pathParams: ['licenseCode', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Licensecodes = Resource$Licensecodes;\n\n  class Resource$Licenses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'license'],\n        pathParams: ['license', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'license'],\n        pathParams: ['license', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Licenses = Resource$Licenses;\n\n  class Resource$Machineimages {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'machineImage'],\n        pathParams: ['machineImage', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'machineImage'],\n        pathParams: ['machineImage', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Machineimages = Resource$Machineimages;\n\n  class Resource$Machinetypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'machineType'],\n        pathParams: ['machineType', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Machinetypes = Resource$Machinetypes;\n\n  class Resource$Networkedgesecurityservices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/networkEdgeSecurityServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n        pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n        pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEdgeSecurityServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n        pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Networkedgesecurityservices = Resource$Networkedgesecurityservices;\n\n  class Resource$Networkendpointgroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n\n  class Resource$Networkfirewallpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Networkfirewallpolicies = Resource$Networkfirewallpolicies;\n\n  class Resource$Networks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addPeering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listIpAddresses(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/listIpAddresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listIpOwners(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/listIpOwners').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/listPeeringRoutes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removePeering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/updatePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Networks = Resource$Networks;\n\n  class Resource$Nodegroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addNodes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'initialNodeCount'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listNodes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Nodegroups = Resource$Nodegroups;\n\n  class Resource$Nodetemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'nodeTemplate'],\n        pathParams: ['nodeTemplate', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'nodeTemplate'],\n        pathParams: ['nodeTemplate', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Nodetemplates = Resource$Nodetemplates;\n\n  class Resource$Nodetypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeType'],\n        pathParams: ['nodeType', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Nodetypes = Resource$Nodetypes;\n\n  class Resource$Organizationsecuritypolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    copyRules(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/copyRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Organizationsecuritypolicies = Resource$Organizationsecuritypolicies;\n\n  class Resource$Packetmirrorings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'packetMirroring'],\n        pathParams: ['packetMirroring', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'packetMirroring'],\n        pathParams: ['packetMirroring', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'packetMirroring'],\n        pathParams: ['packetMirroring', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Packetmirrorings = Resource$Packetmirrorings;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n    }\n\n    disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setDefaultServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/setDefaultServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Projects = Resource$Projects;\n\n  class Resource$Publicadvertisedprefixes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    announce(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}/announce').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    withdraw(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}/withdraw').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Publicadvertisedprefixes = Resource$Publicadvertisedprefixes;\n\n  class Resource$Publicdelegatedprefixes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    announce(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/announce').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    withdraw(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/withdraw').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Publicdelegatedprefixes = Resource$Publicdelegatedprefixes;\n\n  class Resource$Regionautoscalers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionautoscalers = Resource$Regionautoscalers;\n\n  class Resource$Regionbackendservices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getHealth(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionbackendservices = Resource$Regionbackendservices;\n\n  class Resource$Regioncommitments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'commitment'],\n        pathParams: ['commitment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'commitment'],\n        pathParams: ['commitment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'commitment'],\n        pathParams: ['commitment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regioncommitments = Resource$Regioncommitments;\n\n  class Resource$Regiondisks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    startAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/startAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    stopAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/stopAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    stopGroupAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/stopGroupAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regiondisks = Resource$Regiondisks;\n\n  class Resource$Regiondisktypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'diskType'],\n        pathParams: ['diskType', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regiondisktypes = Resource$Regiondisktypes;\n\n  class Resource$Regionhealthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionhealthchecks = Resource$Regionhealthchecks;\n\n  class Resource$Regionhealthcheckservices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheckService'],\n        pathParams: ['healthCheckService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheckService'],\n        pathParams: ['healthCheckService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheckService'],\n        pathParams: ['healthCheckService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionhealthcheckservices = Resource$Regionhealthcheckservices;\n\n  class Resource$Regioninstancegroupmanagers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    createInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listErrors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resumeInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resumeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    startInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/startInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    stopInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/stopInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    suspendInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/suspendInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n\n  class Resource$Regioninstancegroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n\n  class Resource$Regioninstances {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instances/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regioninstances = Resource$Regioninstances;\n\n  class Resource$Regioninstancetemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceTemplate'],\n        pathParams: ['instanceTemplate', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceTemplate'],\n        pathParams: ['instanceTemplate', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regioninstancetemplates = Resource$Regioninstancetemplates;\n\n  class Resource$Regioninstantsnapshots {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instantSnapshot'],\n        pathParams: ['instantSnapshot', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    export(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instantSnapshot'],\n        pathParams: ['instantSnapshot', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instantSnapshot'],\n        pathParams: ['instantSnapshot', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regioninstantsnapshots = Resource$Regioninstantsnapshots;\n\n  class Resource$Regionnetworkendpointgroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionnetworkendpointgroups = Resource$Regionnetworkendpointgroups;\n\n  class Resource$Regionnetworkfirewallpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'network'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionnetworkfirewallpolicies = Resource$Regionnetworkfirewallpolicies;\n\n  class Resource$Regionnotificationendpoints {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'notificationEndpoint'],\n        pathParams: ['notificationEndpoint', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'notificationEndpoint'],\n        pathParams: ['notificationEndpoint', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionnotificationendpoints = Resource$Regionnotificationendpoints;\n\n  class Resource$Regionoperations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'operation'],\n        pathParams: ['operation', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'operation'],\n        pathParams: ['operation', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'operation'],\n        pathParams: ['operation', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionoperations = Resource$Regionoperations;\n\n  class Resource$Regions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regions = Resource$Regions;\n\n  class Resource$Regionsecuritypolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'securityPolicy'],\n        pathParams: ['project', 'region', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'securityPolicy'],\n        pathParams: ['project', 'region', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'securityPolicy'],\n        pathParams: ['project', 'region', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionsecuritypolicies = Resource$Regionsecuritypolicies;\n\n  class Resource$Regionsslcertificates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslCertificate'],\n        pathParams: ['project', 'region', 'sslCertificate'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslCertificate'],\n        pathParams: ['project', 'region', 'sslCertificate'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionsslcertificates = Resource$Regionsslcertificates;\n\n  class Resource$Regionsslpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslPolicy'],\n        pathParams: ['project', 'region', 'sslPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslPolicy'],\n        pathParams: ['project', 'region', 'sslPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslPolicy'],\n        pathParams: ['project', 'region', 'sslPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionsslpolicies = Resource$Regionsslpolicies;\n\n  class Resource$Regiontargethttpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpProxy'],\n        pathParams: ['project', 'region', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpProxy'],\n        pathParams: ['project', 'region', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpProxy'],\n        pathParams: ['project', 'region', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regiontargethttpproxies = Resource$Regiontargethttpproxies;\n\n  class Resource$Regiontargethttpsproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regiontargethttpsproxies = Resource$Regiontargethttpsproxies;\n\n  class Resource$Regiontargettcpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetTcpProxy'],\n        pathParams: ['project', 'region', 'targetTcpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetTcpProxy'],\n        pathParams: ['project', 'region', 'targetTcpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regiontargettcpproxies = Resource$Regiontargettcpproxies;\n\n  class Resource$Regionurlmaps {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionurlmaps = Resource$Regionurlmaps;\n\n  class Resource$Reservations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Reservations = Resource$Reservations;\n\n  class Resource$Resourcepolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resourcePolicy'],\n        pathParams: ['project', 'region', 'resourcePolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resourcePolicy'],\n        pathParams: ['project', 'region', 'resourcePolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Resourcepolicies = Resource$Resourcepolicies;\n\n  class Resource$Routers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    preview(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Routers = Resource$Routers;\n\n  class Resource$Routes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'route'],\n        pathParams: ['project', 'route'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'route'],\n        pathParams: ['project', 'route'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/routes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Routes = Resource$Routes;\n\n  class Resource$Securitypolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Securitypolicies = Resource$Securitypolicies;\n\n  class Resource$Serviceattachments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'serviceAttachment'],\n        pathParams: ['project', 'region', 'serviceAttachment'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'serviceAttachment'],\n        pathParams: ['project', 'region', 'serviceAttachment'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'serviceAttachment'],\n        pathParams: ['project', 'region', 'serviceAttachment'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Serviceattachments = Resource$Serviceattachments;\n\n  class Resource$Snapshots {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'snapshot'],\n        pathParams: ['project', 'snapshot'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'snapshot'],\n        pathParams: ['project', 'snapshot'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Snapshots = Resource$Snapshots;\n\n  class Resource$Sslcertificates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslCertificate'],\n        pathParams: ['project', 'sslCertificate'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslCertificate'],\n        pathParams: ['project', 'sslCertificate'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Sslcertificates = Resource$Sslcertificates;\n\n  class Resource$Sslpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslPolicy'],\n        pathParams: ['project', 'sslPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslPolicy'],\n        pathParams: ['project', 'sslPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslPolicy'],\n        pathParams: ['project', 'sslPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Sslpolicies = Resource$Sslpolicies;\n\n  class Resource$Subnetworks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listUsable(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Subnetworks = Resource$Subnetworks;\n\n  class Resource$Targetgrpcproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetGrpcProxy'],\n        pathParams: ['project', 'targetGrpcProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetGrpcProxy'],\n        pathParams: ['project', 'targetGrpcProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetGrpcProxy'],\n        pathParams: ['project', 'targetGrpcProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetGrpcProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targetgrpcproxies = Resource$Targetgrpcproxies;\n\n  class Resource$Targethttpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targethttpproxies = Resource$Targethttpproxies;\n\n  class Resource$Targethttpsproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setCertificateMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setCertificateMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n\n  class Resource$Targetinstances {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'targetInstance'],\n        pathParams: ['project', 'targetInstance', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'targetInstance'],\n        pathParams: ['project', 'targetInstance', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targetinstances = Resource$Targetinstances;\n\n  class Resource$Targetpools {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    addInstance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getHealth(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setBackup(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targetpools = Resource$Targetpools;\n\n  class Resource$Targetsslproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setCertificateMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setCertificateMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targetsslproxies = Resource$Targetsslproxies;\n\n  class Resource$Targettcpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targettcpproxies = Resource$Targettcpproxies;\n\n  class Resource$Targetvpngateways {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetVpnGateway'],\n        pathParams: ['project', 'region', 'targetVpnGateway'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetVpnGateway'],\n        pathParams: ['project', 'region', 'targetVpnGateway'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targetvpngateways = Resource$Targetvpngateways;\n\n  class Resource$Urlmaps {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Urlmaps = Resource$Urlmaps;\n\n  class Resource$Vpngateways {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnGateway'],\n        pathParams: ['project', 'region', 'vpnGateway'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnGateway'],\n        pathParams: ['project', 'region', 'vpnGateway'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getStatus(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnGateway'],\n        pathParams: ['project', 'region', 'vpnGateway'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Vpngateways = Resource$Vpngateways;\n\n  class Resource$Vpntunnels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnTunnel'],\n        pathParams: ['project', 'region', 'vpnTunnel'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnTunnel'],\n        pathParams: ['project', 'region', 'vpnTunnel'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Vpntunnels = Resource$Vpntunnels;\n\n  class Resource$Zoneoperations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'operation'],\n        pathParams: ['operation', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'operation'],\n        pathParams: ['operation', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'operation'],\n        pathParams: ['operation', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Zoneoperations = Resource$Zoneoperations;\n\n  class Resource$Zonequeuedresources {\n    constructor(context) {\n      this.context = context;\n    }\n\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/queuedResources/{queuedResource}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'queuedResource'],\n        pathParams: ['project', 'queuedResource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/queuedResources/{queuedResource}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'queuedResource'],\n        pathParams: ['project', 'queuedResource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/queuedResources/{queuedResource}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'queuedResource'],\n        pathParams: ['project', 'queuedResource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/queuedResources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/queuedResources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Zonequeuedresources = Resource$Zonequeuedresources;\n\n  class Resource$Zones {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Zones = Resource$Zones;\n})(compute_alpha = exports.compute_alpha || (exports.compute_alpha = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","compute_alpha","googleapis_common_1","require","Compute","constructor","options","google","context","_options","acceleratorTypes","Resource$Acceleratortypes","addresses","Resource$Addresses","autoscalers","Resource$Autoscalers","backendBuckets","Resource$Backendbuckets","backendServices","Resource$Backendservices","disks","Resource$Disks","diskTypes","Resource$Disktypes","externalVpnGateways","Resource$Externalvpngateways","firewallPolicies","Resource$Firewallpolicies","firewalls","Resource$Firewalls","forwardingRules","Resource$Forwardingrules","futureReservations","Resource$Futurereservations","globalAddresses","Resource$Globaladdresses","globalForwardingRules","Resource$Globalforwardingrules","globalNetworkEndpointGroups","Resource$Globalnetworkendpointgroups","globalOperations","Resource$Globaloperations","globalOrganizationOperations","Resource$Globalorganizationoperations","globalPublicDelegatedPrefixes","Resource$Globalpublicdelegatedprefixes","healthChecks","Resource$Healthchecks","httpHealthChecks","Resource$Httphealthchecks","httpsHealthChecks","Resource$Httpshealthchecks","imageFamilyViews","Resource$Imagefamilyviews","images","Resource$Images","instanceGroupManagerResizeRequests","Resource$Instancegroupmanagerresizerequests","instanceGroupManagers","Resource$Instancegroupmanagers","instanceGroups","Resource$Instancegroups","instances","Resource$Instances","instanceTemplates","Resource$Instancetemplates","instantSnapshots","Resource$Instantsnapshots","interconnectAttachments","Resource$Interconnectattachments","interconnectLocations","Resource$Interconnectlocations","interconnectRemoteLocations","Resource$Interconnectremotelocations","interconnects","Resource$Interconnects","licenseCodes","Resource$Licensecodes","licenses","Resource$Licenses","machineImages","Resource$Machineimages","machineTypes","Resource$Machinetypes","networkEdgeSecurityServices","Resource$Networkedgesecurityservices","networkEndpointGroups","Resource$Networkendpointgroups","networkFirewallPolicies","Resource$Networkfirewallpolicies","networks","Resource$Networks","nodeGroups","Resource$Nodegroups","nodeTemplates","Resource$Nodetemplates","nodeTypes","Resource$Nodetypes","organizationSecurityPolicies","Resource$Organizationsecuritypolicies","packetMirrorings","Resource$Packetmirrorings","projects","Resource$Projects","publicAdvertisedPrefixes","Resource$Publicadvertisedprefixes","publicDelegatedPrefixes","Resource$Publicdelegatedprefixes","regionAutoscalers","Resource$Regionautoscalers","regionBackendServices","Resource$Regionbackendservices","regionCommitments","Resource$Regioncommitments","regionDisks","Resource$Regiondisks","regionDiskTypes","Resource$Regiondisktypes","regionHealthChecks","Resource$Regionhealthchecks","regionHealthCheckServices","Resource$Regionhealthcheckservices","regionInstanceGroupManagers","Resource$Regioninstancegroupmanagers","regionInstanceGroups","Resource$Regioninstancegroups","regionInstances","Resource$Regioninstances","regionInstanceTemplates","Resource$Regioninstancetemplates","regionInstantSnapshots","Resource$Regioninstantsnapshots","regionNetworkEndpointGroups","Resource$Regionnetworkendpointgroups","regionNetworkFirewallPolicies","Resource$Regionnetworkfirewallpolicies","regionNotificationEndpoints","Resource$Regionnotificationendpoints","regionOperations","Resource$Regionoperations","regions","Resource$Regions","regionSecurityPolicies","Resource$Regionsecuritypolicies","regionSslCertificates","Resource$Regionsslcertificates","regionSslPolicies","Resource$Regionsslpolicies","regionTargetHttpProxies","Resource$Regiontargethttpproxies","regionTargetHttpsProxies","Resource$Regiontargethttpsproxies","regionTargetTcpProxies","Resource$Regiontargettcpproxies","regionUrlMaps","Resource$Regionurlmaps","reservations","Resource$Reservations","resourcePolicies","Resource$Resourcepolicies","routers","Resource$Routers","routes","Resource$Routes","securityPolicies","Resource$Securitypolicies","serviceAttachments","Resource$Serviceattachments","snapshots","Resource$Snapshots","sslCertificates","Resource$Sslcertificates","sslPolicies","Resource$Sslpolicies","subnetworks","Resource$Subnetworks","targetGrpcProxies","Resource$Targetgrpcproxies","targetHttpProxies","Resource$Targethttpproxies","targetHttpsProxies","Resource$Targethttpsproxies","targetInstances","Resource$Targetinstances","targetPools","Resource$Targetpools","targetSslProxies","Resource$Targetsslproxies","targetTcpProxies","Resource$Targettcpproxies","targetVpnGateways","Resource$Targetvpngateways","urlMaps","Resource$Urlmaps","vpnGateways","Resource$Vpngateways","vpnTunnels","Resource$Vpntunnels","zoneOperations","Resource$Zoneoperations","zoneQueuedResources","Resource$Zonequeuedresources","zones","Resource$Zones","aggregatedList","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","list","delete","insert","move","setLabels","testIamPermissions","patch","update","addSignedUrlKey","deleteSignedUrlKey","getIamPolicy","setEdgeSecurityPolicy","setIamPolicy","getHealth","setSecurityPolicy","addResourcePolicies","createSnapshot","removeResourcePolicies","resize","startAsyncReplication","stopAsyncReplication","stopGroupAsyncReplication","addAssociation","addRule","cloneRules","getAssociation","getRule","listAssociations","patchRule","removeAssociation","removeRule","setTarget","cancel","getOwnerInstance","attachNetworkEndpoints","detachNetworkEndpoints","listNetworkEndpoints","wait","deprecate","getFromFamily","abandonInstances","applyUpdatesToInstances","createInstances","deleteInstances","deletePerInstanceConfigs","listErrors","listManagedInstances","listPerInstanceConfigs","patchPerInstanceConfigs","recreateInstances","resizeAdvanced","resumeInstances","setAutoHealingPolicies","setInstanceTemplate","setTargetPools","startInstances","stopInstances","suspendInstances","updatePerInstanceConfigs","addInstances","listInstances","removeInstances","setNamedPorts","addAccessConfig","attachDisk","bulkInsert","deleteAccessConfig","detachDisk","getEffectiveFirewalls","getGuestAttributes","getScreenshot","getSerialPortOutput","getShieldedInstanceIdentity","getShieldedVmIdentity","listReferrers","performMaintenance","reset","resume","sendDiagnosticInterrupt","setDeletionProtection","setDiskAutoDelete","setMachineResources","setMachineType","setMetadata","setMinCpuPlatform","setName","setScheduling","setServiceAccount","setShieldedInstanceIntegrityPolicy","setShieldedVmIntegrityPolicy","setTags","simulateMaintenanceEvent","start","startWithEncryptionKey","stop","suspend","updateAccessConfig","updateDisplayDevice","updateNetworkInterface","updateShieldedInstanceConfig","updateShieldedVmConfig","export","getDiagnostics","getMacsecConfig","addPeering","listIpAddresses","listIpOwners","listPeeringRoutes","removePeering","switchToCustomMode","updatePeering","addNodes","deleteNodes","listNodes","setNodeTemplate","copyRules","disableXpnHost","disableXpnResource","enableXpnHost","enableXpnResource","getXpnHost","getXpnResources","listXpnHosts","moveDisk","moveInstance","setCommonInstanceMetadata","setDefaultNetworkTier","setDefaultServiceAccount","setUsageExportBucket","announce","withdraw","updateReservations","listAvailableFeatures","setUrlMap","setSslCertificates","invalidateCache","validate","getNatMappingInfo","getRouterStatus","preview","listPreconfiguredExpressionSets","expandIpCidrRange","listUsable","setPrivateIpGoogleAccess","setCertificateMap","setQuicOverride","setSslPolicy","addHealthCheck","addInstance","removeHealthCheck","removeInstance","setBackup","setBackendService","setProxyHeader","getStatus"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/compute/alpha.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compute_alpha = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar compute_alpha;\n(function (compute_alpha) {\n    /**\n     * Compute Engine API\n     *\n     * Creates and runs virtual machines on Google Cloud Platform.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const compute = google.compute('alpha');\n     * ```\n     */\n    class Compute {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n            this.addresses = new Resource$Addresses(this.context);\n            this.autoscalers = new Resource$Autoscalers(this.context);\n            this.backendBuckets = new Resource$Backendbuckets(this.context);\n            this.backendServices = new Resource$Backendservices(this.context);\n            this.disks = new Resource$Disks(this.context);\n            this.diskTypes = new Resource$Disktypes(this.context);\n            this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n            this.firewallPolicies = new Resource$Firewallpolicies(this.context);\n            this.firewalls = new Resource$Firewalls(this.context);\n            this.forwardingRules = new Resource$Forwardingrules(this.context);\n            this.futureReservations = new Resource$Futurereservations(this.context);\n            this.globalAddresses = new Resource$Globaladdresses(this.context);\n            this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n            this.globalNetworkEndpointGroups =\n                new Resource$Globalnetworkendpointgroups(this.context);\n            this.globalOperations = new Resource$Globaloperations(this.context);\n            this.globalOrganizationOperations =\n                new Resource$Globalorganizationoperations(this.context);\n            this.globalPublicDelegatedPrefixes =\n                new Resource$Globalpublicdelegatedprefixes(this.context);\n            this.healthChecks = new Resource$Healthchecks(this.context);\n            this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n            this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n            this.imageFamilyViews = new Resource$Imagefamilyviews(this.context);\n            this.images = new Resource$Images(this.context);\n            this.instanceGroupManagerResizeRequests =\n                new Resource$Instancegroupmanagerresizerequests(this.context);\n            this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n            this.instanceGroups = new Resource$Instancegroups(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.instanceTemplates = new Resource$Instancetemplates(this.context);\n            this.instantSnapshots = new Resource$Instantsnapshots(this.context);\n            this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n            this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n            this.interconnectRemoteLocations =\n                new Resource$Interconnectremotelocations(this.context);\n            this.interconnects = new Resource$Interconnects(this.context);\n            this.licenseCodes = new Resource$Licensecodes(this.context);\n            this.licenses = new Resource$Licenses(this.context);\n            this.machineImages = new Resource$Machineimages(this.context);\n            this.machineTypes = new Resource$Machinetypes(this.context);\n            this.networkEdgeSecurityServices =\n                new Resource$Networkedgesecurityservices(this.context);\n            this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n            this.networkFirewallPolicies = new Resource$Networkfirewallpolicies(this.context);\n            this.networks = new Resource$Networks(this.context);\n            this.nodeGroups = new Resource$Nodegroups(this.context);\n            this.nodeTemplates = new Resource$Nodetemplates(this.context);\n            this.nodeTypes = new Resource$Nodetypes(this.context);\n            this.organizationSecurityPolicies =\n                new Resource$Organizationsecuritypolicies(this.context);\n            this.packetMirrorings = new Resource$Packetmirrorings(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.publicAdvertisedPrefixes = new Resource$Publicadvertisedprefixes(this.context);\n            this.publicDelegatedPrefixes = new Resource$Publicdelegatedprefixes(this.context);\n            this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n            this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n            this.regionCommitments = new Resource$Regioncommitments(this.context);\n            this.regionDisks = new Resource$Regiondisks(this.context);\n            this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n            this.regionHealthChecks = new Resource$Regionhealthchecks(this.context);\n            this.regionHealthCheckServices = new Resource$Regionhealthcheckservices(this.context);\n            this.regionInstanceGroupManagers =\n                new Resource$Regioninstancegroupmanagers(this.context);\n            this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n            this.regionInstances = new Resource$Regioninstances(this.context);\n            this.regionInstanceTemplates = new Resource$Regioninstancetemplates(this.context);\n            this.regionInstantSnapshots = new Resource$Regioninstantsnapshots(this.context);\n            this.regionNetworkEndpointGroups =\n                new Resource$Regionnetworkendpointgroups(this.context);\n            this.regionNetworkFirewallPolicies =\n                new Resource$Regionnetworkfirewallpolicies(this.context);\n            this.regionNotificationEndpoints =\n                new Resource$Regionnotificationendpoints(this.context);\n            this.regionOperations = new Resource$Regionoperations(this.context);\n            this.regions = new Resource$Regions(this.context);\n            this.regionSecurityPolicies = new Resource$Regionsecuritypolicies(this.context);\n            this.regionSslCertificates = new Resource$Regionsslcertificates(this.context);\n            this.regionSslPolicies = new Resource$Regionsslpolicies(this.context);\n            this.regionTargetHttpProxies = new Resource$Regiontargethttpproxies(this.context);\n            this.regionTargetHttpsProxies = new Resource$Regiontargethttpsproxies(this.context);\n            this.regionTargetTcpProxies = new Resource$Regiontargettcpproxies(this.context);\n            this.regionUrlMaps = new Resource$Regionurlmaps(this.context);\n            this.reservations = new Resource$Reservations(this.context);\n            this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n            this.routers = new Resource$Routers(this.context);\n            this.routes = new Resource$Routes(this.context);\n            this.securityPolicies = new Resource$Securitypolicies(this.context);\n            this.serviceAttachments = new Resource$Serviceattachments(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.sslCertificates = new Resource$Sslcertificates(this.context);\n            this.sslPolicies = new Resource$Sslpolicies(this.context);\n            this.subnetworks = new Resource$Subnetworks(this.context);\n            this.targetGrpcProxies = new Resource$Targetgrpcproxies(this.context);\n            this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n            this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n            this.targetInstances = new Resource$Targetinstances(this.context);\n            this.targetPools = new Resource$Targetpools(this.context);\n            this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n            this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n            this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n            this.urlMaps = new Resource$Urlmaps(this.context);\n            this.vpnGateways = new Resource$Vpngateways(this.context);\n            this.vpnTunnels = new Resource$Vpntunnels(this.context);\n            this.zoneOperations = new Resource$Zoneoperations(this.context);\n            this.zoneQueuedResources = new Resource$Zonequeuedresources(this.context);\n            this.zones = new Resource$Zones(this.context);\n        }\n    }\n    compute_alpha.Compute = Compute;\n    class Resource$Acceleratortypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'acceleratorType'],\n                pathParams: ['acceleratorType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Acceleratortypes = Resource$Acceleratortypes;\n    class Resource$Addresses {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Addresses = Resource$Addresses;\n    class Resource$Autoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Autoscalers = Resource$Autoscalers;\n    class Resource$Backendbuckets {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket', 'keyName'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setEdgeSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/setEdgeSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Backendbuckets = Resource$Backendbuckets;\n    class Resource$Backendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService', 'keyName'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setEdgeSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/setEdgeSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Backendservices = Resource$Backendservices;\n    class Resource$Disks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        startAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/startAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/stopAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopGroupAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/stopGroupAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Disks = Resource$Disks;\n    class Resource$Disktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'diskType'],\n                pathParams: ['diskType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Disktypes = Resource$Disktypes;\n    class Resource$Externalvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Externalvpngateways = Resource$Externalvpngateways;\n    class Resource$Firewallpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/locations/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Firewallpolicies = Resource$Firewallpolicies;\n    class Resource$Firewalls {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Firewalls = Resource$Firewalls;\n    class Resource$Forwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Forwardingrules = Resource$Forwardingrules;\n    class Resource$Futurereservations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/futureReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/futureReservations/{futureReservation}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'futureReservation'],\n                pathParams: ['futureReservation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/futureReservations/{futureReservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'futureReservation'],\n                pathParams: ['futureReservation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/futureReservations/{futureReservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'futureReservation'],\n                pathParams: ['futureReservation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/futureReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/futureReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/futureReservations/{futureReservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'futureReservation'],\n                pathParams: ['futureReservation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Futurereservations = Resource$Futurereservations;\n    class Resource$Globaladdresses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getOwnerInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/getOwnerInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{address}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globaladdresses = Resource$Globaladdresses;\n    class Resource$Globalforwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n    class Resource$Globalnetworkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globalnetworkendpointgroups = Resource$Globalnetworkendpointgroups;\n    class Resource$Globaloperations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globaloperations = Resource$Globaloperations;\n    class Resource$Globalorganizationoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/locations/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globalorganizationoperations = Resource$Globalorganizationoperations;\n    class Resource$Globalpublicdelegatedprefixes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globalpublicdelegatedprefixes = Resource$Globalpublicdelegatedprefixes;\n    class Resource$Healthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Healthchecks = Resource$Healthchecks;\n    class Resource$Httphealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Httphealthchecks = Resource$Httphealthchecks;\n    class Resource$Httpshealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n    class Resource$Imagefamilyviews {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/imageFamilyViews/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'family'],\n                pathParams: ['family', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Imagefamilyviews = Resource$Imagefamilyviews;\n    class Resource$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deprecate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'family'],\n                pathParams: ['family', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Images = Resource$Images;\n    class Resource$Instancegroupmanagerresizerequests {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instanceGroupManager',\n                    'resizeRequest',\n                ],\n                pathParams: [\n                    'instanceGroupManager',\n                    'project',\n                    'resizeRequest',\n                    'zone',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instanceGroupManager',\n                    'resizeRequest',\n                ],\n                pathParams: [\n                    'instanceGroupManager',\n                    'project',\n                    'resizeRequest',\n                    'zone',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instancegroupmanagerresizerequests = Resource$Instancegroupmanagerresizerequests;\n    class Resource$Instancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listErrors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resumeInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resumeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        startInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/startInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/stopInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        suspendInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/suspendInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n    class Resource$Instancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instancegroups = Resource$Instancegroups;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instance',\n                    'accessConfig',\n                    'networkInterface',\n                ],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getScreenshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/screenshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        performMaintenance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/performMaintenance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        sendDiagnosticInterrupt(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/sendDiagnosticInterrupt').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instance',\n                    'autoDelete',\n                    'deviceName',\n                ],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setName(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setName').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setTags(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        start(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        suspend(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/suspend').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instances = Resource$Instances;\n    class Resource$Instancetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instancetemplates = Resource$Instancetemplates;\n    class Resource$Instantsnapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instantSnapshot'],\n                pathParams: ['instantSnapshot', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instantSnapshot'],\n                pathParams: ['instantSnapshot', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instantSnapshot'],\n                pathParams: ['instantSnapshot', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instantSnapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instantsnapshots = Resource$Instantsnapshots;\n    class Resource$Interconnectattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Interconnectattachments = Resource$Interconnectattachments;\n    class Resource$Interconnectlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnectLocation'],\n                pathParams: ['interconnectLocation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectLocations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Interconnectlocations = Resource$Interconnectlocations;\n    class Resource$Interconnectremotelocations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectRemoteLocations/{interconnectRemoteLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnectRemoteLocation'],\n                pathParams: ['interconnectRemoteLocation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectRemoteLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectRemoteLocations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Interconnectremotelocations = Resource$Interconnectremotelocations;\n    class Resource$Interconnects {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getMacsecConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}/getMacsecConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Interconnects = Resource$Interconnects;\n    class Resource$Licensecodes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'licenseCode'],\n                pathParams: ['licenseCode', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Licensecodes = Resource$Licensecodes;\n    class Resource$Licenses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Licenses = Resource$Licenses;\n    class Resource$Machineimages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'machineImage'],\n                pathParams: ['machineImage', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'machineImage'],\n                pathParams: ['machineImage', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Machineimages = Resource$Machineimages;\n    class Resource$Machinetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'machineType'],\n                pathParams: ['machineType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Machinetypes = Resource$Machinetypes;\n    class Resource$Networkedgesecurityservices {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/networkEdgeSecurityServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n                pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n                pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEdgeSecurityServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n                pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Networkedgesecurityservices = Resource$Networkedgesecurityservices;\n    class Resource$Networkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n    class Resource$Networkfirewallpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Networkfirewallpolicies = Resource$Networkfirewallpolicies;\n    class Resource$Networks {\n        constructor(context) {\n            this.context = context;\n        }\n        addPeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listIpAddresses(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/listIpAddresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listIpOwners(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/listIpOwners').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/listPeeringRoutes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/updatePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Networks = Resource$Networks;\n    class Resource$Nodegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'initialNodeCount'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Nodegroups = Resource$Nodegroups;\n    class Resource$Nodetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Nodetemplates = Resource$Nodetemplates;\n    class Resource$Nodetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeType'],\n                pathParams: ['nodeType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Nodetypes = Resource$Nodetypes;\n    class Resource$Organizationsecuritypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        copyRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/copyRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/locations/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Organizationsecuritypolicies = Resource$Organizationsecuritypolicies;\n    class Resource$Packetmirrorings {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Packetmirrorings = Resource$Packetmirrorings;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setDefaultServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/setDefaultServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Projects = Resource$Projects;\n    class Resource$Publicadvertisedprefixes {\n        constructor(context) {\n            this.context = context;\n        }\n        announce(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}/announce').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        withdraw(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}/withdraw').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Publicadvertisedprefixes = Resource$Publicadvertisedprefixes;\n    class Resource$Publicdelegatedprefixes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        announce(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/announce').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        withdraw(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/withdraw').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Publicdelegatedprefixes = Resource$Publicdelegatedprefixes;\n    class Resource$Regionautoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionautoscalers = Resource$Regionautoscalers;\n    class Resource$Regionbackendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionbackendservices = Resource$Regionbackendservices;\n    class Resource$Regioncommitments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioncommitments = Resource$Regioncommitments;\n    class Resource$Regiondisks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        startAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/startAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/stopAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopGroupAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/stopGroupAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiondisks = Resource$Regiondisks;\n    class Resource$Regiondisktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'diskType'],\n                pathParams: ['diskType', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiondisktypes = Resource$Regiondisktypes;\n    class Resource$Regionhealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionhealthchecks = Resource$Regionhealthchecks;\n    class Resource$Regionhealthcheckservices {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionhealthcheckservices = Resource$Regionhealthcheckservices;\n    class Resource$Regioninstancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listErrors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resumeInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resumeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        startInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/startInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/stopInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        suspendInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/suspendInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n    class Resource$Regioninstancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n    class Resource$Regioninstances {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instances/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioninstances = Resource$Regioninstances;\n    class Resource$Regioninstancetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioninstancetemplates = Resource$Regioninstancetemplates;\n    class Resource$Regioninstantsnapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instantSnapshot'],\n                pathParams: ['instantSnapshot', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instantSnapshot'],\n                pathParams: ['instantSnapshot', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instantSnapshot'],\n                pathParams: ['instantSnapshot', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instantSnapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioninstantsnapshots = Resource$Regioninstantsnapshots;\n    class Resource$Regionnetworkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionnetworkendpointgroups = Resource$Regionnetworkendpointgroups;\n    class Resource$Regionnetworkfirewallpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'network'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionnetworkfirewallpolicies = Resource$Regionnetworkfirewallpolicies;\n    class Resource$Regionnotificationendpoints {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'notificationEndpoint'],\n                pathParams: ['notificationEndpoint', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'notificationEndpoint'],\n                pathParams: ['notificationEndpoint', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionnotificationendpoints = Resource$Regionnotificationendpoints;\n    class Resource$Regionoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionoperations = Resource$Regionoperations;\n    class Resource$Regions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regions = Resource$Regions;\n    class Resource$Regionsecuritypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'securityPolicy'],\n                pathParams: ['project', 'region', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'securityPolicy'],\n                pathParams: ['project', 'region', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'securityPolicy'],\n                pathParams: ['project', 'region', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionsecuritypolicies = Resource$Regionsecuritypolicies;\n    class Resource$Regionsslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslCertificate'],\n                pathParams: ['project', 'region', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslCertificate'],\n                pathParams: ['project', 'region', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionsslcertificates = Resource$Regionsslcertificates;\n    class Resource$Regionsslpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslPolicy'],\n                pathParams: ['project', 'region', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslPolicy'],\n                pathParams: ['project', 'region', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslPolicy'],\n                pathParams: ['project', 'region', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionsslpolicies = Resource$Regionsslpolicies;\n    class Resource$Regiontargethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiontargethttpproxies = Resource$Regiontargethttpproxies;\n    class Resource$Regiontargethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiontargethttpsproxies = Resource$Regiontargethttpsproxies;\n    class Resource$Regiontargettcpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetTcpProxy'],\n                pathParams: ['project', 'region', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetTcpProxy'],\n                pathParams: ['project', 'region', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiontargettcpproxies = Resource$Regiontargettcpproxies;\n    class Resource$Regionurlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionurlmaps = Resource$Regionurlmaps;\n    class Resource$Reservations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Reservations = Resource$Reservations;\n    class Resource$Resourcepolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Resourcepolicies = Resource$Resourcepolicies;\n    class Resource$Routers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        preview(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Routers = Resource$Routers;\n    class Resource$Routes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/routes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Routes = Resource$Routes;\n    class Resource$Securitypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Securitypolicies = Resource$Securitypolicies;\n    class Resource$Serviceattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'serviceAttachment'],\n                pathParams: ['project', 'region', 'serviceAttachment'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'serviceAttachment'],\n                pathParams: ['project', 'region', 'serviceAttachment'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'serviceAttachment'],\n                pathParams: ['project', 'region', 'serviceAttachment'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/serviceAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Serviceattachments = Resource$Serviceattachments;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Sslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Sslcertificates = Resource$Sslcertificates;\n    class Resource$Sslpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Sslpolicies = Resource$Sslpolicies;\n    class Resource$Subnetworks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listUsable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Subnetworks = Resource$Subnetworks;\n    class Resource$Targetgrpcproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetGrpcProxy'],\n                pathParams: ['project', 'targetGrpcProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetGrpcProxy'],\n                pathParams: ['project', 'targetGrpcProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetGrpcProxy'],\n                pathParams: ['project', 'targetGrpcProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetGrpcProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetgrpcproxies = Resource$Targetgrpcproxies;\n    class Resource$Targethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targethttpproxies = Resource$Targethttpproxies;\n    class Resource$Targethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setCertificateMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setCertificateMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n    class Resource$Targetinstances {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetinstances = Resource$Targetinstances;\n    class Resource$Targetpools {\n        constructor(context) {\n            this.context = context;\n        }\n        addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetpools = Resource$Targetpools;\n    class Resource$Targetsslproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setCertificateMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setCertificateMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetsslproxies = Resource$Targetsslproxies;\n    class Resource$Targettcpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targettcpproxies = Resource$Targettcpproxies;\n    class Resource$Targetvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetvpngateways = Resource$Targetvpngateways;\n    class Resource$Urlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Urlmaps = Resource$Urlmaps;\n    class Resource$Vpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Vpngateways = Resource$Vpngateways;\n    class Resource$Vpntunnels {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Vpntunnels = Resource$Vpntunnels;\n    class Resource$Zoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Zoneoperations = Resource$Zoneoperations;\n    class Resource$Zonequeuedresources {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/queuedResources/{queuedResource}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'queuedResource'],\n                pathParams: ['project', 'queuedResource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/queuedResources/{queuedResource}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'queuedResource'],\n                pathParams: ['project', 'queuedResource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/queuedResources/{queuedResource}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'queuedResource'],\n                pathParams: ['project', 'queuedResource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/queuedResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/queuedResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Zonequeuedresources = Resource$Zonequeuedresources;\n    class Resource$Zones {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Zones = Resource$Zones;\n})(compute_alpha = exports.compute_alpha || (exports.compute_alpha = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}