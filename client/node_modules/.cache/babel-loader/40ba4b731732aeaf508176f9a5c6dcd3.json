{"ast":null,"code":"\"use strict\"; // Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthClient = void 0;\n\nconst events_1 = require(\"events\");\n\nconst transporters_1 = require(\"../transporters\");\n\nclass AuthClient extends events_1.EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.transporter = new transporters_1.DefaultTransporter();\n    this.credentials = {};\n    this.eagerRefreshThresholdMillis = 5 * 60 * 1000;\n    this.forceRefreshOnFailure = false;\n  }\n  /**\n   * Sets the auth credentials.\n   */\n\n\n  setCredentials(credentials) {\n    this.credentials = credentials;\n  }\n  /**\n   * Append additional headers, e.g., x-goog-user-project, shared across the\n   * classes inheriting AuthClient. This method should be used by any method\n   * that overrides getRequestMetadataAsync(), which is a shared helper for\n   * setting request information in both gRPC and HTTP API calls.\n   *\n   * @param headers object to append additional headers to.\n   */\n\n\n  addSharedMetadataHeaders(headers) {\n    // quota_project_id, stored in application_default_credentials.json, is set in\n    // the x-goog-user-project header, to indicate an alternate account for\n    // billing and quota:\n    if (!headers['x-goog-user-project'] && // don't override a value the user sets.\n    this.quotaProjectId) {\n      headers['x-goog-user-project'] = this.quotaProjectId;\n    }\n\n    return headers;\n  }\n\n}\n\nexports.AuthClient = AuthClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","AuthClient","events_1","require","transporters_1","EventEmitter","constructor","arguments","transporter","DefaultTransporter","credentials","eagerRefreshThresholdMillis","forceRefreshOnFailure","setCredentials","addSharedMetadataHeaders","headers","quotaProjectId"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/google-auth-library/build/src/auth/authclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthClient = void 0;\nconst events_1 = require(\"events\");\nconst transporters_1 = require(\"../transporters\");\nclass AuthClient extends events_1.EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.transporter = new transporters_1.DefaultTransporter();\n        this.credentials = {};\n        this.eagerRefreshThresholdMillis = 5 * 60 * 1000;\n        this.forceRefreshOnFailure = false;\n    }\n    /**\n     * Sets the auth credentials.\n     */\n    setCredentials(credentials) {\n        this.credentials = credentials;\n    }\n    /**\n     * Append additional headers, e.g., x-goog-user-project, shared across the\n     * classes inheriting AuthClient. This method should be used by any method\n     * that overrides getRequestMetadataAsync(), which is a shared helper for\n     * setting request information in both gRPC and HTTP API calls.\n     *\n     * @param headers object to append additional headers to.\n     */\n    addSharedMetadataHeaders(headers) {\n        // quota_project_id, stored in application_default_credentials.json, is set in\n        // the x-goog-user-project header, to indicate an alternate account for\n        // billing and quota:\n        if (!headers['x-goog-user-project'] && // don't override a value the user sets.\n            this.quotaProjectId) {\n            headers['x-goog-user-project'] = this.quotaProjectId;\n        }\n        return headers;\n    }\n}\nexports.AuthClient = AuthClient;\n//# sourceMappingURL=authclient.js.map"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAMF,UAAN,SAAyBC,QAAQ,CAACG,YAAlC,CAA+C;EAC3CC,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT;IACA,KAAKC,WAAL,GAAmB,IAAIJ,cAAc,CAACK,kBAAnB,EAAnB;IACA,KAAKC,WAAL,GAAmB,EAAnB;IACA,KAAKC,2BAAL,GAAmC,IAAI,EAAJ,GAAS,IAA5C;IACA,KAAKC,qBAAL,GAA6B,KAA7B;EACH;EACD;AACJ;AACA;;;EACIC,cAAc,CAACH,WAAD,EAAc;IACxB,KAAKA,WAAL,GAAmBA,WAAnB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACII,wBAAwB,CAACC,OAAD,EAAU;IAC9B;IACA;IACA;IACA,IAAI,CAACA,OAAO,CAAC,qBAAD,CAAR,IAAmC;IACnC,KAAKC,cADT,EACyB;MACrBD,OAAO,CAAC,qBAAD,CAAP,GAAiC,KAAKC,cAAtC;IACH;;IACD,OAAOD,OAAP;EACH;;AA/B0C;;AAiC/ChB,OAAO,CAACE,UAAR,GAAqBA,UAArB"},"metadata":{},"sourceType":"script"}