{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.testing_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar testing_v1;\n\n(function (testing_v1) {\n  /**\n   * Cloud Testing API\n   *\n   * Allows developers to run automated tests for their mobile applications on Google infrastructure.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const testing = google.testing('v1');\n   * ```\n   */\n  class Testing {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.applicationDetailService = new Resource$Applicationdetailservice(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.testEnvironmentCatalog = new Resource$Testenvironmentcatalog(this.context);\n    }\n\n  }\n\n  testing_v1.Testing = Testing;\n\n  class Resource$Applicationdetailservice {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getApkDetails(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/applicationDetailService/getApkDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  testing_v1.Resource$Applicationdetailservice = Resource$Applicationdetailservice;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.testMatrices = new Resource$Projects$Testmatrices(this.context);\n    }\n\n  }\n\n  testing_v1.Resource$Projects = Resource$Projects;\n\n  class Resource$Projects$Testmatrices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/projects/{projectId}/testMatrices/{testMatrixId}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'testMatrixId'],\n        pathParams: ['projectId', 'testMatrixId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/projects/{projectId}/testMatrices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/projects/{projectId}/testMatrices/{testMatrixId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'testMatrixId'],\n        pathParams: ['projectId', 'testMatrixId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  testing_v1.Resource$Projects$Testmatrices = Resource$Projects$Testmatrices;\n\n  class Resource$Testenvironmentcatalog {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/testEnvironmentCatalog/{environmentType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['environmentType'],\n        pathParams: ['environmentType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  testing_v1.Resource$Testenvironmentcatalog = Resource$Testenvironmentcatalog;\n})(testing_v1 = exports.testing_v1 || (exports.testing_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","testing_v1","googleapis_common_1","require","Testing","constructor","options","google","context","_options","applicationDetailService","Resource$Applicationdetailservice","projects","Resource$Projects","testEnvironmentCatalog","Resource$Testenvironmentcatalog","getApkDetails","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","testMatrices","Resource$Projects$Testmatrices","cancel","create","get"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/testing/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.testing_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar testing_v1;\n(function (testing_v1) {\n    /**\n     * Cloud Testing API\n     *\n     * Allows developers to run automated tests for their mobile applications on Google infrastructure.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const testing = google.testing('v1');\n     * ```\n     */\n    class Testing {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.applicationDetailService = new Resource$Applicationdetailservice(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.testEnvironmentCatalog = new Resource$Testenvironmentcatalog(this.context);\n        }\n    }\n    testing_v1.Testing = Testing;\n    class Resource$Applicationdetailservice {\n        constructor(context) {\n            this.context = context;\n        }\n        getApkDetails(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/applicationDetailService/getApkDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    testing_v1.Resource$Applicationdetailservice = Resource$Applicationdetailservice;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.testMatrices = new Resource$Projects$Testmatrices(this.context);\n        }\n    }\n    testing_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Testmatrices {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/projects/{projectId}/testMatrices/{testMatrixId}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'testMatrixId'],\n                pathParams: ['projectId', 'testMatrixId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{projectId}/testMatrices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/projects/{projectId}/testMatrices/{testMatrixId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'testMatrixId'],\n                pathParams: ['projectId', 'testMatrixId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    testing_v1.Resource$Projects$Testmatrices = Resource$Projects$Testmatrices;\n    class Resource$Testenvironmentcatalog {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://testing.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/testEnvironmentCatalog/{environmentType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['environmentType'],\n                pathParams: ['environmentType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    testing_v1.Resource$Testenvironmentcatalog = Resource$Testenvironmentcatalog;\n})(testing_v1 = exports.testing_v1 || (exports.testing_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}