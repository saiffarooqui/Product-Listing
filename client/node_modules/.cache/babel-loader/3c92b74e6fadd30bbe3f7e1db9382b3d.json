{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.admin_directory_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar admin_directory_v1;\n\n(function (admin_directory_v1) {\n  /**\n   * Admin SDK API\n   *\n   * Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const admin = google.admin('directory_v1');\n   * ```\n   */\n  class Admin {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.asps = new Resource$Asps(this.context);\n      this.channels = new Resource$Channels(this.context);\n      this.chromeosdevices = new Resource$Chromeosdevices(this.context);\n      this.customer = new Resource$Customer(this.context);\n      this.customers = new Resource$Customers(this.context);\n      this.domainAliases = new Resource$Domainaliases(this.context);\n      this.domains = new Resource$Domains(this.context);\n      this.groups = new Resource$Groups(this.context);\n      this.members = new Resource$Members(this.context);\n      this.mobiledevices = new Resource$Mobiledevices(this.context);\n      this.orgunits = new Resource$Orgunits(this.context);\n      this.privileges = new Resource$Privileges(this.context);\n      this.resources = new Resource$Resources(this.context);\n      this.roleAssignments = new Resource$Roleassignments(this.context);\n      this.roles = new Resource$Roles(this.context);\n      this.schemas = new Resource$Schemas(this.context);\n      this.tokens = new Resource$Tokens(this.context);\n      this.twoStepVerification = new Resource$Twostepverification(this.context);\n      this.users = new Resource$Users(this.context);\n      this.verificationCodes = new Resource$Verificationcodes(this.context);\n    }\n\n  }\n\n  admin_directory_v1.Admin = Admin;\n\n  class Resource$Asps {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userKey', 'codeId'],\n        pathParams: ['codeId', 'userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey', 'codeId'],\n        pathParams: ['codeId', 'userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Asps = Resource$Asps;\n\n  class Resource$Channels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    stop(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory_v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Channels = Resource$Channels;\n\n  class Resource$Chromeosdevices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    action(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    moveDevicesToOu(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Chromeosdevices = Resource$Chromeosdevices;\n\n  class Resource$Customer {\n    constructor(context) {\n      this.context = context;\n      this.devices = new Resource$Customer$Devices(this.context);\n    }\n\n  }\n\n  admin_directory_v1.Resource$Customer = Resource$Customer;\n\n  class Resource$Customer$Devices {\n    constructor(context) {\n      this.context = context;\n      this.chromeos = new Resource$Customer$Devices$Chromeos(this.context);\n    }\n\n  }\n\n  admin_directory_v1.Resource$Customer$Devices = Resource$Customer$Devices;\n\n  class Resource$Customer$Devices$Chromeos {\n    constructor(context) {\n      this.context = context;\n      this.commands = new Resource$Customer$Devices$Chromeos$Commands(this.context);\n    }\n\n    issueCommand(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Customer$Devices$Chromeos = Resource$Customer$Devices$Chromeos;\n\n  class Resource$Customer$Devices$Chromeos$Commands {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'deviceId', 'commandId'],\n        pathParams: ['commandId', 'customerId', 'deviceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Customer$Devices$Chromeos$Commands = Resource$Customer$Devices$Chromeos$Commands;\n\n  class Resource$Customers {\n    constructor(context) {\n      this.context = context;\n      this.chrome = new Resource$Customers$Chrome(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerKey'],\n        pathParams: ['customerKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customerKey'],\n        pathParams: ['customerKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customerKey'],\n        pathParams: ['customerKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Customers = Resource$Customers;\n\n  class Resource$Customers$Chrome {\n    constructor(context) {\n      this.context = context;\n      this.printers = new Resource$Customers$Chrome$Printers(this.context);\n    }\n\n  }\n\n  admin_directory_v1.Resource$Customers$Chrome = Resource$Customers$Chrome;\n\n  class Resource$Customers$Chrome$Printers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    batchCreatePrinters(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers:batchCreatePrinters').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    batchDeletePrinters(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers:batchDeletePrinters').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listPrinterModels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers:listPrinterModels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Customers$Chrome$Printers = Resource$Customers$Chrome$Printers;\n\n  class Resource$Domainaliases {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'domainAliasName'],\n        pathParams: ['customer', 'domainAliasName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'domainAliasName'],\n        pathParams: ['customer', 'domainAliasName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Domainaliases = Resource$Domainaliases;\n\n  class Resource$Domains {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'domainName'],\n        pathParams: ['customer', 'domainName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'domainName'],\n        pathParams: ['customer', 'domainName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Domains = Resource$Domains;\n\n  class Resource$Groups {\n    constructor(context) {\n      this.context = context;\n      this.aliases = new Resource$Groups$Aliases(this.context);\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Groups = Resource$Groups;\n\n  class Resource$Groups$Aliases {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'alias'],\n        pathParams: ['alias', 'groupKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Groups$Aliases = Resource$Groups$Aliases;\n\n  class Resource$Members {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    hasMember(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Members = Resource$Members;\n\n  class Resource$Mobiledevices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    action(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Mobiledevices = Resource$Mobiledevices;\n\n  class Resource$Orgunits {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Orgunits = Resource$Orgunits;\n\n  class Resource$Privileges {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/ALL/privileges').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Privileges = Resource$Privileges;\n\n  class Resource$Resources {\n    constructor(context) {\n      this.context = context;\n      this.buildings = new Resource$Resources$Buildings(this.context);\n      this.calendars = new Resource$Resources$Calendars(this.context);\n      this.features = new Resource$Resources$Features(this.context);\n    }\n\n  }\n\n  admin_directory_v1.Resource$Resources = Resource$Resources;\n\n  class Resource$Resources$Buildings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'buildingId'],\n        pathParams: ['buildingId', 'customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'buildingId'],\n        pathParams: ['buildingId', 'customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customer', 'buildingId'],\n        pathParams: ['buildingId', 'customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customer', 'buildingId'],\n        pathParams: ['buildingId', 'customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Resources$Buildings = Resource$Resources$Buildings;\n\n  class Resource$Resources$Calendars {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'calendarResourceId'],\n        pathParams: ['calendarResourceId', 'customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'calendarResourceId'],\n        pathParams: ['calendarResourceId', 'customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customer', 'calendarResourceId'],\n        pathParams: ['calendarResourceId', 'customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customer', 'calendarResourceId'],\n        pathParams: ['calendarResourceId', 'customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Resources$Calendars = Resource$Resources$Calendars;\n\n  class Resource$Resources$Features {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'featureKey'],\n        pathParams: ['customer', 'featureKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'featureKey'],\n        pathParams: ['customer', 'featureKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customer', 'featureKey'],\n        pathParams: ['customer', 'featureKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    rename(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer', 'oldName'],\n        pathParams: ['customer', 'oldName'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customer', 'featureKey'],\n        pathParams: ['customer', 'featureKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Resources$Features = Resource$Resources$Features;\n\n  class Resource$Roleassignments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleAssignmentId'],\n        pathParams: ['customer', 'roleAssignmentId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleAssignmentId'],\n        pathParams: ['customer', 'roleAssignmentId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Roleassignments = Resource$Roleassignments;\n\n  class Resource$Roles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Roles = Resource$Roles;\n\n  class Resource$Schemas {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Schemas = Resource$Schemas;\n\n  class Resource$Tokens {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userKey', 'clientId'],\n        pathParams: ['clientId', 'userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey', 'clientId'],\n        pathParams: ['clientId', 'userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Tokens = Resource$Tokens;\n\n  class Resource$Twostepverification {\n    constructor(context) {\n      this.context = context;\n    }\n\n    turnOff(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/twoStepVerification/turnOff').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Twostepverification = Resource$Twostepverification;\n\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n      this.aliases = new Resource$Users$Aliases(this.context);\n      this.photos = new Resource$Users$Photos(this.context);\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    makeAdmin(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/makeAdmin').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    signOut(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/signOut').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    undelete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    watch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Users = Resource$Users;\n\n  class Resource$Users$Aliases {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userKey', 'alias'],\n        pathParams: ['alias', 'userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    watch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Users$Aliases = Resource$Users$Aliases;\n\n  class Resource$Users$Photos {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Users$Photos = Resource$Users$Photos;\n\n  class Resource$Verificationcodes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    generate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes/generate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    invalidate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes/invalidate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  admin_directory_v1.Resource$Verificationcodes = Resource$Verificationcodes;\n})(admin_directory_v1 = exports.admin_directory_v1 || (exports.admin_directory_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","admin_directory_v1","googleapis_common_1","require","Admin","constructor","options","google","context","_options","asps","Resource$Asps","channels","Resource$Channels","chromeosdevices","Resource$Chromeosdevices","customer","Resource$Customer","customers","Resource$Customers","domainAliases","Resource$Domainaliases","domains","Resource$Domains","groups","Resource$Groups","members","Resource$Members","mobiledevices","Resource$Mobiledevices","orgunits","Resource$Orgunits","privileges","Resource$Privileges","resources","Resource$Resources","roleAssignments","Resource$Roleassignments","roles","Resource$Roles","schemas","Resource$Schemas","tokens","Resource$Tokens","twoStepVerification","Resource$Twostepverification","users","Resource$Users","verificationCodes","Resource$Verificationcodes","delete","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","list","stop","action","moveDevicesToOu","patch","update","devices","Resource$Customer$Devices","chromeos","Resource$Customer$Devices$Chromeos","commands","Resource$Customer$Devices$Chromeos$Commands","issueCommand","chrome","Resource$Customers$Chrome","printers","Resource$Customers$Chrome$Printers","batchCreatePrinters","batchDeletePrinters","create","listPrinterModels","insert","aliases","Resource$Groups$Aliases","hasMember","buildings","Resource$Resources$Buildings","calendars","Resource$Resources$Calendars","features","Resource$Resources$Features","rename","turnOff","Resource$Users$Aliases","photos","Resource$Users$Photos","makeAdmin","signOut","undelete","watch","generate","invalidate"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/admin/directory_v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.admin_directory_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar admin_directory_v1;\n(function (admin_directory_v1) {\n    /**\n     * Admin SDK API\n     *\n     * Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const admin = google.admin('directory_v1');\n     * ```\n     */\n    class Admin {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.asps = new Resource$Asps(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.chromeosdevices = new Resource$Chromeosdevices(this.context);\n            this.customer = new Resource$Customer(this.context);\n            this.customers = new Resource$Customers(this.context);\n            this.domainAliases = new Resource$Domainaliases(this.context);\n            this.domains = new Resource$Domains(this.context);\n            this.groups = new Resource$Groups(this.context);\n            this.members = new Resource$Members(this.context);\n            this.mobiledevices = new Resource$Mobiledevices(this.context);\n            this.orgunits = new Resource$Orgunits(this.context);\n            this.privileges = new Resource$Privileges(this.context);\n            this.resources = new Resource$Resources(this.context);\n            this.roleAssignments = new Resource$Roleassignments(this.context);\n            this.roles = new Resource$Roles(this.context);\n            this.schemas = new Resource$Schemas(this.context);\n            this.tokens = new Resource$Tokens(this.context);\n            this.twoStepVerification = new Resource$Twostepverification(this.context);\n            this.users = new Resource$Users(this.context);\n            this.verificationCodes = new Resource$Verificationcodes(this.context);\n        }\n    }\n    admin_directory_v1.Admin = Admin;\n    class Resource$Asps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'codeId'],\n                pathParams: ['codeId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'codeId'],\n                pathParams: ['codeId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Asps = Resource$Asps;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory_v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Channels = Resource$Channels;\n    class Resource$Chromeosdevices {\n        constructor(context) {\n            this.context = context;\n        }\n        action(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        moveDevicesToOu(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Chromeosdevices = Resource$Chromeosdevices;\n    class Resource$Customer {\n        constructor(context) {\n            this.context = context;\n            this.devices = new Resource$Customer$Devices(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Customer = Resource$Customer;\n    class Resource$Customer$Devices {\n        constructor(context) {\n            this.context = context;\n            this.chromeos = new Resource$Customer$Devices$Chromeos(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Customer$Devices = Resource$Customer$Devices;\n    class Resource$Customer$Devices$Chromeos {\n        constructor(context) {\n            this.context = context;\n            this.commands = new Resource$Customer$Devices$Chromeos$Commands(this.context);\n        }\n        issueCommand(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customer$Devices$Chromeos = Resource$Customer$Devices$Chromeos;\n    class Resource$Customer$Devices$Chromeos$Commands {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId', 'commandId'],\n                pathParams: ['commandId', 'customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customer$Devices$Chromeos$Commands = Resource$Customer$Devices$Chromeos$Commands;\n    class Resource$Customers {\n        constructor(context) {\n            this.context = context;\n            this.chrome = new Resource$Customers$Chrome(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customers = Resource$Customers;\n    class Resource$Customers$Chrome {\n        constructor(context) {\n            this.context = context;\n            this.printers = new Resource$Customers$Chrome$Printers(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Customers$Chrome = Resource$Customers$Chrome;\n    class Resource$Customers$Chrome$Printers {\n        constructor(context) {\n            this.context = context;\n        }\n        batchCreatePrinters(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/{+parent}/chrome/printers:batchCreatePrinters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        batchDeletePrinters(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/{+parent}/chrome/printers:batchDeletePrinters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listPrinterModels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/{+parent}/chrome/printers:listPrinterModels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customers$Chrome$Printers = Resource$Customers$Chrome$Printers;\n    class Resource$Domainaliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainAliasName'],\n                pathParams: ['customer', 'domainAliasName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainAliasName'],\n                pathParams: ['customer', 'domainAliasName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Domainaliases = Resource$Domainaliases;\n    class Resource$Domains {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainName'],\n                pathParams: ['customer', 'domainName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainName'],\n                pathParams: ['customer', 'domainName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Domains = Resource$Domains;\n    class Resource$Groups {\n        constructor(context) {\n            this.context = context;\n            this.aliases = new Resource$Groups$Aliases(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Groups = Resource$Groups;\n    class Resource$Groups$Aliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'alias'],\n                pathParams: ['alias', 'groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Groups$Aliases = Resource$Groups$Aliases;\n    class Resource$Members {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        hasMember(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Members = Resource$Members;\n    class Resource$Mobiledevices {\n        constructor(context) {\n            this.context = context;\n        }\n        action(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Mobiledevices = Resource$Mobiledevices;\n    class Resource$Orgunits {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Orgunits = Resource$Orgunits;\n    class Resource$Privileges {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roles/ALL/privileges').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Privileges = Resource$Privileges;\n    class Resource$Resources {\n        constructor(context) {\n            this.context = context;\n            this.buildings = new Resource$Resources$Buildings(this.context);\n            this.calendars = new Resource$Resources$Calendars(this.context);\n            this.features = new Resource$Resources$Features(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Resources = Resource$Resources;\n    class Resource$Resources$Buildings {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Buildings = Resource$Resources$Buildings;\n    class Resource$Resources$Calendars {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Calendars = Resource$Resources$Calendars;\n    class Resource$Resources$Features {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rename(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer', 'oldName'],\n                pathParams: ['customer', 'oldName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Features = Resource$Resources$Features;\n    class Resource$Roleassignments {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleAssignmentId'],\n                pathParams: ['customer', 'roleAssignmentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleAssignmentId'],\n                pathParams: ['customer', 'roleAssignmentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Roleassignments = Resource$Roleassignments;\n    class Resource$Roles {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Roles = Resource$Roles;\n    class Resource$Schemas {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Schemas = Resource$Schemas;\n    class Resource$Tokens {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'clientId'],\n                pathParams: ['clientId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'clientId'],\n                pathParams: ['clientId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Tokens = Resource$Tokens;\n    class Resource$Twostepverification {\n        constructor(context) {\n            this.context = context;\n        }\n        turnOff(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/twoStepVerification/turnOff').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Twostepverification = Resource$Twostepverification;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n            this.aliases = new Resource$Users$Aliases(this.context);\n            this.photos = new Resource$Users$Photos(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        makeAdmin(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/makeAdmin').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        signOut(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/signOut').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        undelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users = Resource$Users;\n    class Resource$Users$Aliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'alias'],\n                pathParams: ['alias', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users$Aliases = Resource$Users$Aliases;\n    class Resource$Users$Photos {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users$Photos = Resource$Users$Photos;\n    class Resource$Verificationcodes {\n        constructor(context) {\n            this.context = context;\n        }\n        generate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/verificationCodes/generate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        invalidate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/verificationCodes/invalidate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Verificationcodes = Resource$Verificationcodes;\n})(admin_directory_v1 = exports.admin_directory_v1 || (exports.admin_directory_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}