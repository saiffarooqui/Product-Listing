{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doubleclickbidmanager_v1_1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar doubleclickbidmanager_v1_1;\n\n(function (doubleclickbidmanager_v1_1) {\n  /**\n   * DoubleClick Bid Manager API\n   *\n   * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const doubleclickbidmanager = google.doubleclickbidmanager('v1.1');\n   * ```\n   */\n  class Doubleclickbidmanager {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.queries = new Resource$Queries(this.context);\n      this.reports = new Resource$Reports(this.context);\n    }\n\n  }\n\n  doubleclickbidmanager_v1_1.Doubleclickbidmanager = Doubleclickbidmanager;\n\n  class Resource$Queries {\n    constructor(context) {\n      this.context = context;\n    }\n\n    createquery(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclickbidmanager/v1.1/query').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deletequery(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclickbidmanager/v1.1/query/{queryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['queryId'],\n        pathParams: ['queryId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getquery(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclickbidmanager/v1.1/query/{queryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['queryId'],\n        pathParams: ['queryId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listqueries(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclickbidmanager/v1.1/queries').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    runquery(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclickbidmanager/v1.1/query/{queryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['queryId'],\n        pathParams: ['queryId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  doubleclickbidmanager_v1_1.Resource$Queries = Resource$Queries;\n\n  class Resource$Reports {\n    constructor(context) {\n      this.context = context;\n    }\n\n    listreports(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/doubleclickbidmanager/v1.1/queries/{queryId}/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['queryId'],\n        pathParams: ['queryId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  doubleclickbidmanager_v1_1.Resource$Reports = Resource$Reports;\n})(doubleclickbidmanager_v1_1 = exports.doubleclickbidmanager_v1_1 || (exports.doubleclickbidmanager_v1_1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","doubleclickbidmanager_v1_1","googleapis_common_1","require","Doubleclickbidmanager","constructor","options","google","context","_options","queries","Resource$Queries","reports","Resource$Reports","createquery","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","deletequery","getquery","listqueries","runquery","listreports"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/doubleclickbidmanager/v1.1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.doubleclickbidmanager_v1_1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar doubleclickbidmanager_v1_1;\n(function (doubleclickbidmanager_v1_1) {\n    /**\n     * DoubleClick Bid Manager API\n     *\n     * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const doubleclickbidmanager = google.doubleclickbidmanager('v1.1');\n     * ```\n     */\n    class Doubleclickbidmanager {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.queries = new Resource$Queries(this.context);\n            this.reports = new Resource$Reports(this.context);\n        }\n    }\n    doubleclickbidmanager_v1_1.Doubleclickbidmanager = Doubleclickbidmanager;\n    class Resource$Queries {\n        constructor(context) {\n            this.context = context;\n        }\n        createquery(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/doubleclickbidmanager/v1.1/query').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deletequery(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/doubleclickbidmanager/v1.1/query/{queryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['queryId'],\n                pathParams: ['queryId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getquery(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/doubleclickbidmanager/v1.1/query/{queryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['queryId'],\n                pathParams: ['queryId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listqueries(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/doubleclickbidmanager/v1.1/queries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        runquery(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/doubleclickbidmanager/v1.1/query/{queryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['queryId'],\n                pathParams: ['queryId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    doubleclickbidmanager_v1_1.Resource$Queries = Resource$Queries;\n    class Resource$Reports {\n        constructor(context) {\n            this.context = context;\n        }\n        listreports(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://doubleclickbidmanager.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/doubleclickbidmanager/v1.1/queries/{queryId}/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['queryId'],\n                pathParams: ['queryId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    doubleclickbidmanager_v1_1.Resource$Reports = Resource$Reports;\n})(doubleclickbidmanager_v1_1 = exports.doubleclickbidmanager_v1_1 || (exports.doubleclickbidmanager_v1_1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}