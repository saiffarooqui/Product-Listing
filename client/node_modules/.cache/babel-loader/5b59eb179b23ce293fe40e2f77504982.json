{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default('https-proxy-agent:parse-proxy-response');\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('close', onclose);\n      socket.removeListener('readable', read);\n    }\n\n    function onclose(err) {\n      debug('onclose had error %o', err);\n    }\n\n    function onend() {\n      debug('onend');\n    }\n\n    function onerror(err) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const firstLine = buffered.toString('ascii', 0, buffered.indexOf('\\r\\n'));\n      const statusCode = +firstLine.split(' ')[1];\n      debug('got proxy server response: %o', firstLine);\n      resolve({\n        statusCode,\n        buffered\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('close', onclose);\n    socket.on('end', onend);\n    read();\n  });\n}\n\nexports.default = parseProxyResponse;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AAGA,MAAMA,KAAK,GAAGC,gBAAY,wCAAZ,CAAd;;AAOA,SAAwBC,kBAAxB,CACCC,MADD,EACiB;EAEhB,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;IACtC;IACA;IACA;IACA;IACA,IAAIC,aAAa,GAAG,CAApB;IACA,MAAMC,OAAO,GAAa,EAA1B;;IAEA,SAASC,IAAT,GAAa;MACZ,MAAMC,CAAC,GAAGP,MAAM,CAACM,IAAP,EAAV;MACA,IAAIC,CAAJ,EAAOC,MAAM,CAACD,CAAD,CAAN,CAAP,KACKP,MAAM,CAACS,IAAP,CAAY,UAAZ,EAAwBH,IAAxB;IACL;;IAED,SAASI,OAAT,GAAgB;MACfV,MAAM,CAACW,cAAP,CAAsB,KAAtB,EAA6BC,KAA7B;MACAZ,MAAM,CAACW,cAAP,CAAsB,OAAtB,EAA+BE,OAA/B;MACAb,MAAM,CAACW,cAAP,CAAsB,OAAtB,EAA+BG,OAA/B;MACAd,MAAM,CAACW,cAAP,CAAsB,UAAtB,EAAkCL,IAAlC;IACA;;IAED,SAASQ,OAAT,CAAiBC,GAAjB,EAA4B;MAC3BlB,KAAK,CAAC,sBAAD,EAAyBkB,GAAzB,CAAL;IACA;;IAED,SAASH,KAAT,GAAc;MACbf,KAAK,CAAC,OAAD,CAAL;IACA;;IAED,SAASgB,OAAT,CAAiBE,GAAjB,EAA2B;MAC1BL,OAAO;MACPb,KAAK,CAAC,YAAD,EAAekB,GAAf,CAAL;MACAZ,MAAM,CAACY,GAAD,CAAN;IACA;;IAED,SAASP,MAAT,CAAgBD,CAAhB,EAAyB;MACxBF,OAAO,CAACW,IAAR,CAAaT,CAAb;MACAH,aAAa,IAAIG,CAAC,CAACU,MAAnB;MAEA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcf,OAAd,EAAuBD,aAAvB,CAAjB;MACA,MAAMiB,YAAY,GAAGH,QAAQ,CAACI,OAAT,CAAiB,UAAjB,CAArB;;MAEA,IAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB;QACxB;QACAxB,KAAK,CAAC,8CAAD,CAAL;QACAS,IAAI;QACJ;MACA;;MAED,MAAMiB,SAAS,GAAGL,QAAQ,CAACM,QAAT,CACjB,OADiB,EAEjB,CAFiB,EAGjBN,QAAQ,CAACI,OAAT,CAAiB,MAAjB,CAHiB,CAAlB;MAKA,MAAMG,UAAU,GAAG,CAACF,SAAS,CAACG,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAApB;MACA7B,KAAK,CAAC,+BAAD,EAAkC0B,SAAlC,CAAL;MACArB,OAAO,CAAC;QACPuB,UADO;QAEPP;MAFO,CAAD,CAAP;IAIA;;IAEDlB,MAAM,CAAC2B,EAAP,CAAU,OAAV,EAAmBd,OAAnB;IACAb,MAAM,CAAC2B,EAAP,CAAU,OAAV,EAAmBb,OAAnB;IACAd,MAAM,CAAC2B,EAAP,CAAU,KAAV,EAAiBf,KAAjB;IAEAN,IAAI;EACJ,CAnEM,CAAP;AAoEA;;AAvEDsB","names":["debug","debug_1","parseProxyResponse","socket","Promise","resolve","reject","buffersLength","buffers","read","b","ondata","once","cleanup","removeListener","onend","onerror","onclose","err","push","length","buffered","Buffer","concat","endOfHeaders","indexOf","firstLine","toString","statusCode","split","on","exports"],"sources":["../src/parse-proxy-response.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}