{"ast":null,"code":"/**\n * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.\n *\n * See: RFC 1421.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n *\n * A Forge PEM object has the following fields:\n *\n * type: identifies the type of message (eg: \"RSA PRIVATE KEY\").\n *\n * procType: identifies the type of processing performed on the message,\n *   it has two subfields: version and type, eg: 4,ENCRYPTED.\n *\n * contentDomain: identifies the type of content in the message, typically\n *   only uses the value: \"RFC822\".\n *\n * dekInfo: identifies the message encryption algorithm and mode and includes\n *   any parameters for the algorithm, it has two subfields: algorithm and\n *   parameters, eg: DES-CBC,F8143EDE5960C597.\n *\n * headers: contains all other PEM encapsulated headers -- where order is\n *   significant (for pairing data like recipient ID + key info).\n *\n * body: the binary-encoded body.\n */\nvar forge = require('./forge');\n\nrequire('./util'); // shortcut for pem API\n\n\nvar pem = module.exports = forge.pem = forge.pem || {};\n/**\n * Encodes (serializes) the given PEM object.\n *\n * @param msg the PEM message object to encode.\n * @param options the options to use:\n *          maxline the maximum characters per line for the body, (default: 64).\n *\n * @return the PEM-formatted string.\n */\n\npem.encode = function (msg, options) {\n  options = options || {};\n  var rval = '-----BEGIN ' + msg.type + '-----\\r\\n'; // encode special headers\n\n  var header;\n\n  if (msg.procType) {\n    header = {\n      name: 'Proc-Type',\n      values: [String(msg.procType.version), msg.procType.type]\n    };\n    rval += foldHeader(header);\n  }\n\n  if (msg.contentDomain) {\n    header = {\n      name: 'Content-Domain',\n      values: [msg.contentDomain]\n    };\n    rval += foldHeader(header);\n  }\n\n  if (msg.dekInfo) {\n    header = {\n      name: 'DEK-Info',\n      values: [msg.dekInfo.algorithm]\n    };\n\n    if (msg.dekInfo.parameters) {\n      header.values.push(msg.dekInfo.parameters);\n    }\n\n    rval += foldHeader(header);\n  }\n\n  if (msg.headers) {\n    // encode all other headers\n    for (var i = 0; i < msg.headers.length; ++i) {\n      rval += foldHeader(msg.headers[i]);\n    }\n  } // terminate header\n\n\n  if (msg.procType) {\n    rval += '\\r\\n';\n  } // add body\n\n\n  rval += forge.util.encode64(msg.body, options.maxline || 64) + '\\r\\n';\n  rval += '-----END ' + msg.type + '-----\\r\\n';\n  return rval;\n};\n/**\n * Decodes (deserializes) all PEM messages found in the given string.\n *\n * @param str the PEM-formatted string to decode.\n *\n * @return the PEM message objects in an array.\n */\n\n\npem.decode = function (str) {\n  var rval = []; // split string into PEM messages (be lenient w/EOF on BEGIN line)\n\n  var rMessage = /\\s*-----BEGIN ([A-Z0-9- ]+)-----\\r?\\n?([\\x21-\\x7e\\s]+?(?:\\r?\\n\\r?\\n))?([:A-Za-z0-9+\\/=\\s]+?)-----END \\1-----/g;\n  var rHeader = /([\\x21-\\x7e]+):\\s*([\\x21-\\x7e\\s^:]+)/;\n  var rCRLF = /\\r?\\n/;\n  var match;\n\n  while (true) {\n    match = rMessage.exec(str);\n\n    if (!match) {\n      break;\n    } // accept \"NEW CERTIFICATE REQUEST\" as \"CERTIFICATE REQUEST\"\n    // https://datatracker.ietf.org/doc/html/rfc7468#section-7\n\n\n    var type = match[1];\n\n    if (type === 'NEW CERTIFICATE REQUEST') {\n      type = 'CERTIFICATE REQUEST';\n    }\n\n    var msg = {\n      type: type,\n      procType: null,\n      contentDomain: null,\n      dekInfo: null,\n      headers: [],\n      body: forge.util.decode64(match[3])\n    };\n    rval.push(msg); // no headers\n\n    if (!match[2]) {\n      continue;\n    } // parse headers\n\n\n    var lines = match[2].split(rCRLF);\n    var li = 0;\n\n    while (match && li < lines.length) {\n      // get line, trim any rhs whitespace\n      var line = lines[li].replace(/\\s+$/, ''); // RFC2822 unfold any following folded lines\n\n      for (var nl = li + 1; nl < lines.length; ++nl) {\n        var next = lines[nl];\n\n        if (!/\\s/.test(next[0])) {\n          break;\n        }\n\n        line += next;\n        li = nl;\n      } // parse header\n\n\n      match = line.match(rHeader);\n\n      if (match) {\n        var header = {\n          name: match[1],\n          values: []\n        };\n        var values = match[2].split(',');\n\n        for (var vi = 0; vi < values.length; ++vi) {\n          header.values.push(ltrim(values[vi]));\n        } // Proc-Type must be the first header\n\n\n        if (!msg.procType) {\n          if (header.name !== 'Proc-Type') {\n            throw new Error('Invalid PEM formatted message. The first ' + 'encapsulated header must be \"Proc-Type\".');\n          } else if (header.values.length !== 2) {\n            throw new Error('Invalid PEM formatted message. The \"Proc-Type\" ' + 'header must have two subfields.');\n          }\n\n          msg.procType = {\n            version: values[0],\n            type: values[1]\n          };\n        } else if (!msg.contentDomain && header.name === 'Content-Domain') {\n          // special-case Content-Domain\n          msg.contentDomain = values[0] || '';\n        } else if (!msg.dekInfo && header.name === 'DEK-Info') {\n          // special-case DEK-Info\n          if (header.values.length === 0) {\n            throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' + 'header must have at least one subfield.');\n          }\n\n          msg.dekInfo = {\n            algorithm: values[0],\n            parameters: values[1] || null\n          };\n        } else {\n          msg.headers.push(header);\n        }\n      }\n\n      ++li;\n    }\n\n    if (msg.procType === 'ENCRYPTED' && !msg.dekInfo) {\n      throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' + 'header must be present if \"Proc-Type\" is \"ENCRYPTED\".');\n    }\n  }\n\n  if (rval.length === 0) {\n    throw new Error('Invalid PEM formatted message.');\n  }\n\n  return rval;\n};\n\nfunction foldHeader(header) {\n  var rval = header.name + ': '; // ensure values with CRLF are folded\n\n  var values = [];\n\n  var insertSpace = function (match, $1) {\n    return ' ' + $1;\n  };\n\n  for (var i = 0; i < header.values.length; ++i) {\n    values.push(header.values[i].replace(/^(\\S+\\r\\n)/, insertSpace));\n  }\n\n  rval += values.join(',') + '\\r\\n'; // do folding\n\n  var length = 0;\n  var candidate = -1;\n\n  for (var i = 0; i < rval.length; ++i, ++length) {\n    if (length > 65 && candidate !== -1) {\n      var insert = rval[candidate];\n\n      if (insert === ',') {\n        ++candidate;\n        rval = rval.substr(0, candidate) + '\\r\\n ' + rval.substr(candidate);\n      } else {\n        rval = rval.substr(0, candidate) + '\\r\\n' + insert + rval.substr(candidate + 1);\n      }\n\n      length = i - candidate - 1;\n      candidate = -1;\n      ++i;\n    } else if (rval[i] === ' ' || rval[i] === '\\t' || rval[i] === ',') {\n      candidate = i;\n    }\n  }\n\n  return rval;\n}\n\nfunction ltrim(str) {\n  return str.replace(/^\\s+/, '');\n}","map":{"version":3,"names":["forge","require","pem","module","exports","encode","msg","options","rval","type","header","procType","name","values","String","version","foldHeader","contentDomain","dekInfo","algorithm","parameters","push","headers","i","length","util","encode64","body","maxline","decode","str","rMessage","rHeader","rCRLF","match","exec","decode64","lines","split","li","line","replace","nl","next","test","vi","ltrim","Error","insertSpace","$1","join","candidate","insert","substr"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/node-forge/lib/pem.js"],"sourcesContent":["/**\n * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.\n *\n * See: RFC 1421.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n *\n * A Forge PEM object has the following fields:\n *\n * type: identifies the type of message (eg: \"RSA PRIVATE KEY\").\n *\n * procType: identifies the type of processing performed on the message,\n *   it has two subfields: version and type, eg: 4,ENCRYPTED.\n *\n * contentDomain: identifies the type of content in the message, typically\n *   only uses the value: \"RFC822\".\n *\n * dekInfo: identifies the message encryption algorithm and mode and includes\n *   any parameters for the algorithm, it has two subfields: algorithm and\n *   parameters, eg: DES-CBC,F8143EDE5960C597.\n *\n * headers: contains all other PEM encapsulated headers -- where order is\n *   significant (for pairing data like recipient ID + key info).\n *\n * body: the binary-encoded body.\n */\nvar forge = require('./forge');\nrequire('./util');\n\n// shortcut for pem API\nvar pem = module.exports = forge.pem = forge.pem || {};\n\n/**\n * Encodes (serializes) the given PEM object.\n *\n * @param msg the PEM message object to encode.\n * @param options the options to use:\n *          maxline the maximum characters per line for the body, (default: 64).\n *\n * @return the PEM-formatted string.\n */\npem.encode = function(msg, options) {\n  options = options || {};\n  var rval = '-----BEGIN ' + msg.type + '-----\\r\\n';\n\n  // encode special headers\n  var header;\n  if(msg.procType) {\n    header = {\n      name: 'Proc-Type',\n      values: [String(msg.procType.version), msg.procType.type]\n    };\n    rval += foldHeader(header);\n  }\n  if(msg.contentDomain) {\n    header = {name: 'Content-Domain', values: [msg.contentDomain]};\n    rval += foldHeader(header);\n  }\n  if(msg.dekInfo) {\n    header = {name: 'DEK-Info', values: [msg.dekInfo.algorithm]};\n    if(msg.dekInfo.parameters) {\n      header.values.push(msg.dekInfo.parameters);\n    }\n    rval += foldHeader(header);\n  }\n\n  if(msg.headers) {\n    // encode all other headers\n    for(var i = 0; i < msg.headers.length; ++i) {\n      rval += foldHeader(msg.headers[i]);\n    }\n  }\n\n  // terminate header\n  if(msg.procType) {\n    rval += '\\r\\n';\n  }\n\n  // add body\n  rval += forge.util.encode64(msg.body, options.maxline || 64) + '\\r\\n';\n\n  rval += '-----END ' + msg.type + '-----\\r\\n';\n  return rval;\n};\n\n/**\n * Decodes (deserializes) all PEM messages found in the given string.\n *\n * @param str the PEM-formatted string to decode.\n *\n * @return the PEM message objects in an array.\n */\npem.decode = function(str) {\n  var rval = [];\n\n  // split string into PEM messages (be lenient w/EOF on BEGIN line)\n  var rMessage = /\\s*-----BEGIN ([A-Z0-9- ]+)-----\\r?\\n?([\\x21-\\x7e\\s]+?(?:\\r?\\n\\r?\\n))?([:A-Za-z0-9+\\/=\\s]+?)-----END \\1-----/g;\n  var rHeader = /([\\x21-\\x7e]+):\\s*([\\x21-\\x7e\\s^:]+)/;\n  var rCRLF = /\\r?\\n/;\n  var match;\n  while(true) {\n    match = rMessage.exec(str);\n    if(!match) {\n      break;\n    }\n\n    // accept \"NEW CERTIFICATE REQUEST\" as \"CERTIFICATE REQUEST\"\n    // https://datatracker.ietf.org/doc/html/rfc7468#section-7\n    var type = match[1];\n    if(type === 'NEW CERTIFICATE REQUEST') {\n      type = 'CERTIFICATE REQUEST';\n    }\n\n    var msg = {\n      type: type,\n      procType: null,\n      contentDomain: null,\n      dekInfo: null,\n      headers: [],\n      body: forge.util.decode64(match[3])\n    };\n    rval.push(msg);\n\n    // no headers\n    if(!match[2]) {\n      continue;\n    }\n\n    // parse headers\n    var lines = match[2].split(rCRLF);\n    var li = 0;\n    while(match && li < lines.length) {\n      // get line, trim any rhs whitespace\n      var line = lines[li].replace(/\\s+$/, '');\n\n      // RFC2822 unfold any following folded lines\n      for(var nl = li + 1; nl < lines.length; ++nl) {\n        var next = lines[nl];\n        if(!/\\s/.test(next[0])) {\n          break;\n        }\n        line += next;\n        li = nl;\n      }\n\n      // parse header\n      match = line.match(rHeader);\n      if(match) {\n        var header = {name: match[1], values: []};\n        var values = match[2].split(',');\n        for(var vi = 0; vi < values.length; ++vi) {\n          header.values.push(ltrim(values[vi]));\n        }\n\n        // Proc-Type must be the first header\n        if(!msg.procType) {\n          if(header.name !== 'Proc-Type') {\n            throw new Error('Invalid PEM formatted message. The first ' +\n              'encapsulated header must be \"Proc-Type\".');\n          } else if(header.values.length !== 2) {\n            throw new Error('Invalid PEM formatted message. The \"Proc-Type\" ' +\n              'header must have two subfields.');\n          }\n          msg.procType = {version: values[0], type: values[1]};\n        } else if(!msg.contentDomain && header.name === 'Content-Domain') {\n          // special-case Content-Domain\n          msg.contentDomain = values[0] || '';\n        } else if(!msg.dekInfo && header.name === 'DEK-Info') {\n          // special-case DEK-Info\n          if(header.values.length === 0) {\n            throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' +\n              'header must have at least one subfield.');\n          }\n          msg.dekInfo = {algorithm: values[0], parameters: values[1] || null};\n        } else {\n          msg.headers.push(header);\n        }\n      }\n\n      ++li;\n    }\n\n    if(msg.procType === 'ENCRYPTED' && !msg.dekInfo) {\n      throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' +\n        'header must be present if \"Proc-Type\" is \"ENCRYPTED\".');\n    }\n  }\n\n  if(rval.length === 0) {\n    throw new Error('Invalid PEM formatted message.');\n  }\n\n  return rval;\n};\n\nfunction foldHeader(header) {\n  var rval = header.name + ': ';\n\n  // ensure values with CRLF are folded\n  var values = [];\n  var insertSpace = function(match, $1) {\n    return ' ' + $1;\n  };\n  for(var i = 0; i < header.values.length; ++i) {\n    values.push(header.values[i].replace(/^(\\S+\\r\\n)/, insertSpace));\n  }\n  rval += values.join(',') + '\\r\\n';\n\n  // do folding\n  var length = 0;\n  var candidate = -1;\n  for(var i = 0; i < rval.length; ++i, ++length) {\n    if(length > 65 && candidate !== -1) {\n      var insert = rval[candidate];\n      if(insert === ',') {\n        ++candidate;\n        rval = rval.substr(0, candidate) + '\\r\\n ' + rval.substr(candidate);\n      } else {\n        rval = rval.substr(0, candidate) +\n          '\\r\\n' + insert + rval.substr(candidate + 1);\n      }\n      length = (i - candidate - 1);\n      candidate = -1;\n      ++i;\n    } else if(rval[i] === ' ' || rval[i] === '\\t' || rval[i] === ',') {\n      candidate = i;\n    }\n  }\n\n  return rval;\n}\n\nfunction ltrim(str) {\n  return str.replace(/^\\s+/, '');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}