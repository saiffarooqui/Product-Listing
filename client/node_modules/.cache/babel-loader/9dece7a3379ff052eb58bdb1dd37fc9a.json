{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.analytics_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar analytics_v3;\n\n(function (analytics_v3) {\n  /**\n   * Google Analytics API\n   *\n   * Views and manages your Google Analytics data.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const analytics = google.analytics('v3');\n   * ```\n   */\n  class Analytics {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.data = new Resource$Data(this.context);\n      this.management = new Resource$Management(this.context);\n      this.metadata = new Resource$Metadata(this.context);\n      this.provisioning = new Resource$Provisioning(this.context);\n      this.userDeletion = new Resource$Userdeletion(this.context);\n    }\n\n  }\n\n  analytics_v3.Analytics = Analytics;\n\n  class Resource$Data {\n    constructor(context) {\n      this.context = context;\n      this.ga = new Resource$Data$Ga(this.context);\n      this.mcf = new Resource$Data$Mcf(this.context);\n      this.realtime = new Resource$Data$Realtime(this.context);\n    }\n\n  }\n\n  analytics_v3.Resource$Data = Resource$Data;\n\n  class Resource$Data$Ga {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/data/ga').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Data$Ga = Resource$Data$Ga;\n\n  class Resource$Data$Mcf {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/data/mcf').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Data$Mcf = Resource$Data$Mcf;\n\n  class Resource$Data$Realtime {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/data/realtime').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['ids', 'metrics'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Data$Realtime = Resource$Data$Realtime;\n\n  class Resource$Management {\n    constructor(context) {\n      this.context = context;\n      this.accounts = new Resource$Management$Accounts(this.context);\n      this.accountSummaries = new Resource$Management$Accountsummaries(this.context);\n      this.accountUserLinks = new Resource$Management$Accountuserlinks(this.context);\n      this.clientId = new Resource$Management$Clientid(this.context);\n      this.customDataSources = new Resource$Management$Customdatasources(this.context);\n      this.customDimensions = new Resource$Management$Customdimensions(this.context);\n      this.customMetrics = new Resource$Management$Custommetrics(this.context);\n      this.experiments = new Resource$Management$Experiments(this.context);\n      this.filters = new Resource$Management$Filters(this.context);\n      this.goals = new Resource$Management$Goals(this.context);\n      this.profileFilterLinks = new Resource$Management$Profilefilterlinks(this.context);\n      this.profiles = new Resource$Management$Profiles(this.context);\n      this.profileUserLinks = new Resource$Management$Profileuserlinks(this.context);\n      this.remarketingAudience = new Resource$Management$Remarketingaudience(this.context);\n      this.segments = new Resource$Management$Segments(this.context);\n      this.unsampledReports = new Resource$Management$Unsampledreports(this.context);\n      this.uploads = new Resource$Management$Uploads(this.context);\n      this.webproperties = new Resource$Management$Webproperties(this.context);\n      this.webPropertyAdWordsLinks = new Resource$Management$Webpropertyadwordslinks(this.context);\n      this.webpropertyUserLinks = new Resource$Management$Webpropertyuserlinks(this.context);\n    }\n\n  }\n\n  analytics_v3.Resource$Management = Resource$Management;\n\n  class Resource$Management$Accounts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Accounts = Resource$Management$Accounts;\n\n  class Resource$Management$Accountsummaries {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accountSummaries').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Accountsummaries = Resource$Management$Accountsummaries;\n\n  class Resource$Management$Accountuserlinks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'linkId'],\n        pathParams: ['accountId', 'linkId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'linkId'],\n        pathParams: ['accountId', 'linkId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Accountuserlinks = Resource$Management$Accountuserlinks;\n\n  class Resource$Management$Clientid {\n    constructor(context) {\n      this.context = context;\n    }\n\n    hashClientId(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/clientId:hashClientId').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Clientid = Resource$Management$Clientid;\n\n  class Resource$Management$Customdatasources {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Customdatasources = Resource$Management$Customdatasources;\n\n  class Resource$Management$Customdimensions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],\n        pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],\n        pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],\n        pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Customdimensions = Resource$Management$Customdimensions;\n\n  class Resource$Management$Custommetrics {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],\n        pathParams: ['accountId', 'customMetricId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],\n        pathParams: ['accountId', 'customMetricId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],\n        pathParams: ['accountId', 'customMetricId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Custommetrics = Resource$Management$Custommetrics;\n\n  class Resource$Management$Experiments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],\n        pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],\n        pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],\n        pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'experimentId'],\n        pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Experiments = Resource$Management$Experiments;\n\n  class Resource$Management$Filters {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'filterId'],\n        pathParams: ['accountId', 'filterId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'filterId'],\n        pathParams: ['accountId', 'filterId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'filterId'],\n        pathParams: ['accountId', 'filterId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'filterId'],\n        pathParams: ['accountId', 'filterId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Filters = Resource$Management$Filters;\n\n  class Resource$Management$Goals {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],\n        pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],\n        pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],\n        pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Goals = Resource$Management$Goals;\n\n  class Resource$Management$Profilefilterlinks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n        pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n        pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n        pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n        pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Profilefilterlinks = Resource$Management$Profilefilterlinks;\n\n  class Resource$Management$Profiles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Profiles = Resource$Management$Profiles;\n\n  class Resource$Management$Profileuserlinks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n        pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n        pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Profileuserlinks = Resource$Management$Profileuserlinks;\n\n  class Resource$Management$Remarketingaudience {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n        pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n        pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n        pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n        pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Remarketingaudience = Resource$Management$Remarketingaudience;\n\n  class Resource$Management$Segments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/segments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Segments = Resource$Management$Segments;\n\n  class Resource$Management$Unsampledreports {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'unsampledReportId'],\n        pathParams: ['accountId', 'profileId', 'unsampledReportId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId', 'unsampledReportId'],\n        pathParams: ['accountId', 'profileId', 'unsampledReportId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n        pathParams: ['accountId', 'profileId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Unsampledreports = Resource$Management$Unsampledreports;\n\n  class Resource$Management$Uploads {\n    constructor(context) {\n      this.context = context;\n    }\n\n    deleteUploadData(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],\n        pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId', 'uploadId'],\n        pathParams: ['accountId', 'customDataSourceId', 'uploadId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],\n        pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    uploadData(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],\n        pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Uploads = Resource$Management$Uploads;\n\n  class Resource$Management$Webproperties {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Webproperties = Resource$Management$Webproperties;\n\n  class Resource$Management$Webpropertyadwordslinks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],\n        pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],\n        pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],\n        pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'webPropertyAdWordsLinkId'],\n        pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Webpropertyadwordslinks = Resource$Management$Webpropertyadwordslinks;\n\n  class Resource$Management$Webpropertyuserlinks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'linkId'],\n        pathParams: ['accountId', 'linkId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId'],\n        pathParams: ['accountId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'webPropertyId', 'linkId'],\n        pathParams: ['accountId', 'linkId', 'webPropertyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Management$Webpropertyuserlinks = Resource$Management$Webpropertyuserlinks;\n\n  class Resource$Metadata {\n    constructor(context) {\n      this.context = context;\n      this.columns = new Resource$Metadata$Columns(this.context);\n    }\n\n  }\n\n  analytics_v3.Resource$Metadata = Resource$Metadata;\n\n  class Resource$Metadata$Columns {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/metadata/{reportType}/columns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['reportType'],\n        pathParams: ['reportType'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Metadata$Columns = Resource$Metadata$Columns;\n\n  class Resource$Provisioning {\n    constructor(context) {\n      this.context = context;\n    }\n\n    createAccountTicket(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/provisioning/createAccountTicket').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    createAccountTree(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/provisioning/createAccountTree').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Provisioning = Resource$Provisioning;\n\n  class Resource$Userdeletion {\n    constructor(context) {\n      this.context = context;\n      this.userDeletionRequest = new Resource$Userdeletion$Userdeletionrequest(this.context);\n    }\n\n  }\n\n  analytics_v3.Resource$Userdeletion = Resource$Userdeletion;\n\n  class Resource$Userdeletion$Userdeletionrequest {\n    constructor(context) {\n      this.context = context;\n    }\n\n    upsert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/analytics/v3/userDeletion/userDeletionRequests:upsert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  analytics_v3.Resource$Userdeletion$Userdeletionrequest = Resource$Userdeletion$Userdeletionrequest;\n})(analytics_v3 = exports.analytics_v3 || (exports.analytics_v3 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","analytics_v3","googleapis_common_1","require","Analytics","constructor","options","google","context","_options","data","Resource$Data","management","Resource$Management","metadata","Resource$Metadata","provisioning","Resource$Provisioning","userDeletion","Resource$Userdeletion","ga","Resource$Data$Ga","mcf","Resource$Data$Mcf","realtime","Resource$Data$Realtime","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","accounts","Resource$Management$Accounts","accountSummaries","Resource$Management$Accountsummaries","accountUserLinks","Resource$Management$Accountuserlinks","clientId","Resource$Management$Clientid","customDataSources","Resource$Management$Customdatasources","customDimensions","Resource$Management$Customdimensions","customMetrics","Resource$Management$Custommetrics","experiments","Resource$Management$Experiments","filters","Resource$Management$Filters","goals","Resource$Management$Goals","profileFilterLinks","Resource$Management$Profilefilterlinks","profiles","Resource$Management$Profiles","profileUserLinks","Resource$Management$Profileuserlinks","remarketingAudience","Resource$Management$Remarketingaudience","segments","Resource$Management$Segments","unsampledReports","Resource$Management$Unsampledreports","uploads","Resource$Management$Uploads","webproperties","Resource$Management$Webproperties","webPropertyAdWordsLinks","Resource$Management$Webpropertyadwordslinks","webpropertyUserLinks","Resource$Management$Webpropertyuserlinks","list","delete","insert","update","hashClientId","patch","deleteUploadData","uploadData","mediaUrl","columns","Resource$Metadata$Columns","createAccountTicket","createAccountTree","userDeletionRequest","Resource$Userdeletion$Userdeletionrequest","upsert"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/analytics/v3.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.analytics_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar analytics_v3;\n(function (analytics_v3) {\n    /**\n     * Google Analytics API\n     *\n     * Views and manages your Google Analytics data.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const analytics = google.analytics('v3');\n     * ```\n     */\n    class Analytics {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.data = new Resource$Data(this.context);\n            this.management = new Resource$Management(this.context);\n            this.metadata = new Resource$Metadata(this.context);\n            this.provisioning = new Resource$Provisioning(this.context);\n            this.userDeletion = new Resource$Userdeletion(this.context);\n        }\n    }\n    analytics_v3.Analytics = Analytics;\n    class Resource$Data {\n        constructor(context) {\n            this.context = context;\n            this.ga = new Resource$Data$Ga(this.context);\n            this.mcf = new Resource$Data$Mcf(this.context);\n            this.realtime = new Resource$Data$Realtime(this.context);\n        }\n    }\n    analytics_v3.Resource$Data = Resource$Data;\n    class Resource$Data$Ga {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/data/ga').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Data$Ga = Resource$Data$Ga;\n    class Resource$Data$Mcf {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/data/mcf').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Data$Mcf = Resource$Data$Mcf;\n    class Resource$Data$Realtime {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/data/realtime').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['ids', 'metrics'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Data$Realtime = Resource$Data$Realtime;\n    class Resource$Management {\n        constructor(context) {\n            this.context = context;\n            this.accounts = new Resource$Management$Accounts(this.context);\n            this.accountSummaries = new Resource$Management$Accountsummaries(this.context);\n            this.accountUserLinks = new Resource$Management$Accountuserlinks(this.context);\n            this.clientId = new Resource$Management$Clientid(this.context);\n            this.customDataSources = new Resource$Management$Customdatasources(this.context);\n            this.customDimensions = new Resource$Management$Customdimensions(this.context);\n            this.customMetrics = new Resource$Management$Custommetrics(this.context);\n            this.experiments = new Resource$Management$Experiments(this.context);\n            this.filters = new Resource$Management$Filters(this.context);\n            this.goals = new Resource$Management$Goals(this.context);\n            this.profileFilterLinks = new Resource$Management$Profilefilterlinks(this.context);\n            this.profiles = new Resource$Management$Profiles(this.context);\n            this.profileUserLinks = new Resource$Management$Profileuserlinks(this.context);\n            this.remarketingAudience = new Resource$Management$Remarketingaudience(this.context);\n            this.segments = new Resource$Management$Segments(this.context);\n            this.unsampledReports = new Resource$Management$Unsampledreports(this.context);\n            this.uploads = new Resource$Management$Uploads(this.context);\n            this.webproperties = new Resource$Management$Webproperties(this.context);\n            this.webPropertyAdWordsLinks =\n                new Resource$Management$Webpropertyadwordslinks(this.context);\n            this.webpropertyUserLinks = new Resource$Management$Webpropertyuserlinks(this.context);\n        }\n    }\n    analytics_v3.Resource$Management = Resource$Management;\n    class Resource$Management$Accounts {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/management/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Accounts = Resource$Management$Accounts;\n    class Resource$Management$Accountsummaries {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/management/accountSummaries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Accountsummaries = Resource$Management$Accountsummaries;\n    class Resource$Management$Accountuserlinks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'linkId'],\n                pathParams: ['accountId', 'linkId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'linkId'],\n                pathParams: ['accountId', 'linkId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Accountuserlinks = Resource$Management$Accountuserlinks;\n    class Resource$Management$Clientid {\n        constructor(context) {\n            this.context = context;\n        }\n        hashClientId(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/management/clientId:hashClientId').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Clientid = Resource$Management$Clientid;\n    class Resource$Management$Customdatasources {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Customdatasources = Resource$Management$Customdatasources;\n    class Resource$Management$Customdimensions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],\n                pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],\n                pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'customDimensionId'],\n                pathParams: ['accountId', 'customDimensionId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Customdimensions = Resource$Management$Customdimensions;\n    class Resource$Management$Custommetrics {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],\n                pathParams: ['accountId', 'customMetricId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],\n                pathParams: ['accountId', 'customMetricId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'customMetricId'],\n                pathParams: ['accountId', 'customMetricId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Custommetrics = Resource$Management$Custommetrics;\n    class Resource$Management$Experiments {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'profileId',\n                    'experimentId',\n                ],\n                pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'profileId',\n                    'experimentId',\n                ],\n                pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'profileId',\n                    'experimentId',\n                ],\n                pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'profileId',\n                    'experimentId',\n                ],\n                pathParams: ['accountId', 'experimentId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Experiments = Resource$Management$Experiments;\n    class Resource$Management$Filters {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'filterId'],\n                pathParams: ['accountId', 'filterId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'filterId'],\n                pathParams: ['accountId', 'filterId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/management/accounts/{accountId}/filters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'filterId'],\n                pathParams: ['accountId', 'filterId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/filters/{filterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'filterId'],\n                pathParams: ['accountId', 'filterId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Filters = Resource$Management$Filters;\n    class Resource$Management$Goals {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],\n                pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],\n                pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId', 'goalId'],\n                pathParams: ['accountId', 'goalId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Goals = Resource$Management$Goals;\n    class Resource$Management$Profilefilterlinks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n                pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n                pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n                pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n                pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Profilefilterlinks = Resource$Management$Profilefilterlinks;\n    class Resource$Management$Profiles {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Profiles = Resource$Management$Profiles;\n    class Resource$Management$Profileuserlinks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n                pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId', 'linkId'],\n                pathParams: ['accountId', 'linkId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Profileuserlinks = Resource$Management$Profileuserlinks;\n    class Resource$Management$Remarketingaudience {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n                pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n                pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n                pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'remarketingAudienceId'],\n                pathParams: ['accountId', 'remarketingAudienceId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Remarketingaudience = Resource$Management$Remarketingaudience;\n    class Resource$Management$Segments {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/management/segments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Segments = Resource$Management$Segments;\n    class Resource$Management$Unsampledreports {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'profileId',\n                    'unsampledReportId',\n                ],\n                pathParams: [\n                    'accountId',\n                    'profileId',\n                    'unsampledReportId',\n                    'webPropertyId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'profileId',\n                    'unsampledReportId',\n                ],\n                pathParams: [\n                    'accountId',\n                    'profileId',\n                    'unsampledReportId',\n                    'webPropertyId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'profileId'],\n                pathParams: ['accountId', 'profileId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Unsampledreports = Resource$Management$Unsampledreports;\n    class Resource$Management$Uploads {\n        constructor(context) {\n            this.context = context;\n        }\n        deleteUploadData(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],\n                pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'customDataSourceId',\n                    'uploadId',\n                ],\n                pathParams: [\n                    'accountId',\n                    'customDataSourceId',\n                    'uploadId',\n                    'webPropertyId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],\n                pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        uploadData(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['accountId', 'webPropertyId', 'customDataSourceId'],\n                pathParams: ['accountId', 'customDataSourceId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Uploads = Resource$Management$Uploads;\n    class Resource$Management$Webproperties {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Webproperties = Resource$Management$Webproperties;\n    class Resource$Management$Webpropertyadwordslinks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'webPropertyAdWordsLinkId',\n                ],\n                pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'webPropertyAdWordsLinkId',\n                ],\n                pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'webPropertyAdWordsLinkId',\n                ],\n                pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [\n                    'accountId',\n                    'webPropertyId',\n                    'webPropertyAdWordsLinkId',\n                ],\n                pathParams: ['accountId', 'webPropertyAdWordsLinkId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Webpropertyadwordslinks = Resource$Management$Webpropertyadwordslinks;\n    class Resource$Management$Webpropertyuserlinks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'linkId'],\n                pathParams: ['accountId', 'linkId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId'],\n                pathParams: ['accountId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/analytics/v3/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'webPropertyId', 'linkId'],\n                pathParams: ['accountId', 'linkId', 'webPropertyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Management$Webpropertyuserlinks = Resource$Management$Webpropertyuserlinks;\n    class Resource$Metadata {\n        constructor(context) {\n            this.context = context;\n            this.columns = new Resource$Metadata$Columns(this.context);\n        }\n    }\n    analytics_v3.Resource$Metadata = Resource$Metadata;\n    class Resource$Metadata$Columns {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/metadata/{reportType}/columns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['reportType'],\n                pathParams: ['reportType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Metadata$Columns = Resource$Metadata$Columns;\n    class Resource$Provisioning {\n        constructor(context) {\n            this.context = context;\n        }\n        createAccountTicket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/provisioning/createAccountTicket').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createAccountTree(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/provisioning/createAccountTree').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Provisioning = Resource$Provisioning;\n    class Resource$Userdeletion {\n        constructor(context) {\n            this.context = context;\n            this.userDeletionRequest = new Resource$Userdeletion$Userdeletionrequest(this.context);\n        }\n    }\n    analytics_v3.Resource$Userdeletion = Resource$Userdeletion;\n    class Resource$Userdeletion$Userdeletionrequest {\n        constructor(context) {\n            this.context = context;\n        }\n        upsert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analytics.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/analytics/v3/userDeletion/userDeletionRequests:upsert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analytics_v3.Resource$Userdeletion$Userdeletionrequest = Resource$Userdeletion$Userdeletionrequest;\n})(analytics_v3 = exports.analytics_v3 || (exports.analytics_v3 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}