{"ast":null,"code":"/**\n * Cipher base API.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nrequire('./util');\n\nmodule.exports = forge.cipher = forge.cipher || {}; // registered algorithms\n\nforge.cipher.algorithms = forge.cipher.algorithms || {};\n/**\n * Creates a cipher object that can be used to encrypt data using the given\n * algorithm and key. The algorithm may be provided as a string value for a\n * previously registered algorithm or it may be given as a cipher algorithm\n * API object.\n *\n * @param algorithm the algorithm to use, either a string or an algorithm API\n *          object.\n * @param key the key to use, as a binary-encoded string of bytes or a\n *          byte buffer.\n *\n * @return the cipher.\n */\n\nforge.cipher.createCipher = function (algorithm, key) {\n  var api = algorithm;\n\n  if (typeof api === 'string') {\n    api = forge.cipher.getAlgorithm(api);\n\n    if (api) {\n      api = api();\n    }\n  }\n\n  if (!api) {\n    throw new Error('Unsupported algorithm: ' + algorithm);\n  } // assume block cipher\n\n\n  return new forge.cipher.BlockCipher({\n    algorithm: api,\n    key: key,\n    decrypt: false\n  });\n};\n/**\n * Creates a decipher object that can be used to decrypt data using the given\n * algorithm and key. The algorithm may be provided as a string value for a\n * previously registered algorithm or it may be given as a cipher algorithm\n * API object.\n *\n * @param algorithm the algorithm to use, either a string or an algorithm API\n *          object.\n * @param key the key to use, as a binary-encoded string of bytes or a\n *          byte buffer.\n *\n * @return the cipher.\n */\n\n\nforge.cipher.createDecipher = function (algorithm, key) {\n  var api = algorithm;\n\n  if (typeof api === 'string') {\n    api = forge.cipher.getAlgorithm(api);\n\n    if (api) {\n      api = api();\n    }\n  }\n\n  if (!api) {\n    throw new Error('Unsupported algorithm: ' + algorithm);\n  } // assume block cipher\n\n\n  return new forge.cipher.BlockCipher({\n    algorithm: api,\n    key: key,\n    decrypt: true\n  });\n};\n/**\n * Registers an algorithm by name. If the name was already registered, the\n * algorithm API object will be overwritten.\n *\n * @param name the name of the algorithm.\n * @param algorithm the algorithm API object.\n */\n\n\nforge.cipher.registerAlgorithm = function (name, algorithm) {\n  name = name.toUpperCase();\n  forge.cipher.algorithms[name] = algorithm;\n};\n/**\n * Gets a registered algorithm by name.\n *\n * @param name the name of the algorithm.\n *\n * @return the algorithm, if found, null if not.\n */\n\n\nforge.cipher.getAlgorithm = function (name) {\n  name = name.toUpperCase();\n\n  if (name in forge.cipher.algorithms) {\n    return forge.cipher.algorithms[name];\n  }\n\n  return null;\n};\n\nvar BlockCipher = forge.cipher.BlockCipher = function (options) {\n  this.algorithm = options.algorithm;\n  this.mode = this.algorithm.mode;\n  this.blockSize = this.mode.blockSize;\n  this._finish = false;\n  this._input = null;\n  this.output = null;\n  this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;\n  this._decrypt = options.decrypt;\n  this.algorithm.initialize(options);\n};\n/**\n * Starts or restarts the encryption or decryption process, whichever\n * was previously configured.\n *\n * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array\n * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in\n * bytes, then it must be Nb (16) bytes in length. If the IV is given in as\n * 32-bit integers, then it must be 4 integers long.\n *\n * Note: an IV is not required or used in ECB mode.\n *\n * For GCM-mode, the IV must be given as a binary-encoded string of bytes or\n * a byte buffer. The number of bytes should be 12 (96 bits) as recommended\n * by NIST SP-800-38D but another length may be given.\n *\n * @param options the options to use:\n *          iv the initialization vector to use as a binary-encoded string of\n *            bytes, null to reuse the last ciphered block from a previous\n *            update() (this \"residue\" method is for legacy support only).\n *          additionalData additional authentication data as a binary-encoded\n *            string of bytes, for 'GCM' mode, (default: none).\n *          tagLength desired length of authentication tag, in bits, for\n *            'GCM' mode (0-128, default: 128).\n *          tag the authentication tag to check if decrypting, as a\n *             binary-encoded string of bytes.\n *          output the output the buffer to write to, null to create one.\n */\n\n\nBlockCipher.prototype.start = function (options) {\n  options = options || {};\n  var opts = {};\n\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  opts.decrypt = this._decrypt;\n  this._finish = false;\n  this._input = forge.util.createBuffer();\n  this.output = options.output || forge.util.createBuffer();\n  this.mode.start(opts);\n};\n/**\n * Updates the next block according to the cipher mode.\n *\n * @param input the buffer to read from.\n */\n\n\nBlockCipher.prototype.update = function (input) {\n  if (input) {\n    // input given, so empty it into the input buffer\n    this._input.putBuffer(input);\n  } // do cipher operation until it needs more input and not finished\n\n\n  while (!this._op.call(this.mode, this._input, this.output, this._finish) && !this._finish) {} // free consumed memory from input buffer\n\n\n  this._input.compact();\n};\n/**\n * Finishes encrypting or decrypting.\n *\n * @param pad a padding function to use in CBC mode, null for default,\n *          signature(blockSize, buffer, decrypt).\n *\n * @return true if successful, false on error.\n */\n\n\nBlockCipher.prototype.finish = function (pad) {\n  // backwards-compatibility w/deprecated padding API\n  // Note: will overwrite padding functions even after another start() call\n  if (pad && (this.mode.name === 'ECB' || this.mode.name === 'CBC')) {\n    this.mode.pad = function (input) {\n      return pad(this.blockSize, input, false);\n    };\n\n    this.mode.unpad = function (output) {\n      return pad(this.blockSize, output, true);\n    };\n  } // build options for padding and afterFinish functions\n\n\n  var options = {};\n  options.decrypt = this._decrypt; // get # of bytes that won't fill a block\n\n  options.overflow = this._input.length() % this.blockSize;\n\n  if (!this._decrypt && this.mode.pad) {\n    if (!this.mode.pad(this._input, options)) {\n      return false;\n    }\n  } // do final update\n\n\n  this._finish = true;\n  this.update();\n\n  if (this._decrypt && this.mode.unpad) {\n    if (!this.mode.unpad(this.output, options)) {\n      return false;\n    }\n  }\n\n  if (this.mode.afterFinish) {\n    if (!this.mode.afterFinish(this.output, options)) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":{"version":3,"names":["forge","require","module","exports","cipher","algorithms","createCipher","algorithm","key","api","getAlgorithm","Error","BlockCipher","decrypt","createDecipher","registerAlgorithm","name","toUpperCase","options","mode","blockSize","_finish","_input","output","_op","encrypt","_decrypt","initialize","prototype","start","opts","util","createBuffer","update","input","putBuffer","call","compact","finish","pad","unpad","overflow","length","afterFinish"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/node-forge/lib/cipher.js"],"sourcesContent":["/**\n * Cipher base API.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\nmodule.exports = forge.cipher = forge.cipher || {};\n\n// registered algorithms\nforge.cipher.algorithms = forge.cipher.algorithms || {};\n\n/**\n * Creates a cipher object that can be used to encrypt data using the given\n * algorithm and key. The algorithm may be provided as a string value for a\n * previously registered algorithm or it may be given as a cipher algorithm\n * API object.\n *\n * @param algorithm the algorithm to use, either a string or an algorithm API\n *          object.\n * @param key the key to use, as a binary-encoded string of bytes or a\n *          byte buffer.\n *\n * @return the cipher.\n */\nforge.cipher.createCipher = function(algorithm, key) {\n  var api = algorithm;\n  if(typeof api === 'string') {\n    api = forge.cipher.getAlgorithm(api);\n    if(api) {\n      api = api();\n    }\n  }\n  if(!api) {\n    throw new Error('Unsupported algorithm: ' + algorithm);\n  }\n\n  // assume block cipher\n  return new forge.cipher.BlockCipher({\n    algorithm: api,\n    key: key,\n    decrypt: false\n  });\n};\n\n/**\n * Creates a decipher object that can be used to decrypt data using the given\n * algorithm and key. The algorithm may be provided as a string value for a\n * previously registered algorithm or it may be given as a cipher algorithm\n * API object.\n *\n * @param algorithm the algorithm to use, either a string or an algorithm API\n *          object.\n * @param key the key to use, as a binary-encoded string of bytes or a\n *          byte buffer.\n *\n * @return the cipher.\n */\nforge.cipher.createDecipher = function(algorithm, key) {\n  var api = algorithm;\n  if(typeof api === 'string') {\n    api = forge.cipher.getAlgorithm(api);\n    if(api) {\n      api = api();\n    }\n  }\n  if(!api) {\n    throw new Error('Unsupported algorithm: ' + algorithm);\n  }\n\n  // assume block cipher\n  return new forge.cipher.BlockCipher({\n    algorithm: api,\n    key: key,\n    decrypt: true\n  });\n};\n\n/**\n * Registers an algorithm by name. If the name was already registered, the\n * algorithm API object will be overwritten.\n *\n * @param name the name of the algorithm.\n * @param algorithm the algorithm API object.\n */\nforge.cipher.registerAlgorithm = function(name, algorithm) {\n  name = name.toUpperCase();\n  forge.cipher.algorithms[name] = algorithm;\n};\n\n/**\n * Gets a registered algorithm by name.\n *\n * @param name the name of the algorithm.\n *\n * @return the algorithm, if found, null if not.\n */\nforge.cipher.getAlgorithm = function(name) {\n  name = name.toUpperCase();\n  if(name in forge.cipher.algorithms) {\n    return forge.cipher.algorithms[name];\n  }\n  return null;\n};\n\nvar BlockCipher = forge.cipher.BlockCipher = function(options) {\n  this.algorithm = options.algorithm;\n  this.mode = this.algorithm.mode;\n  this.blockSize = this.mode.blockSize;\n  this._finish = false;\n  this._input = null;\n  this.output = null;\n  this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;\n  this._decrypt = options.decrypt;\n  this.algorithm.initialize(options);\n};\n\n/**\n * Starts or restarts the encryption or decryption process, whichever\n * was previously configured.\n *\n * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array\n * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in\n * bytes, then it must be Nb (16) bytes in length. If the IV is given in as\n * 32-bit integers, then it must be 4 integers long.\n *\n * Note: an IV is not required or used in ECB mode.\n *\n * For GCM-mode, the IV must be given as a binary-encoded string of bytes or\n * a byte buffer. The number of bytes should be 12 (96 bits) as recommended\n * by NIST SP-800-38D but another length may be given.\n *\n * @param options the options to use:\n *          iv the initialization vector to use as a binary-encoded string of\n *            bytes, null to reuse the last ciphered block from a previous\n *            update() (this \"residue\" method is for legacy support only).\n *          additionalData additional authentication data as a binary-encoded\n *            string of bytes, for 'GCM' mode, (default: none).\n *          tagLength desired length of authentication tag, in bits, for\n *            'GCM' mode (0-128, default: 128).\n *          tag the authentication tag to check if decrypting, as a\n *             binary-encoded string of bytes.\n *          output the output the buffer to write to, null to create one.\n */\nBlockCipher.prototype.start = function(options) {\n  options = options || {};\n  var opts = {};\n  for(var key in options) {\n    opts[key] = options[key];\n  }\n  opts.decrypt = this._decrypt;\n  this._finish = false;\n  this._input = forge.util.createBuffer();\n  this.output = options.output || forge.util.createBuffer();\n  this.mode.start(opts);\n};\n\n/**\n * Updates the next block according to the cipher mode.\n *\n * @param input the buffer to read from.\n */\nBlockCipher.prototype.update = function(input) {\n  if(input) {\n    // input given, so empty it into the input buffer\n    this._input.putBuffer(input);\n  }\n\n  // do cipher operation until it needs more input and not finished\n  while(!this._op.call(this.mode, this._input, this.output, this._finish) &&\n    !this._finish) {}\n\n  // free consumed memory from input buffer\n  this._input.compact();\n};\n\n/**\n * Finishes encrypting or decrypting.\n *\n * @param pad a padding function to use in CBC mode, null for default,\n *          signature(blockSize, buffer, decrypt).\n *\n * @return true if successful, false on error.\n */\nBlockCipher.prototype.finish = function(pad) {\n  // backwards-compatibility w/deprecated padding API\n  // Note: will overwrite padding functions even after another start() call\n  if(pad && (this.mode.name === 'ECB' || this.mode.name === 'CBC')) {\n    this.mode.pad = function(input) {\n      return pad(this.blockSize, input, false);\n    };\n    this.mode.unpad = function(output) {\n      return pad(this.blockSize, output, true);\n    };\n  }\n\n  // build options for padding and afterFinish functions\n  var options = {};\n  options.decrypt = this._decrypt;\n\n  // get # of bytes that won't fill a block\n  options.overflow = this._input.length() % this.blockSize;\n\n  if(!this._decrypt && this.mode.pad) {\n    if(!this.mode.pad(this._input, options)) {\n      return false;\n    }\n  }\n\n  // do final update\n  this._finish = true;\n  this.update();\n\n  if(this._decrypt && this.mode.unpad) {\n    if(!this.mode.unpad(this.output, options)) {\n      return false;\n    }\n  }\n\n  if(this.mode.afterFinish) {\n    if(!this.mode.afterFinish(this.output, options)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}