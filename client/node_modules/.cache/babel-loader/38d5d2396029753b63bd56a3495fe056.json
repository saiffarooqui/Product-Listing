{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.books_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar books_v1;\n\n(function (books_v1) {\n  /**\n   * Books API\n   *\n   * The Google Books API allows clients to access the Google Books repository.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const books = google.books('v1');\n   * ```\n   */\n  class Books {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.bookshelves = new Resource$Bookshelves(this.context);\n      this.cloudloading = new Resource$Cloudloading(this.context);\n      this.dictionary = new Resource$Dictionary(this.context);\n      this.familysharing = new Resource$Familysharing(this.context);\n      this.layers = new Resource$Layers(this.context);\n      this.myconfig = new Resource$Myconfig(this.context);\n      this.mylibrary = new Resource$Mylibrary(this.context);\n      this.notification = new Resource$Notification(this.context);\n      this.onboarding = new Resource$Onboarding(this.context);\n      this.personalizedstream = new Resource$Personalizedstream(this.context);\n      this.promooffer = new Resource$Promooffer(this.context);\n      this.series = new Resource$Series(this.context);\n      this.volumes = new Resource$Volumes(this.context);\n    }\n\n  }\n\n  books_v1.Books = Books;\n\n  class Resource$Bookshelves {\n    constructor(context) {\n      this.context = context;\n      this.volumes = new Resource$Bookshelves$Volumes(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'shelf'],\n        pathParams: ['shelf', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Bookshelves = Resource$Bookshelves;\n\n  class Resource$Bookshelves$Volumes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'shelf'],\n        pathParams: ['shelf', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Bookshelves$Volumes = Resource$Bookshelves$Volumes;\n\n  class Resource$Cloudloading {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addBook(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    deleteBook(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateBook(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Cloudloading = Resource$Cloudloading;\n\n  class Resource$Dictionary {\n    constructor(context) {\n      this.context = context;\n    }\n\n    listOfflineMetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['cpksver'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Dictionary = Resource$Dictionary;\n\n  class Resource$Familysharing {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getFamilyInfo(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    share(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    unshare(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Familysharing = Resource$Familysharing;\n\n  class Resource$Layers {\n    constructor(context) {\n      this.context = context;\n      this.annotationData = new Resource$Layers$Annotationdata(this.context);\n      this.volumeAnnotations = new Resource$Layers$Volumeannotations(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'summaryId'],\n        pathParams: ['summaryId', 'volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Layers = Resource$Layers;\n\n  class Resource$Layers$Annotationdata {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'annotationDataId', 'contentVersion'],\n        pathParams: ['annotationDataId', 'layerId', 'volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n        pathParams: ['layerId', 'volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Layers$Annotationdata = Resource$Layers$Annotationdata;\n\n  class Resource$Layers$Volumeannotations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'annotationId'],\n        pathParams: ['annotationId', 'layerId', 'volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n        pathParams: ['layerId', 'volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Layers$Volumeannotations = Resource$Layers$Volumeannotations;\n\n  class Resource$Myconfig {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    releaseDownloadAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['cpksver', 'volumeIds'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    requestAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['cpksver', 'nonce', 'source', 'volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    syncVolumeLicenses(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['cpksver', 'nonce', 'source'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Myconfig = Resource$Myconfig;\n\n  class Resource$Mylibrary {\n    constructor(context) {\n      this.context = context;\n      this.annotations = new Resource$Mylibrary$Annotations(this.context);\n      this.bookshelves = new Resource$Mylibrary$Bookshelves(this.context);\n      this.readingpositions = new Resource$Mylibrary$Readingpositions(this.context);\n    }\n\n  }\n\n  books_v1.Resource$Mylibrary = Resource$Mylibrary;\n\n  class Resource$Mylibrary$Annotations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['annotationId'],\n        pathParams: ['annotationId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    summary(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['layerIds', 'volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['annotationId'],\n        pathParams: ['annotationId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Mylibrary$Annotations = Resource$Mylibrary$Annotations;\n\n  class Resource$Mylibrary$Bookshelves {\n    constructor(context) {\n      this.context = context;\n      this.volumes = new Resource$Mylibrary$Bookshelves$Volumes(this.context);\n    }\n\n    addVolume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf', 'volumeId'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    clearVolumes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['shelf'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    moveVolume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf', 'volumeId', 'volumePosition'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    removeVolume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf', 'volumeId'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Mylibrary$Bookshelves = Resource$Mylibrary$Bookshelves;\n\n  class Resource$Mylibrary$Bookshelves$Volumes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['shelf'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Mylibrary$Bookshelves$Volumes = Resource$Mylibrary$Bookshelves$Volumes;\n\n  class Resource$Mylibrary$Readingpositions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setPosition(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'position', 'timestamp'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Mylibrary$Readingpositions = Resource$Mylibrary$Readingpositions;\n\n  class Resource$Notification {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['notification_id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Notification = Resource$Notification;\n\n  class Resource$Onboarding {\n    constructor(context) {\n      this.context = context;\n    }\n\n    listCategories(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    listCategoryVolumes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Onboarding = Resource$Onboarding;\n\n  class Resource$Personalizedstream {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Personalizedstream = Resource$Personalizedstream;\n\n  class Resource$Promooffer {\n    constructor(context) {\n      this.context = context;\n    }\n\n    accept(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    dismiss(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Promooffer = Resource$Promooffer;\n\n  class Resource$Series {\n    constructor(context) {\n      this.context = context;\n      this.membership = new Resource$Series$Membership(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/series/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['series_id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Series = Resource$Series;\n\n  class Resource$Series$Membership {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['series_id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Series$Membership = Resource$Series$Membership;\n\n  class Resource$Volumes {\n    constructor(context) {\n      this.context = context;\n      this.associated = new Resource$Volumes$Associated(this.context);\n      this.mybooks = new Resource$Volumes$Mybooks(this.context);\n      this.recommended = new Resource$Volumes$Recommended(this.context);\n      this.useruploaded = new Resource$Volumes$Useruploaded(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['q'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Volumes = Resource$Volumes;\n\n  class Resource$Volumes$Associated {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Volumes$Associated = Resource$Volumes$Associated;\n\n  class Resource$Volumes$Mybooks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Volumes$Mybooks = Resource$Volumes$Mybooks;\n\n  class Resource$Volumes$Recommended {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    rate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['rating', 'volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Volumes$Recommended = Resource$Volumes$Recommended;\n\n  class Resource$Volumes$Useruploaded {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Volumes$Useruploaded = Resource$Volumes$Useruploaded;\n})(books_v1 = exports.books_v1 || (exports.books_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","books_v1","googleapis_common_1","require","Books","constructor","options","google","context","_options","bookshelves","Resource$Bookshelves","cloudloading","Resource$Cloudloading","dictionary","Resource$Dictionary","familysharing","Resource$Familysharing","layers","Resource$Layers","myconfig","Resource$Myconfig","mylibrary","Resource$Mylibrary","notification","Resource$Notification","onboarding","Resource$Onboarding","personalizedstream","Resource$Personalizedstream","promooffer","Resource$Promooffer","series","Resource$Series","volumes","Resource$Volumes","Resource$Bookshelves$Volumes","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","addBook","deleteBook","updateBook","listOfflineMetadata","getFamilyInfo","share","unshare","annotationData","Resource$Layers$Annotationdata","volumeAnnotations","Resource$Layers$Volumeannotations","getUserSettings","releaseDownloadAccess","requestAccess","syncVolumeLicenses","updateUserSettings","annotations","Resource$Mylibrary$Annotations","Resource$Mylibrary$Bookshelves","readingpositions","Resource$Mylibrary$Readingpositions","delete","insert","summary","update","Resource$Mylibrary$Bookshelves$Volumes","addVolume","clearVolumes","moveVolume","removeVolume","setPosition","listCategories","listCategoryVolumes","accept","dismiss","membership","Resource$Series$Membership","associated","Resource$Volumes$Associated","mybooks","Resource$Volumes$Mybooks","recommended","Resource$Volumes$Recommended","useruploaded","Resource$Volumes$Useruploaded","rate"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/books/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.books_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar books_v1;\n(function (books_v1) {\n    /**\n     * Books API\n     *\n     * The Google Books API allows clients to access the Google Books repository.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const books = google.books('v1');\n     * ```\n     */\n    class Books {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.bookshelves = new Resource$Bookshelves(this.context);\n            this.cloudloading = new Resource$Cloudloading(this.context);\n            this.dictionary = new Resource$Dictionary(this.context);\n            this.familysharing = new Resource$Familysharing(this.context);\n            this.layers = new Resource$Layers(this.context);\n            this.myconfig = new Resource$Myconfig(this.context);\n            this.mylibrary = new Resource$Mylibrary(this.context);\n            this.notification = new Resource$Notification(this.context);\n            this.onboarding = new Resource$Onboarding(this.context);\n            this.personalizedstream = new Resource$Personalizedstream(this.context);\n            this.promooffer = new Resource$Promooffer(this.context);\n            this.series = new Resource$Series(this.context);\n            this.volumes = new Resource$Volumes(this.context);\n        }\n    }\n    books_v1.Books = Books;\n    class Resource$Bookshelves {\n        constructor(context) {\n            this.context = context;\n            this.volumes = new Resource$Bookshelves$Volumes(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'shelf'],\n                pathParams: ['shelf', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Bookshelves = Resource$Bookshelves;\n    class Resource$Bookshelves$Volumes {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'shelf'],\n                pathParams: ['shelf', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Bookshelves$Volumes = Resource$Bookshelves$Volumes;\n    class Resource$Cloudloading {\n        constructor(context) {\n            this.context = context;\n        }\n        addBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Cloudloading = Resource$Cloudloading;\n    class Resource$Dictionary {\n        constructor(context) {\n            this.context = context;\n        }\n        listOfflineMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['cpksver'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Dictionary = Resource$Dictionary;\n    class Resource$Familysharing {\n        constructor(context) {\n            this.context = context;\n        }\n        getFamilyInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        share(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unshare(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Familysharing = Resource$Familysharing;\n    class Resource$Layers {\n        constructor(context) {\n            this.context = context;\n            this.annotationData = new Resource$Layers$Annotationdata(this.context);\n            this.volumeAnnotations = new Resource$Layers$Volumeannotations(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'summaryId'],\n                pathParams: ['summaryId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers = Resource$Layers;\n    class Resource$Layers$Annotationdata {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'volumeId',\n                    'layerId',\n                    'annotationDataId',\n                    'contentVersion',\n                ],\n                pathParams: ['annotationDataId', 'layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n                pathParams: ['layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers$Annotationdata = Resource$Layers$Annotationdata;\n    class Resource$Layers$Volumeannotations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'annotationId'],\n                pathParams: ['annotationId', 'layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n                pathParams: ['layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers$Volumeannotations = Resource$Layers$Volumeannotations;\n    class Resource$Myconfig {\n        constructor(context) {\n            this.context = context;\n        }\n        getUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        releaseDownloadAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['cpksver', 'volumeIds'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        requestAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['cpksver', 'nonce', 'source', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        syncVolumeLicenses(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['cpksver', 'nonce', 'source'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Myconfig = Resource$Myconfig;\n    class Resource$Mylibrary {\n        constructor(context) {\n            this.context = context;\n            this.annotations = new Resource$Mylibrary$Annotations(this.context);\n            this.bookshelves = new Resource$Mylibrary$Bookshelves(this.context);\n            this.readingpositions = new Resource$Mylibrary$Readingpositions(this.context);\n        }\n    }\n    books_v1.Resource$Mylibrary = Resource$Mylibrary;\n    class Resource$Mylibrary$Annotations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['annotationId'],\n                pathParams: ['annotationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        summary(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['layerIds', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['annotationId'],\n                pathParams: ['annotationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Annotations = Resource$Mylibrary$Annotations;\n    class Resource$Mylibrary$Bookshelves {\n        constructor(context) {\n            this.context = context;\n            this.volumes = new Resource$Mylibrary$Bookshelves$Volumes(this.context);\n        }\n        addVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        clearVolumes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        moveVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId', 'volumePosition'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Bookshelves = Resource$Mylibrary$Bookshelves;\n    class Resource$Mylibrary$Bookshelves$Volumes {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Bookshelves$Volumes = Resource$Mylibrary$Bookshelves$Volumes;\n    class Resource$Mylibrary$Readingpositions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setPosition(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'position', 'timestamp'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Readingpositions = Resource$Mylibrary$Readingpositions;\n    class Resource$Notification {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['notification_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Notification = Resource$Notification;\n    class Resource$Onboarding {\n        constructor(context) {\n            this.context = context;\n        }\n        listCategories(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listCategoryVolumes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Onboarding = Resource$Onboarding;\n    class Resource$Personalizedstream {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Personalizedstream = Resource$Personalizedstream;\n    class Resource$Promooffer {\n        constructor(context) {\n            this.context = context;\n        }\n        accept(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        dismiss(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Promooffer = Resource$Promooffer;\n    class Resource$Series {\n        constructor(context) {\n            this.context = context;\n            this.membership = new Resource$Series$Membership(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/series/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['series_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Series = Resource$Series;\n    class Resource$Series$Membership {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['series_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Series$Membership = Resource$Series$Membership;\n    class Resource$Volumes {\n        constructor(context) {\n            this.context = context;\n            this.associated = new Resource$Volumes$Associated(this.context);\n            this.mybooks = new Resource$Volumes$Mybooks(this.context);\n            this.recommended = new Resource$Volumes$Recommended(this.context);\n            this.useruploaded = new Resource$Volumes$Useruploaded(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['q'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes = Resource$Volumes;\n    class Resource$Volumes$Associated {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Associated = Resource$Volumes$Associated;\n    class Resource$Volumes$Mybooks {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Mybooks = Resource$Volumes$Mybooks;\n    class Resource$Volumes$Recommended {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['rating', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Recommended = Resource$Volumes$Recommended;\n    class Resource$Volumes$Useruploaded {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Useruploaded = Resource$Volumes$Useruploaded;\n})(books_v1 = exports.books_v1 || (exports.books_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}