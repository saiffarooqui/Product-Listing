{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storage_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar storage_v1;\n\n(function (storage_v1) {\n  /**\n   * Cloud Storage JSON API\n   *\n   * Stores and retrieves potentially large, immutable data objects.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const storage = google.storage('v1');\n   * ```\n   */\n  class Storage {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.bucketAccessControls = new Resource$Bucketaccesscontrols(this.context);\n      this.buckets = new Resource$Buckets(this.context);\n      this.channels = new Resource$Channels(this.context);\n      this.defaultObjectAccessControls = new Resource$Defaultobjectaccesscontrols(this.context);\n      this.notifications = new Resource$Notifications(this.context);\n      this.objectAccessControls = new Resource$Objectaccesscontrols(this.context);\n      this.objects = new Resource$Objects(this.context);\n      this.projects = new Resource$Projects(this.context);\n    }\n\n  }\n\n  storage_v1.Storage = Storage;\n\n  class Resource$Bucketaccesscontrols {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  storage_v1.Resource$Bucketaccesscontrols = Resource$Bucketaccesscontrols;\n\n  class Resource$Buckets {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    lockRetentionPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/lockRetentionPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'ifMetagenerationMatch'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'permissions'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  storage_v1.Resource$Buckets = Resource$Buckets;\n\n  class Resource$Channels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    stop(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  storage_v1.Resource$Channels = Resource$Channels;\n\n  class Resource$Defaultobjectaccesscontrols {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  storage_v1.Resource$Defaultobjectaccesscontrols = Resource$Defaultobjectaccesscontrols;\n\n  class Resource$Notifications {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'notification'],\n        pathParams: ['bucket', 'notification'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'notification'],\n        pathParams: ['bucket', 'notification'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  storage_v1.Resource$Notifications = Resource$Notifications;\n\n  class Resource$Objectaccesscontrols {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'entity'],\n        pathParams: ['bucket', 'entity', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'entity'],\n        pathParams: ['bucket', 'entity', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'entity'],\n        pathParams: ['bucket', 'entity', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'entity'],\n        pathParams: ['bucket', 'entity', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  storage_v1.Resource$Objectaccesscontrols = Resource$Objectaccesscontrols;\n\n  class Resource$Objects {\n    constructor(context) {\n      this.context = context;\n    }\n\n    compose(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{destinationBucket}/o/{destinationObject}/compose').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['destinationBucket', 'destinationObject'],\n        pathParams: ['destinationBucket', 'destinationObject'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    copy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['sourceBucket', 'sourceObject', 'destinationBucket', 'destinationObject'],\n        pathParams: ['destinationBucket', 'destinationObject', 'sourceBucket', 'sourceObject'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    rewrite(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{sourceBucket}/o/{sourceObject}/rewriteTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['sourceBucket', 'sourceObject', 'destinationBucket', 'destinationObject'],\n        pathParams: ['destinationBucket', 'destinationObject', 'sourceBucket', 'sourceObject'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'permissions'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    watchAll(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  storage_v1.Resource$Objects = Resource$Objects;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.hmacKeys = new Resource$Projects$Hmackeys(this.context);\n      this.serviceAccount = new Resource$Projects$Serviceaccount(this.context);\n    }\n\n  }\n\n  storage_v1.Resource$Projects = Resource$Projects;\n\n  class Resource$Projects$Hmackeys {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'serviceAccountEmail'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'accessId'],\n        pathParams: ['accessId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'accessId'],\n        pathParams: ['accessId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'accessId'],\n        pathParams: ['accessId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  storage_v1.Resource$Projects$Hmackeys = Resource$Projects$Hmackeys;\n\n  class Resource$Projects$Serviceaccount {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  storage_v1.Resource$Projects$Serviceaccount = Resource$Projects$Serviceaccount;\n})(storage_v1 = exports.storage_v1 || (exports.storage_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","storage_v1","googleapis_common_1","require","Storage","constructor","options","google","context","_options","bucketAccessControls","Resource$Bucketaccesscontrols","buckets","Resource$Buckets","channels","Resource$Channels","defaultObjectAccessControls","Resource$Defaultobjectaccesscontrols","notifications","Resource$Notifications","objectAccessControls","Resource$Objectaccesscontrols","objects","Resource$Objects","projects","Resource$Projects","delete","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","insert","list","patch","update","getIamPolicy","lockRetentionPolicy","setIamPolicy","testIamPermissions","stop","compose","copy","mediaUrl","rewrite","watchAll","hmacKeys","Resource$Projects$Hmackeys","serviceAccount","Resource$Projects$Serviceaccount","create"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/storage/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storage_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar storage_v1;\n(function (storage_v1) {\n    /**\n     * Cloud Storage JSON API\n     *\n     * Stores and retrieves potentially large, immutable data objects.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const storage = google.storage('v1');\n     * ```\n     */\n    class Storage {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.bucketAccessControls = new Resource$Bucketaccesscontrols(this.context);\n            this.buckets = new Resource$Buckets(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.defaultObjectAccessControls =\n                new Resource$Defaultobjectaccesscontrols(this.context);\n            this.notifications = new Resource$Notifications(this.context);\n            this.objectAccessControls = new Resource$Objectaccesscontrols(this.context);\n            this.objects = new Resource$Objects(this.context);\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    storage_v1.Storage = Storage;\n    class Resource$Bucketaccesscontrols {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Bucketaccesscontrols = Resource$Bucketaccesscontrols;\n    class Resource$Buckets {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        lockRetentionPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/lockRetentionPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'ifMetagenerationMatch'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'permissions'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Buckets = Resource$Buckets;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Channels = Resource$Channels;\n    class Resource$Defaultobjectaccesscontrols {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Defaultobjectaccesscontrols = Resource$Defaultobjectaccesscontrols;\n    class Resource$Notifications {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'notification'],\n                pathParams: ['bucket', 'notification'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'notification'],\n                pathParams: ['bucket', 'notification'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Notifications = Resource$Notifications;\n    class Resource$Objectaccesscontrols {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Objectaccesscontrols = Resource$Objectaccesscontrols;\n    class Resource$Objects {\n        constructor(context) {\n            this.context = context;\n        }\n        compose(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{destinationBucket}/o/{destinationObject}/compose').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['destinationBucket', 'destinationObject'],\n                pathParams: ['destinationBucket', 'destinationObject'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        copy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'sourceBucket',\n                    'sourceObject',\n                    'destinationBucket',\n                    'destinationObject',\n                ],\n                pathParams: [\n                    'destinationBucket',\n                    'destinationObject',\n                    'sourceBucket',\n                    'sourceObject',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rewrite(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{sourceBucket}/o/{sourceObject}/rewriteTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'sourceBucket',\n                    'sourceObject',\n                    'destinationBucket',\n                    'destinationObject',\n                ],\n                pathParams: [\n                    'destinationBucket',\n                    'destinationObject',\n                    'sourceBucket',\n                    'sourceObject',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'permissions'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        watchAll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Objects = Resource$Objects;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.hmacKeys = new Resource$Projects$Hmackeys(this.context);\n            this.serviceAccount = new Resource$Projects$Serviceaccount(this.context);\n        }\n    }\n    storage_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Hmackeys {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'serviceAccountEmail'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'accessId'],\n                pathParams: ['accessId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'accessId'],\n                pathParams: ['accessId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'accessId'],\n                pathParams: ['accessId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Projects$Hmackeys = Resource$Projects$Hmackeys;\n    class Resource$Projects$Serviceaccount {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Projects$Serviceaccount = Resource$Projects$Serviceaccount;\n})(storage_v1 = exports.storage_v1 || (exports.storage_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}