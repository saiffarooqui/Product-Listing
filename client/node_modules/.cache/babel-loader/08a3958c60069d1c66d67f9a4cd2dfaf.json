{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.youtube_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar youtube_v3;\n\n(function (youtube_v3) {\n  /**\n   * YouTube Data API v3\n   *\n   * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const youtube = google.youtube('v3');\n   * ```\n   */\n  class Youtube {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.abuseReports = new Resource$Abusereports(this.context);\n      this.activities = new Resource$Activities(this.context);\n      this.captions = new Resource$Captions(this.context);\n      this.channelBanners = new Resource$Channelbanners(this.context);\n      this.channels = new Resource$Channels(this.context);\n      this.channelSections = new Resource$Channelsections(this.context);\n      this.comments = new Resource$Comments(this.context);\n      this.commentThreads = new Resource$Commentthreads(this.context);\n      this.i18nLanguages = new Resource$I18nlanguages(this.context);\n      this.i18nRegions = new Resource$I18nregions(this.context);\n      this.liveBroadcasts = new Resource$Livebroadcasts(this.context);\n      this.liveChatBans = new Resource$Livechatbans(this.context);\n      this.liveChatMessages = new Resource$Livechatmessages(this.context);\n      this.liveChatModerators = new Resource$Livechatmoderators(this.context);\n      this.liveStreams = new Resource$Livestreams(this.context);\n      this.members = new Resource$Members(this.context);\n      this.membershipsLevels = new Resource$Membershipslevels(this.context);\n      this.playlistItems = new Resource$Playlistitems(this.context);\n      this.playlists = new Resource$Playlists(this.context);\n      this.search = new Resource$Search(this.context);\n      this.subscriptions = new Resource$Subscriptions(this.context);\n      this.superChatEvents = new Resource$Superchatevents(this.context);\n      this.tests = new Resource$Tests(this.context);\n      this.thirdPartyLinks = new Resource$Thirdpartylinks(this.context);\n      this.thumbnails = new Resource$Thumbnails(this.context);\n      this.videoAbuseReportReasons = new Resource$Videoabusereportreasons(this.context);\n      this.videoCategories = new Resource$Videocategories(this.context);\n      this.videos = new Resource$Videos(this.context);\n      this.watermarks = new Resource$Watermarks(this.context);\n      this.youtube = new Resource$Youtube(this.context);\n    }\n\n  }\n\n  youtube_v3.Youtube = Youtube;\n\n  class Resource$Abusereports {\n    constructor(context) {\n      this.context = context;\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/abuseReports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Abusereports = Resource$Abusereports;\n\n  class Resource$Activities {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/activities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Activities = Resource$Activities;\n\n  class Resource$Captions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    download(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/captions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part', 'videoId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Captions = Resource$Captions;\n\n  class Resource$Channelbanners {\n    constructor(context) {\n      this.context = context;\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channelBanners/insert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/channelBanners/insert').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Channelbanners = Resource$Channelbanners;\n\n  class Resource$Channels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Channels = Resource$Channels;\n\n  class Resource$Channelsections {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Channelsections = Resource$Channelsections;\n\n  class Resource$Comments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    markAsSpam(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments/markAsSpam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    setModerationStatus(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments/setModerationStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['id', 'moderationStatus'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Comments = Resource$Comments;\n\n  class Resource$Commentthreads {\n    constructor(context) {\n      this.context = context;\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Commentthreads = Resource$Commentthreads;\n\n  class Resource$I18nlanguages {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/i18nLanguages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$I18nlanguages = Resource$I18nlanguages;\n\n  class Resource$I18nregions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/i18nRegions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$I18nregions = Resource$I18nregions;\n\n  class Resource$Livebroadcasts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    bind(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts/bind').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['id', 'part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insertCuepoint(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts/cuepoint').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    transition(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts/transition').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['broadcastStatus', 'id', 'part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Livebroadcasts = Resource$Livebroadcasts;\n\n  class Resource$Livechatbans {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/bans').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/bans').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Livechatbans = Resource$Livechatbans;\n\n  class Resource$Livechatmessages {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['liveChatId', 'part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Livechatmessages = Resource$Livechatmessages;\n\n  class Resource$Livechatmoderators {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['liveChatId', 'part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Livechatmoderators = Resource$Livechatmoderators;\n\n  class Resource$Livestreams {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Livestreams = Resource$Livestreams;\n\n  class Resource$Members {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/members').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Members = Resource$Members;\n\n  class Resource$Membershipslevels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/membershipsLevels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Membershipslevels = Resource$Membershipslevels;\n\n  class Resource$Playlistitems {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Playlistitems = Resource$Playlistitems;\n\n  class Resource$Playlists {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Playlists = Resource$Playlists;\n\n  class Resource$Search {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Search = Resource$Search;\n\n  class Resource$Subscriptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Subscriptions = Resource$Subscriptions;\n\n  class Resource$Superchatevents {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/superChatEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Superchatevents = Resource$Superchatevents;\n\n  class Resource$Tests {\n    constructor(context) {\n      this.context = context;\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/tests').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Tests = Resource$Tests;\n\n  class Resource$Thirdpartylinks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['linkingToken', 'type'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Thirdpartylinks = Resource$Thirdpartylinks;\n\n  class Resource$Thumbnails {\n    constructor(context) {\n      this.context = context;\n    }\n\n    set(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/thumbnails/set').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/thumbnails/set').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['videoId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Thumbnails = Resource$Thumbnails;\n\n  class Resource$Videoabusereportreasons {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videoAbuseReportReasons').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Videoabusereportreasons = Resource$Videoabusereportreasons;\n\n  class Resource$Videocategories {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videoCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Videocategories = Resource$Videocategories;\n\n  class Resource$Videos {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getRating(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos/getRating').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    rate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['id', 'rating'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    reportAbuse(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos/reportAbuse').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Videos = Resource$Videos;\n\n  class Resource$Watermarks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    set(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/watermarks/set').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/watermarks/set').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['channelId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    unset(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/watermarks/unset').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['channelId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Watermarks = Resource$Watermarks;\n\n  class Resource$Youtube {\n    constructor(context) {\n      this.context = context;\n      this.v3 = new Resource$Youtube$V3(this.context);\n    }\n\n  }\n\n  youtube_v3.Resource$Youtube = Resource$Youtube;\n\n  class Resource$Youtube$V3 {\n    constructor(context) {\n      this.context = context;\n    }\n\n    updateCommentThreads(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  youtube_v3.Resource$Youtube$V3 = Resource$Youtube$V3;\n})(youtube_v3 = exports.youtube_v3 || (exports.youtube_v3 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","youtube_v3","googleapis_common_1","require","Youtube","constructor","options","google","context","_options","abuseReports","Resource$Abusereports","activities","Resource$Activities","captions","Resource$Captions","channelBanners","Resource$Channelbanners","channels","Resource$Channels","channelSections","Resource$Channelsections","comments","Resource$Comments","commentThreads","Resource$Commentthreads","i18nLanguages","Resource$I18nlanguages","i18nRegions","Resource$I18nregions","liveBroadcasts","Resource$Livebroadcasts","liveChatBans","Resource$Livechatbans","liveChatMessages","Resource$Livechatmessages","liveChatModerators","Resource$Livechatmoderators","liveStreams","Resource$Livestreams","members","Resource$Members","membershipsLevels","Resource$Membershipslevels","playlistItems","Resource$Playlistitems","playlists","Resource$Playlists","search","Resource$Search","subscriptions","Resource$Subscriptions","superChatEvents","Resource$Superchatevents","tests","Resource$Tests","thirdPartyLinks","Resource$Thirdpartylinks","thumbnails","Resource$Thumbnails","videoAbuseReportReasons","Resource$Videoabusereportreasons","videoCategories","Resource$Videocategories","videos","Resource$Videos","watermarks","Resource$Watermarks","youtube","Resource$Youtube","insert","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","delete","download","mediaUrl","update","markAsSpam","setModerationStatus","bind","insertCuepoint","transition","set","getRating","rate","reportAbuse","unset","v3","Resource$Youtube$V3","updateCommentThreads"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/youtube/v3.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.youtube_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar youtube_v3;\n(function (youtube_v3) {\n    /**\n     * YouTube Data API v3\n     *\n     * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const youtube = google.youtube('v3');\n     * ```\n     */\n    class Youtube {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.abuseReports = new Resource$Abusereports(this.context);\n            this.activities = new Resource$Activities(this.context);\n            this.captions = new Resource$Captions(this.context);\n            this.channelBanners = new Resource$Channelbanners(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.channelSections = new Resource$Channelsections(this.context);\n            this.comments = new Resource$Comments(this.context);\n            this.commentThreads = new Resource$Commentthreads(this.context);\n            this.i18nLanguages = new Resource$I18nlanguages(this.context);\n            this.i18nRegions = new Resource$I18nregions(this.context);\n            this.liveBroadcasts = new Resource$Livebroadcasts(this.context);\n            this.liveChatBans = new Resource$Livechatbans(this.context);\n            this.liveChatMessages = new Resource$Livechatmessages(this.context);\n            this.liveChatModerators = new Resource$Livechatmoderators(this.context);\n            this.liveStreams = new Resource$Livestreams(this.context);\n            this.members = new Resource$Members(this.context);\n            this.membershipsLevels = new Resource$Membershipslevels(this.context);\n            this.playlistItems = new Resource$Playlistitems(this.context);\n            this.playlists = new Resource$Playlists(this.context);\n            this.search = new Resource$Search(this.context);\n            this.subscriptions = new Resource$Subscriptions(this.context);\n            this.superChatEvents = new Resource$Superchatevents(this.context);\n            this.tests = new Resource$Tests(this.context);\n            this.thirdPartyLinks = new Resource$Thirdpartylinks(this.context);\n            this.thumbnails = new Resource$Thumbnails(this.context);\n            this.videoAbuseReportReasons = new Resource$Videoabusereportreasons(this.context);\n            this.videoCategories = new Resource$Videocategories(this.context);\n            this.videos = new Resource$Videos(this.context);\n            this.watermarks = new Resource$Watermarks(this.context);\n            this.youtube = new Resource$Youtube(this.context);\n        }\n    }\n    youtube_v3.Youtube = Youtube;\n    class Resource$Abusereports {\n        constructor(context) {\n            this.context = context;\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/abuseReports').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Abusereports = Resource$Abusereports;\n    class Resource$Activities {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/activities').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Activities = Resource$Activities;\n    class Resource$Captions {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        download(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/captions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: ['id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part', 'videoId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Captions = Resource$Captions;\n    class Resource$Channelbanners {\n        constructor(context) {\n            this.context = context;\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channelBanners/insert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/channelBanners/insert').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Channelbanners = Resource$Channelbanners;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Channels = Resource$Channels;\n    class Resource$Channelsections {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Channelsections = Resource$Channelsections;\n    class Resource$Comments {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        markAsSpam(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments/markAsSpam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setModerationStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments/setModerationStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['id', 'moderationStatus'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Comments = Resource$Comments;\n    class Resource$Commentthreads {\n        constructor(context) {\n            this.context = context;\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Commentthreads = Resource$Commentthreads;\n    class Resource$I18nlanguages {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/i18nLanguages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$I18nlanguages = Resource$I18nlanguages;\n    class Resource$I18nregions {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/i18nRegions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$I18nregions = Resource$I18nregions;\n    class Resource$Livebroadcasts {\n        constructor(context) {\n            this.context = context;\n        }\n        bind(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts/bind').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['id', 'part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insertCuepoint(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts/cuepoint').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        transition(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts/transition').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['broadcastStatus', 'id', 'part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Livebroadcasts = Resource$Livebroadcasts;\n    class Resource$Livechatbans {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/bans').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/bans').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Livechatbans = Resource$Livechatbans;\n    class Resource$Livechatmessages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['liveChatId', 'part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Livechatmessages = Resource$Livechatmessages;\n    class Resource$Livechatmoderators {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['liveChatId', 'part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Livechatmoderators = Resource$Livechatmoderators;\n    class Resource$Livestreams {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Livestreams = Resource$Livestreams;\n    class Resource$Members {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/members').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Members = Resource$Members;\n    class Resource$Membershipslevels {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/membershipsLevels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Membershipslevels = Resource$Membershipslevels;\n    class Resource$Playlistitems {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Playlistitems = Resource$Playlistitems;\n    class Resource$Playlists {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Playlists = Resource$Playlists;\n    class Resource$Search {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Search = Resource$Search;\n    class Resource$Subscriptions {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Subscriptions = Resource$Subscriptions;\n    class Resource$Superchatevents {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/superChatEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Superchatevents = Resource$Superchatevents;\n    class Resource$Tests {\n        constructor(context) {\n            this.context = context;\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/tests').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Tests = Resource$Tests;\n    class Resource$Thirdpartylinks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['linkingToken', 'type'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Thirdpartylinks = Resource$Thirdpartylinks;\n    class Resource$Thumbnails {\n        constructor(context) {\n            this.context = context;\n        }\n        set(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/thumbnails/set').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/thumbnails/set').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['videoId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Thumbnails = Resource$Thumbnails;\n    class Resource$Videoabusereportreasons {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videoAbuseReportReasons').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Videoabusereportreasons = Resource$Videoabusereportreasons;\n    class Resource$Videocategories {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videoCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Videocategories = Resource$Videocategories;\n    class Resource$Videos {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRating(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos/getRating').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['id', 'rating'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reportAbuse(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos/reportAbuse').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Videos = Resource$Videos;\n    class Resource$Watermarks {\n        constructor(context) {\n            this.context = context;\n        }\n        set(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/watermarks/set').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/watermarks/set').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['channelId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/watermarks/unset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['channelId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Watermarks = Resource$Watermarks;\n    class Resource$Youtube {\n        constructor(context) {\n            this.context = context;\n            this.v3 = new Resource$Youtube$V3(this.context);\n        }\n    }\n    youtube_v3.Resource$Youtube = Resource$Youtube;\n    class Resource$Youtube$V3 {\n        constructor(context) {\n            this.context = context;\n        }\n        updateCommentThreads(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Youtube$V3 = Resource$Youtube$V3;\n})(youtube_v3 = exports.youtube_v3 || (exports.youtube_v3 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}