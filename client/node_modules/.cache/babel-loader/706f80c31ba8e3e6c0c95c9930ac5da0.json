{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getErrorFromOAuthErrorResponse = exports.OAuthClientAuthHandler = void 0;\n\nconst querystring = require(\"querystring\");\n\nconst crypto_1 = require(\"../crypto/crypto\");\n/** List of HTTP methods that accept request bodies. */\n\n\nconst METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];\n/**\n * Abstract class for handling client authentication in OAuth-based\n * operations.\n * When request-body client authentication is used, only application/json and\n * application/x-www-form-urlencoded content types for HTTP methods that support\n * request bodies are supported.\n */\n\nclass OAuthClientAuthHandler {\n  /**\n   * Instantiates an OAuth client authentication handler.\n   * @param clientAuthentication The client auth credentials.\n   */\n  constructor(clientAuthentication) {\n    this.clientAuthentication = clientAuthentication;\n    this.crypto = (0, crypto_1.createCrypto)();\n  }\n  /**\n   * Applies client authentication on the OAuth request's headers or POST\n   * body but does not process the request.\n   * @param opts The GaxiosOptions whose headers or data are to be modified\n   *   depending on the client authentication mechanism to be used.\n   * @param bearerToken The optional bearer token to use for authentication.\n   *   When this is used, no client authentication credentials are needed.\n   */\n\n\n  applyClientAuthenticationOptions(opts, bearerToken) {\n    // Inject authenticated header.\n    this.injectAuthenticatedHeaders(opts, bearerToken); // Inject authenticated request body.\n\n    if (!bearerToken) {\n      this.injectAuthenticatedRequestBody(opts);\n    }\n  }\n  /**\n   * Applies client authentication on the request's header if either\n   * basic authentication or bearer token authentication is selected.\n   *\n   * @param opts The GaxiosOptions whose headers or data are to be modified\n   *   depending on the client authentication mechanism to be used.\n   * @param bearerToken The optional bearer token to use for authentication.\n   *   When this is used, no client authentication credentials are needed.\n   */\n\n\n  injectAuthenticatedHeaders(opts, bearerToken) {\n    var _a; // Bearer token prioritized higher than basic Auth.\n\n\n    if (bearerToken) {\n      opts.headers = opts.headers || {};\n      Object.assign(opts.headers, {\n        Authorization: `Bearer ${bearerToken}}`\n      });\n    } else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'basic') {\n      opts.headers = opts.headers || {};\n      const clientId = this.clientAuthentication.clientId;\n      const clientSecret = this.clientAuthentication.clientSecret || '';\n      const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);\n      Object.assign(opts.headers, {\n        Authorization: `Basic ${base64EncodedCreds}`\n      });\n    }\n  }\n  /**\n   * Applies client authentication on the request's body if request-body\n   * client authentication is selected.\n   *\n   * @param opts The GaxiosOptions whose headers or data are to be modified\n   *   depending on the client authentication mechanism to be used.\n   */\n\n\n  injectAuthenticatedRequestBody(opts) {\n    var _a;\n\n    if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'request-body') {\n      const method = (opts.method || 'GET').toUpperCase(); // Inject authenticated request body.\n\n      if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {\n        // Get content-type.\n        let contentType;\n        const headers = opts.headers || {};\n\n        for (const key in headers) {\n          if (key.toLowerCase() === 'content-type' && headers[key]) {\n            contentType = headers[key].toLowerCase();\n            break;\n          }\n        }\n\n        if (contentType === 'application/x-www-form-urlencoded') {\n          opts.data = opts.data || '';\n          const data = querystring.parse(opts.data);\n          Object.assign(data, {\n            client_id: this.clientAuthentication.clientId,\n            client_secret: this.clientAuthentication.clientSecret || ''\n          });\n          opts.data = querystring.stringify(data);\n        } else if (contentType === 'application/json') {\n          opts.data = opts.data || {};\n          Object.assign(opts.data, {\n            client_id: this.clientAuthentication.clientId,\n            client_secret: this.clientAuthentication.clientSecret || ''\n          });\n        } else {\n          throw new Error(`${contentType} content-types are not supported with ` + `${this.clientAuthentication.confidentialClientType} ` + 'client authentication');\n        }\n      } else {\n        throw new Error(`${method} HTTP method does not support ` + `${this.clientAuthentication.confidentialClientType} ` + 'client authentication');\n      }\n    }\n  }\n\n}\n\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\n * Converts an OAuth error response to a native JavaScript Error.\n * @param resp The OAuth error response to convert to a native Error object.\n * @param err The optional original error. If provided, the error properties\n *   will be copied to the new error.\n * @return The converted native Error object.\n */\n\nfunction getErrorFromOAuthErrorResponse(resp, err) {\n  // Error response.\n  const errorCode = resp.error;\n  const errorDescription = resp.error_description;\n  const errorUri = resp.error_uri;\n  let message = `Error code ${errorCode}`;\n\n  if (typeof errorDescription !== 'undefined') {\n    message += `: ${errorDescription}`;\n  }\n\n  if (typeof errorUri !== 'undefined') {\n    message += ` - ${errorUri}`;\n  }\n\n  const newError = new Error(message); // Copy properties from original error to newly generated error.\n\n  if (err) {\n    const keys = Object.keys(err);\n\n    if (err.stack) {\n      // Copy error.stack if available.\n      keys.push('stack');\n    }\n\n    keys.forEach(key => {\n      // Do not overwrite the message field.\n      if (key !== 'message') {\n        Object.defineProperty(newError, key, {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          value: err[key],\n          writable: false,\n          enumerable: true\n        });\n      }\n    });\n  }\n\n  return newError;\n}\n\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;","map":{"version":3,"names":["Object","defineProperty","exports","value","getErrorFromOAuthErrorResponse","OAuthClientAuthHandler","querystring","require","crypto_1","METHODS_SUPPORTING_REQUEST_BODY","constructor","clientAuthentication","crypto","createCrypto","applyClientAuthenticationOptions","opts","bearerToken","injectAuthenticatedHeaders","injectAuthenticatedRequestBody","_a","headers","assign","Authorization","confidentialClientType","clientId","clientSecret","base64EncodedCreds","encodeBase64StringUtf8","method","toUpperCase","indexOf","contentType","key","toLowerCase","data","parse","client_id","client_secret","stringify","Error","resp","err","errorCode","error","errorDescription","error_description","errorUri","error_uri","message","newError","keys","stack","push","forEach","writable","enumerable"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/google-auth-library/build/src/auth/oauth2common.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getErrorFromOAuthErrorResponse = exports.OAuthClientAuthHandler = void 0;\nconst querystring = require(\"querystring\");\nconst crypto_1 = require(\"../crypto/crypto\");\n/** List of HTTP methods that accept request bodies. */\nconst METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];\n/**\n * Abstract class for handling client authentication in OAuth-based\n * operations.\n * When request-body client authentication is used, only application/json and\n * application/x-www-form-urlencoded content types for HTTP methods that support\n * request bodies are supported.\n */\nclass OAuthClientAuthHandler {\n    /**\n     * Instantiates an OAuth client authentication handler.\n     * @param clientAuthentication The client auth credentials.\n     */\n    constructor(clientAuthentication) {\n        this.clientAuthentication = clientAuthentication;\n        this.crypto = (0, crypto_1.createCrypto)();\n    }\n    /**\n     * Applies client authentication on the OAuth request's headers or POST\n     * body but does not process the request.\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */\n    applyClientAuthenticationOptions(opts, bearerToken) {\n        // Inject authenticated header.\n        this.injectAuthenticatedHeaders(opts, bearerToken);\n        // Inject authenticated request body.\n        if (!bearerToken) {\n            this.injectAuthenticatedRequestBody(opts);\n        }\n    }\n    /**\n     * Applies client authentication on the request's header if either\n     * basic authentication or bearer token authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */\n    injectAuthenticatedHeaders(opts, bearerToken) {\n        var _a;\n        // Bearer token prioritized higher than basic Auth.\n        if (bearerToken) {\n            opts.headers = opts.headers || {};\n            Object.assign(opts.headers, {\n                Authorization: `Bearer ${bearerToken}}`,\n            });\n        }\n        else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'basic') {\n            opts.headers = opts.headers || {};\n            const clientId = this.clientAuthentication.clientId;\n            const clientSecret = this.clientAuthentication.clientSecret || '';\n            const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);\n            Object.assign(opts.headers, {\n                Authorization: `Basic ${base64EncodedCreds}`,\n            });\n        }\n    }\n    /**\n     * Applies client authentication on the request's body if request-body\n     * client authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     */\n    injectAuthenticatedRequestBody(opts) {\n        var _a;\n        if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'request-body') {\n            const method = (opts.method || 'GET').toUpperCase();\n            // Inject authenticated request body.\n            if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {\n                // Get content-type.\n                let contentType;\n                const headers = opts.headers || {};\n                for (const key in headers) {\n                    if (key.toLowerCase() === 'content-type' && headers[key]) {\n                        contentType = headers[key].toLowerCase();\n                        break;\n                    }\n                }\n                if (contentType === 'application/x-www-form-urlencoded') {\n                    opts.data = opts.data || '';\n                    const data = querystring.parse(opts.data);\n                    Object.assign(data, {\n                        client_id: this.clientAuthentication.clientId,\n                        client_secret: this.clientAuthentication.clientSecret || '',\n                    });\n                    opts.data = querystring.stringify(data);\n                }\n                else if (contentType === 'application/json') {\n                    opts.data = opts.data || {};\n                    Object.assign(opts.data, {\n                        client_id: this.clientAuthentication.clientId,\n                        client_secret: this.clientAuthentication.clientSecret || '',\n                    });\n                }\n                else {\n                    throw new Error(`${contentType} content-types are not supported with ` +\n                        `${this.clientAuthentication.confidentialClientType} ` +\n                        'client authentication');\n                }\n            }\n            else {\n                throw new Error(`${method} HTTP method does not support ` +\n                    `${this.clientAuthentication.confidentialClientType} ` +\n                    'client authentication');\n            }\n        }\n    }\n}\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\n * Converts an OAuth error response to a native JavaScript Error.\n * @param resp The OAuth error response to convert to a native Error object.\n * @param err The optional original error. If provided, the error properties\n *   will be copied to the new error.\n * @return The converted native Error object.\n */\nfunction getErrorFromOAuthErrorResponse(resp, err) {\n    // Error response.\n    const errorCode = resp.error;\n    const errorDescription = resp.error_description;\n    const errorUri = resp.error_uri;\n    let message = `Error code ${errorCode}`;\n    if (typeof errorDescription !== 'undefined') {\n        message += `: ${errorDescription}`;\n    }\n    if (typeof errorUri !== 'undefined') {\n        message += ` - ${errorUri}`;\n    }\n    const newError = new Error(message);\n    // Copy properties from original error to newly generated error.\n    if (err) {\n        const keys = Object.keys(err);\n        if (err.stack) {\n            // Copy error.stack if available.\n            keys.push('stack');\n        }\n        keys.forEach(key => {\n            // Do not overwrite the message field.\n            if (key !== 'message') {\n                Object.defineProperty(newError, key, {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    value: err[key],\n                    writable: false,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n    return newError;\n}\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;\n//# sourceMappingURL=oauth2common.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}