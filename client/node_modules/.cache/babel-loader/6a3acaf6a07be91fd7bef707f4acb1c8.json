{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.securitycenter_v1beta2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar securitycenter_v1beta2;\n\n(function (securitycenter_v1beta2) {\n  /**\n   * Security Command Center API\n   *\n   * Security Command Center API provides access to temporal views of assets and findings within an organization.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const securitycenter = google.securitycenter('v1beta2');\n   * ```\n   */\n  class Securitycenter {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.folders = new Resource$Folders(this.context);\n      this.organizations = new Resource$Organizations(this.context);\n      this.projects = new Resource$Projects(this.context);\n    }\n\n  }\n\n  securitycenter_v1beta2.Securitycenter = Securitycenter;\n\n  class Resource$Folders {\n    constructor(context) {\n      this.context = context;\n      this.containerThreatDetectionSettings = new Resource$Folders$Containerthreatdetectionsettings(this.context);\n      this.eventThreatDetectionSettings = new Resource$Folders$Eventthreatdetectionsettings(this.context);\n      this.rapidVulnerabilityDetectionSettings = new Resource$Folders$Rapidvulnerabilitydetectionsettings(this.context);\n      this.securityHealthAnalyticsSettings = new Resource$Folders$Securityhealthanalyticssettings(this.context);\n      this.virtualMachineThreatDetectionSettings = new Resource$Folders$Virtualmachinethreatdetectionsettings(this.context);\n      this.webSecurityScannerSettings = new Resource$Folders$Websecurityscannersettings(this.context);\n    }\n\n    getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getOnboardingState(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSecurityCenterSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Folders = Resource$Folders;\n\n  class Resource$Folders$Containerthreatdetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Folders$Containerthreatdetectionsettings = Resource$Folders$Containerthreatdetectionsettings;\n\n  class Resource$Folders$Eventthreatdetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Folders$Eventthreatdetectionsettings = Resource$Folders$Eventthreatdetectionsettings;\n\n  class Resource$Folders$Rapidvulnerabilitydetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Folders$Rapidvulnerabilitydetectionsettings = Resource$Folders$Rapidvulnerabilitydetectionsettings;\n\n  class Resource$Folders$Securityhealthanalyticssettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Folders$Securityhealthanalyticssettings = Resource$Folders$Securityhealthanalyticssettings;\n\n  class Resource$Folders$Virtualmachinethreatdetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Folders$Virtualmachinethreatdetectionsettings = Resource$Folders$Virtualmachinethreatdetectionsettings;\n\n  class Resource$Folders$Websecurityscannersettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Folders$Websecurityscannersettings = Resource$Folders$Websecurityscannersettings;\n\n  class Resource$Organizations {\n    constructor(context) {\n      this.context = context;\n      this.containerThreatDetectionSettings = new Resource$Organizations$Containerthreatdetectionsettings(this.context);\n      this.eventThreatDetectionSettings = new Resource$Organizations$Eventthreatdetectionsettings(this.context);\n      this.rapidVulnerabilityDetectionSettings = new Resource$Organizations$Rapidvulnerabilitydetectionsettings(this.context);\n      this.securityHealthAnalyticsSettings = new Resource$Organizations$Securityhealthanalyticssettings(this.context);\n      this.virtualMachineThreatDetectionSettings = new Resource$Organizations$Virtualmachinethreatdetectionsettings(this.context);\n      this.webSecurityScannerSettings = new Resource$Organizations$Websecurityscannersettings(this.context);\n    }\n\n    getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getOnboardingState(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSecurityCenterSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSubscription(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Organizations = Resource$Organizations;\n\n  class Resource$Organizations$Containerthreatdetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Organizations$Containerthreatdetectionsettings = Resource$Organizations$Containerthreatdetectionsettings;\n\n  class Resource$Organizations$Eventthreatdetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Organizations$Eventthreatdetectionsettings = Resource$Organizations$Eventthreatdetectionsettings;\n\n  class Resource$Organizations$Rapidvulnerabilitydetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Organizations$Rapidvulnerabilitydetectionsettings = Resource$Organizations$Rapidvulnerabilitydetectionsettings;\n\n  class Resource$Organizations$Securityhealthanalyticssettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Organizations$Securityhealthanalyticssettings = Resource$Organizations$Securityhealthanalyticssettings;\n\n  class Resource$Organizations$Virtualmachinethreatdetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Organizations$Virtualmachinethreatdetectionsettings = Resource$Organizations$Virtualmachinethreatdetectionsettings;\n\n  class Resource$Organizations$Websecurityscannersettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Organizations$Websecurityscannersettings = Resource$Organizations$Websecurityscannersettings;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.containerThreatDetectionSettings = new Resource$Projects$Containerthreatdetectionsettings(this.context);\n      this.eventThreatDetectionSettings = new Resource$Projects$Eventthreatdetectionsettings(this.context);\n      this.locations = new Resource$Projects$Locations(this.context);\n      this.rapidVulnerabilityDetectionSettings = new Resource$Projects$Rapidvulnerabilitydetectionsettings(this.context);\n      this.securityHealthAnalyticsSettings = new Resource$Projects$Securityhealthanalyticssettings(this.context);\n      this.virtualMachineThreatDetectionSettings = new Resource$Projects$Virtualmachinethreatdetectionsettings(this.context);\n      this.webSecurityScannerSettings = new Resource$Projects$Websecurityscannersettings(this.context);\n    }\n\n    getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getOnboardingState(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSecurityCenterSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    getWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Projects = Resource$Projects;\n\n  class Resource$Projects$Containerthreatdetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Projects$Containerthreatdetectionsettings = Resource$Projects$Containerthreatdetectionsettings;\n\n  class Resource$Projects$Eventthreatdetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Projects$Eventthreatdetectionsettings = Resource$Projects$Eventthreatdetectionsettings;\n\n  class Resource$Projects$Locations {\n    constructor(context) {\n      this.context = context;\n      this.clusters = new Resource$Projects$Locations$Clusters(this.context);\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Projects$Locations = Resource$Projects$Locations;\n\n  class Resource$Projects$Locations$Clusters {\n    constructor(context) {\n      this.context = context;\n      this.containerThreatDetectionSettings = new Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings(this.context);\n    }\n\n    getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n    updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Projects$Locations$Clusters = Resource$Projects$Locations$Clusters;\n\n  class Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings = Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings;\n\n  class Resource$Projects$Rapidvulnerabilitydetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Projects$Rapidvulnerabilitydetectionsettings = Resource$Projects$Rapidvulnerabilitydetectionsettings;\n\n  class Resource$Projects$Securityhealthanalyticssettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Projects$Securityhealthanalyticssettings = Resource$Projects$Securityhealthanalyticssettings;\n\n  class Resource$Projects$Virtualmachinethreatdetectionsettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Projects$Virtualmachinethreatdetectionsettings = Resource$Projects$Virtualmachinethreatdetectionsettings;\n\n  class Resource$Projects$Websecurityscannersettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    calculate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n\n  }\n\n  securitycenter_v1beta2.Resource$Projects$Websecurityscannersettings = Resource$Projects$Websecurityscannersettings;\n})(securitycenter_v1beta2 = exports.securitycenter_v1beta2 || (exports.securitycenter_v1beta2 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","securitycenter_v1beta2","googleapis_common_1","require","Securitycenter","constructor","options","google","context","_options","folders","Resource$Folders","organizations","Resource$Organizations","projects","Resource$Projects","containerThreatDetectionSettings","Resource$Folders$Containerthreatdetectionsettings","eventThreatDetectionSettings","Resource$Folders$Eventthreatdetectionsettings","rapidVulnerabilityDetectionSettings","Resource$Folders$Rapidvulnerabilitydetectionsettings","securityHealthAnalyticsSettings","Resource$Folders$Securityhealthanalyticssettings","virtualMachineThreatDetectionSettings","Resource$Folders$Virtualmachinethreatdetectionsettings","webSecurityScannerSettings","Resource$Folders$Websecurityscannersettings","getContainerThreatDetectionSettings","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","getEventThreatDetectionSettings","getOnboardingState","getRapidVulnerabilityDetectionSettings","getSecurityCenterSettings","getSecurityHealthAnalyticsSettings","getVirtualMachineThreatDetectionSettings","getWebSecurityScannerSettings","updateContainerThreatDetectionSettings","updateEventThreatDetectionSettings","updateRapidVulnerabilityDetectionSettings","updateSecurityHealthAnalyticsSettings","updateVirtualMachineThreatDetectionSettings","updateWebSecurityScannerSettings","calculate","Resource$Organizations$Containerthreatdetectionsettings","Resource$Organizations$Eventthreatdetectionsettings","Resource$Organizations$Rapidvulnerabilitydetectionsettings","Resource$Organizations$Securityhealthanalyticssettings","Resource$Organizations$Virtualmachinethreatdetectionsettings","Resource$Organizations$Websecurityscannersettings","getSubscription","Resource$Projects$Containerthreatdetectionsettings","Resource$Projects$Eventthreatdetectionsettings","locations","Resource$Projects$Locations","Resource$Projects$Rapidvulnerabilitydetectionsettings","Resource$Projects$Securityhealthanalyticssettings","Resource$Projects$Virtualmachinethreatdetectionsettings","Resource$Projects$Websecurityscannersettings","clusters","Resource$Projects$Locations$Clusters","Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings"],"sources":["C:/Users/frexm/Desktop/ProductListing/node_modules/googleapis/build/src/apis/securitycenter/v1beta2.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.securitycenter_v1beta2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar securitycenter_v1beta2;\n(function (securitycenter_v1beta2) {\n    /**\n     * Security Command Center API\n     *\n     * Security Command Center API provides access to temporal views of assets and findings within an organization.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const securitycenter = google.securitycenter('v1beta2');\n     * ```\n     */\n    class Securitycenter {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.folders = new Resource$Folders(this.context);\n            this.organizations = new Resource$Organizations(this.context);\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    securitycenter_v1beta2.Securitycenter = Securitycenter;\n    class Resource$Folders {\n        constructor(context) {\n            this.context = context;\n            this.containerThreatDetectionSettings =\n                new Resource$Folders$Containerthreatdetectionsettings(this.context);\n            this.eventThreatDetectionSettings =\n                new Resource$Folders$Eventthreatdetectionsettings(this.context);\n            this.rapidVulnerabilityDetectionSettings =\n                new Resource$Folders$Rapidvulnerabilitydetectionsettings(this.context);\n            this.securityHealthAnalyticsSettings =\n                new Resource$Folders$Securityhealthanalyticssettings(this.context);\n            this.virtualMachineThreatDetectionSettings =\n                new Resource$Folders$Virtualmachinethreatdetectionsettings(this.context);\n            this.webSecurityScannerSettings =\n                new Resource$Folders$Websecurityscannersettings(this.context);\n        }\n        getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getOnboardingState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSecurityCenterSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Folders = Resource$Folders;\n    class Resource$Folders$Containerthreatdetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Folders$Containerthreatdetectionsettings = Resource$Folders$Containerthreatdetectionsettings;\n    class Resource$Folders$Eventthreatdetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Folders$Eventthreatdetectionsettings = Resource$Folders$Eventthreatdetectionsettings;\n    class Resource$Folders$Rapidvulnerabilitydetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Folders$Rapidvulnerabilitydetectionsettings = Resource$Folders$Rapidvulnerabilitydetectionsettings;\n    class Resource$Folders$Securityhealthanalyticssettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Folders$Securityhealthanalyticssettings = Resource$Folders$Securityhealthanalyticssettings;\n    class Resource$Folders$Virtualmachinethreatdetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Folders$Virtualmachinethreatdetectionsettings = Resource$Folders$Virtualmachinethreatdetectionsettings;\n    class Resource$Folders$Websecurityscannersettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Folders$Websecurityscannersettings = Resource$Folders$Websecurityscannersettings;\n    class Resource$Organizations {\n        constructor(context) {\n            this.context = context;\n            this.containerThreatDetectionSettings =\n                new Resource$Organizations$Containerthreatdetectionsettings(this.context);\n            this.eventThreatDetectionSettings =\n                new Resource$Organizations$Eventthreatdetectionsettings(this.context);\n            this.rapidVulnerabilityDetectionSettings =\n                new Resource$Organizations$Rapidvulnerabilitydetectionsettings(this.context);\n            this.securityHealthAnalyticsSettings =\n                new Resource$Organizations$Securityhealthanalyticssettings(this.context);\n            this.virtualMachineThreatDetectionSettings =\n                new Resource$Organizations$Virtualmachinethreatdetectionsettings(this.context);\n            this.webSecurityScannerSettings =\n                new Resource$Organizations$Websecurityscannersettings(this.context);\n        }\n        getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getOnboardingState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSecurityCenterSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSubscription(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Organizations = Resource$Organizations;\n    class Resource$Organizations$Containerthreatdetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Organizations$Containerthreatdetectionsettings = Resource$Organizations$Containerthreatdetectionsettings;\n    class Resource$Organizations$Eventthreatdetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Organizations$Eventthreatdetectionsettings = Resource$Organizations$Eventthreatdetectionsettings;\n    class Resource$Organizations$Rapidvulnerabilitydetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Organizations$Rapidvulnerabilitydetectionsettings = Resource$Organizations$Rapidvulnerabilitydetectionsettings;\n    class Resource$Organizations$Securityhealthanalyticssettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Organizations$Securityhealthanalyticssettings = Resource$Organizations$Securityhealthanalyticssettings;\n    class Resource$Organizations$Virtualmachinethreatdetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Organizations$Virtualmachinethreatdetectionsettings = Resource$Organizations$Virtualmachinethreatdetectionsettings;\n    class Resource$Organizations$Websecurityscannersettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Organizations$Websecurityscannersettings = Resource$Organizations$Websecurityscannersettings;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.containerThreatDetectionSettings =\n                new Resource$Projects$Containerthreatdetectionsettings(this.context);\n            this.eventThreatDetectionSettings =\n                new Resource$Projects$Eventthreatdetectionsettings(this.context);\n            this.locations = new Resource$Projects$Locations(this.context);\n            this.rapidVulnerabilityDetectionSettings =\n                new Resource$Projects$Rapidvulnerabilitydetectionsettings(this.context);\n            this.securityHealthAnalyticsSettings =\n                new Resource$Projects$Securityhealthanalyticssettings(this.context);\n            this.virtualMachineThreatDetectionSettings =\n                new Resource$Projects$Virtualmachinethreatdetectionsettings(this.context);\n            this.webSecurityScannerSettings =\n                new Resource$Projects$Websecurityscannersettings(this.context);\n        }\n        getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getOnboardingState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSecurityCenterSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateEventThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateRapidVulnerabilityDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateSecurityHealthAnalyticsSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateVirtualMachineThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateWebSecurityScannerSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Containerthreatdetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Projects$Containerthreatdetectionsettings = Resource$Projects$Containerthreatdetectionsettings;\n    class Resource$Projects$Eventthreatdetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Projects$Eventthreatdetectionsettings = Resource$Projects$Eventthreatdetectionsettings;\n    class Resource$Projects$Locations {\n        constructor(context) {\n            this.context = context;\n            this.clusters = new Resource$Projects$Locations$Clusters(this.context);\n        }\n    }\n    securitycenter_v1beta2.Resource$Projects$Locations = Resource$Projects$Locations;\n    class Resource$Projects$Locations$Clusters {\n        constructor(context) {\n            this.context = context;\n            this.containerThreatDetectionSettings =\n                new Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings(this.context);\n        }\n        getContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateContainerThreatDetectionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Projects$Locations$Clusters = Resource$Projects$Locations$Clusters;\n    class Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings = Resource$Projects$Locations$Clusters$Containerthreatdetectionsettings;\n    class Resource$Projects$Rapidvulnerabilitydetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Projects$Rapidvulnerabilitydetectionsettings = Resource$Projects$Rapidvulnerabilitydetectionsettings;\n    class Resource$Projects$Securityhealthanalyticssettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Projects$Securityhealthanalyticssettings = Resource$Projects$Securityhealthanalyticssettings;\n    class Resource$Projects$Virtualmachinethreatdetectionsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Projects$Virtualmachinethreatdetectionsettings = Resource$Projects$Virtualmachinethreatdetectionsettings;\n    class Resource$Projects$Websecurityscannersettings {\n        constructor(context) {\n            this.context = context;\n        }\n        calculate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://securitycenter.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta2/{+name}:calculate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    securitycenter_v1beta2.Resource$Projects$Websecurityscannersettings = Resource$Projects$Websecurityscannersettings;\n})(securitycenter_v1beta2 = exports.securitycenter_v1beta2 || (exports.securitycenter_v1beta2 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}